{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# cells-ajax\n\n![Certificated](https://img.shields.io/badge/certificated-yes-brightgreen.svg) ![Polymer 2.x](https://img.shields.io/badge/Polymer-2.x-green.svg)\n\n[Demo of component in Cells Catalog](https://catalogs.platform.bbva.com/cells)\n\nAn element providing a starting point for your own reusable Polymer elements.\n\n## Dependencies\n\nElement dependencies are managed via [Bower](http://bower.io/). You can\ninstall that via:\n\n    npm install -g bower\n\nThen, go ahead and download the element's dependencies:\n\n    bower install\n\n\n## Playing With Your Element\n\nIf you wish to work on your element in isolation, we recommend that you use\n[Polyserve](https://github.com/PolymerLabs/polyserve) to keep your element's\nbower dependencies in line. You can install it via:\n\n    npm install -g polyserve\n\nAnd you can run it via:\n\n    polyserve\n\nOnce running, you can preview your element at\n`http://localhost:8080/components/cells-ajax/`, where `cells-ajax` is the name of the directory containing it.\n\n\n## Testing Your Element\n\nSimply navigate to the `/test` directory of your element to run its tests. If\nyou are using Polyserve: `http://localhost:8080/components/cells-ajax/test/`\n\n### web-component-tester\n\nThe tests are compatible with [web-component-tester](https://github.com/Polymer/web-component-tester).\nInstall it via:\n\n    npm install -g web-component-tester\n\nThen, you can run your tests on _all_ of your local browsers via:\n\n    wct\n\n#### WCT Tips\n\n`wct -l chrome` will only run tests in chrome.\n\n`wct -p` will keep the browsers alive after test runs (refresh to re-run).\n\n`wct test/some-file.html` will test only the files you specify.",
      "summary": "Ajax web component with cache and iron-localstorage reponses store",
      "path": "cells-ajax/cells-ajax.js",
      "properties": [
        {
          "name": "keysStore",
          "type": "Object | null | undefined",
          "description": "History to save the key and timestamp created in the localStorage by the component",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "native",
          "type": "boolean | null | undefined",
          "description": "Force http request to background threads of mobile device.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "rejectWithRequest",
          "type": "boolean | null | undefined",
          "description": "Reject with the request and an error message.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "cache",
          "type": "string | null | undefined",
          "description": "Cache type to use, currently available `memory` and `local`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "cacheTime",
          "type": "number | null | undefined",
          "description": "Length of time in milliseconds to cache the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "url",
          "type": "string | null | undefined",
          "description": "The URL target of the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "params",
          "type": "Object | null | undefined",
          "description": "An object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "method",
          "type": "string | null | undefined",
          "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"GET\""
        },
        {
          "name": "headers",
          "type": "Object | null | undefined",
          "description": "HTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "contentType",
          "type": "string | null | undefined",
          "description": "Content type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "body",
          "type": "Object | null | undefined",
          "description": "Body content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "sync",
          "type": "boolean | null | undefined",
          "description": "Toggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doingâ„¢.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "handleAs",
          "type": "string | null | undefined",
          "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"json\""
        },
        {
          "name": "withCredentials",
          "type": "boolean | null | undefined",
          "description": "Set the withCredentials flag on the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "timeout",
          "type": "number | null | undefined",
          "description": "Set the timeout flag on the request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "auto",
          "type": "boolean | null | undefined",
          "description": "If true, automatically performs an Ajax request when either `url` or\n`params` changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 256,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "verbose",
          "type": "boolean | null | undefined",
          "description": "If true, error messages will automatically be logged to the console.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 263,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "lastRequest",
          "type": "Object | null | undefined",
          "description": "The most recent request made by this iron-ajax element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 271,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "True while lastRequest is in flight.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "lastResponse",
          "type": "Object",
          "description": "lastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 296,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "lastError",
          "type": "Object",
          "description": "lastRequest's error, if any.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 306,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "activeRequests",
          "type": "Array | null | undefined",
          "description": "An Array of all in-flight requests originating from this iron-ajax\nelement.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "debounceDuration",
          "type": "number | null | undefined",
          "description": "Length of time in milliseconds to debounce multiple automatically generated requests.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "jsonPrefix",
          "type": "string | null | undefined",
          "description": "Prefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "cacheTypes",
          "type": "Array | null | undefined",
          "description": "Types of cache.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 353,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          },
          "defaultValue": "[\"none\",\"memory\",\"local\"]"
        }
      ],
      "methods": [
        {
          "name": "generateRequest",
          "description": "Performs an AJAX request to the specified URL.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "!IronRequestElement"
          }
        },
        {
          "name": "removeFromCache",
          "description": "Set to null the cache for the given key.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 2
            },
            "end": {
              "line": 418,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "clearCache",
          "description": "Clear the cache of the type given",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 433,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cache",
              "type": "String"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getRequestKey",
          "description": "Creates a string key based on request.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 2
            },
            "end": {
              "line": 454,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requestOptions",
              "type": "Object"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Created key"
          }
        },
        {
          "name": "getCacheExpirationKey",
          "description": "Create the expiration key.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 461,
              "column": 2
            },
            "end": {
              "line": 463,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "[key from expiration]"
            }
          ],
          "return": {
            "type": "String",
            "desc": "[expiration key]"
          }
        },
        {
          "name": "_getCacheExpirationValue",
          "description": "Calculates expiration value for cache.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 2
            },
            "end": {
              "line": 476,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cacheTime"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "expiration time"
          }
        },
        {
          "name": "getResponseCached",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 478,
              "column": 2
            },
            "end": {
              "line": 492,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "cache"
            }
          ]
        },
        {
          "name": "_isCacheExpired",
          "description": "Checks if cache has expired",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 2
            },
            "end": {
              "line": 501,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expiration",
              "type": "Object",
              "description": "info about response expirtion time"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if cache is expired"
          }
        },
        {
          "name": "_getCacheOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 2
            },
            "end": {
              "line": 509,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requestOptions"
            }
          ]
        },
        {
          "name": "_removeLocalCache",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 511,
              "column": 2
            },
            "end": {
              "line": 517,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setResponseCached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 519,
              "column": 2
            },
            "end": {
              "line": 532,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            },
            {
              "name": "cacheOptions"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setLocalCache",
          "description": "Save request response in local storage",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 541,
              "column": 2
            },
            "end": {
              "line": 546,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key",
              "type": "String",
              "description": "Request identifyer based on props"
            },
            {
              "name": "response",
              "type": "Object",
              "description": "Data obtained from request"
            },
            {
              "name": "expiration",
              "type": "Object",
              "description": "Info about response expirtion time"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getLocalCache",
          "description": "Get response from local storage.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 554,
              "column": 2
            },
            "end": {
              "line": 568,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "value Cached response"
          }
        },
        {
          "name": "_removeFromLocalCache",
          "description": "Set to null the local cache for the given key.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 2
            },
            "end": {
              "line": 578,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setMemoryCache",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 580,
              "column": 2
            },
            "end": {
              "line": 583,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "response"
            },
            {
              "name": "expiration"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getMemoryCache",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 585,
              "column": 2
            },
            "end": {
              "line": 594,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ]
        },
        {
          "name": "_removeFromMemoryCache",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 2
            },
            "end": {
              "line": 599,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 2
            },
            "end": {
              "line": 609,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 611,
              "column": 2
            },
            "end": {
              "line": 619,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "request"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 621,
              "column": 2
            },
            "end": {
              "line": 629,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            },
            {
              "name": "data"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_discardRequest",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 2
            },
            "end": {
              "line": 636,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 637,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "Polymer.Element",
      "name": "CellsAjax",
      "attributes": [
        {
          "name": "keys-store",
          "description": "History to save the key and timestamp created in the localStorage by the component",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 6
            },
            "end": {
              "line": 103,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "native",
          "description": "Force http request to background threads of mobile device.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 110,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "reject-with-request",
          "description": "Reject with the request and an error message.",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 6
            },
            "end": {
              "line": 117,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "cache",
          "description": "Cache type to use, currently available `memory` and `local`.",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cache-time",
          "description": "Length of time in milliseconds to cache the request.",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 6
            },
            "end": {
              "line": 125,
              "column": 33
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "url",
          "description": "The URL target of the request.",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 132,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "params",
          "description": "An object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 144,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "method",
          "description": "The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "headers",
          "description": "HTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 6
            },
            "end": {
              "line": 172,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "content-type",
          "description": "Content type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "body",
          "description": "Body content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 6
            },
            "end": {
              "line": 204,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "sync",
          "description": "Toggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doingâ„¢.",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "handle-as",
          "description": "Specifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "with-credentials",
          "description": "Set the withCredentials flag on the request.",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "timeout",
          "description": "Set the timeout flag on the request.",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "auto",
          "description": "If true, automatically performs an Ajax request when either `url` or\n`params` changes.",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 6
            },
            "end": {
              "line": 256,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "verbose",
          "description": "If true, error messages will automatically be logged to the console.",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 6
            },
            "end": {
              "line": 263,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "last-request",
          "description": "The most recent request made by this iron-ajax element.",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 271,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "loading",
          "description": "True while lastRequest is in flight.",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 6
            },
            "end": {
              "line": 279,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "last-response",
          "description": "lastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 6
            },
            "end": {
              "line": 296,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "last-error",
          "description": "lastRequest's error, if any.",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 6
            },
            "end": {
              "line": 306,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "active-requests",
          "description": "An Array of all in-flight requests originating from this iron-ajax\nelement.",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 6
            },
            "end": {
              "line": 318,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "debounce-duration",
          "description": "Length of time in milliseconds to debounce multiple automatically generated requests.",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "json-prefix",
          "description": "Prefix to be stripped from a JSON response before parsing it.\n\nIn order to prevent an attack using CSRF with Array responses\n(http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)\nmany backends will mitigate this by prefixing all JSON response bodies\nwith a string that would be nonsensical to a JavaScript parser.",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 6
            },
            "end": {
              "line": 339,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cache-types",
          "description": "Types of cache.",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 6
            },
            "end": {
              "line": 353,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "error",
          "description": "Fired when an error is received.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request",
          "description": "Fired when a request is sent.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "response",
          "description": "Fired when a response is received.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "url-changed",
          "description": "Fired when the `url` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-request-changed",
          "description": "Fired when the `lastRequest` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "loading-changed",
          "description": "Fired when the `loading` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-response-changed",
          "description": "Fired when the `lastResponse` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "last-error-changed",
          "description": "Fired when the `lastError` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "active-requests-changed",
          "description": "Fired when the `activeRequests` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "debounce-duration-changed",
          "description": "Fired when the `debounceDuration` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cells-ajax"
    }
  ]
}
