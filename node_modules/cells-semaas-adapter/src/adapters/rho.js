import Constants from '../constants';
import Utils from '../utils';

const { RHO } = Constants;
const { ALLOWED_FIELDS } = RHO;
const { sanitizeObj, createUUID } = Utils;

class Span {
  constructor(config) {
    this.spanId = null;
    this.initialize(config);
  }

  initialize(config) {
    ALLOWED_FIELDS.forEach((field) => {
      if (config[field]) {
        this[field] = config[field];
      }
    });

    this.spanId = createUUID();
    this.start();
  }

  start() {
    this.startDate = Date.now() * 1000000;
  }

  finish() {
    this.finishDate = Date.now() * 1000000;
  }
}

export default class Rho {
  constructor(mrId) {
    this.mrId = mrId;
  }

  createUUID() {
    return createUUID();
  }

  createSpan(rawData, childSpanPrefix) {
    const { mrId: DEFAULT_MR_ID } = this;
    const { mrId = DEFAULT_MR_ID, parentSpan } = rawData;
    const normalizedParentSpan = this.getParentSpan(parentSpan, mrId, childSpanPrefix);
    const data = {
      ...rawData,
      mrId,
      parentSpan: normalizedParentSpan,
    };
    const span = new Span(data);

    return span;
  }

  buildSpans(data) {
    const iterableData = Array.isArray(data) ? [...data] : [data];

    return iterableData.map(item => sanitizeObj(item, ALLOWED_FIELDS));
  }

  getParentSpan(parentSpan, mrId, childSpanPrefix) {
    if (!parentSpan) {
      return null;
    }

    return [childSpanPrefix, mrId, 'spans', parentSpan].join('/');
  }
}
