import Utils from './utils';

const { groupBy } = Utils;

const MAXIMUM_BULK_SIZE = 1000;

export default class Queue {
  // maximumBulkSize = null;

  constructor(identifier) {
    this.items = [];
    this.identifier = identifier;
  }

  add(endpoint, data) {
    const iterableData = Array.isArray(data) ? [...data] : [data];

    iterableData.forEach((item) => {
      const operation = {
        data: item,
        endpoint,
      };

      this.items.push(operation);
    });
  }

  dump(/* maximumBulkSize */) {
    if (!this.any()) {
      return null;
    }

    const queueGroupedByEndpoint = groupBy(this.items, 'endpoint');
    const { values: firstQueueGroup } = queueGroupedByEndpoint[0];
    const bulk = firstQueueGroup.slice(0, MAXIMUM_BULK_SIZE);
    const newQueue = this.items.filter(item => !bulk.includes(item));

    console.log(`Dumping ${bulk.length} items from ${this.identifier} queue (${this.items.length})...`);

    this.items = newQueue;

    return bulk;
  }

  any() {
    return this.items !== null && this.items.length > 0;
  }
}
