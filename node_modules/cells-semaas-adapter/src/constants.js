const SEMAAS_REQUIRED_FIELDS = [
  'consumerId',
  'policy',
  'mrId',
  'nameSpace',
  'region',
  'dnsTld',
  'tsec2JWTEndpoint',
  'tsecStorageKey',
];

const SEMAAS = {
  DEFAULT_ADAPTER_IDENTIFIER: 'application',
  DEFAULT_ADAPTER_VERSION: 'v1',
  REQUIRED_FIELDS: SEMAAS_REQUIRED_FIELDS,
  ALLOWED_FIELDS: [
    ...SEMAAS_REQUIRED_FIELDS,
    'identifier',
    'version',
    'logLevel',
  ],
};

const buildServiceUri = codename => (region, dnsTld, version) => `https://${codename}.${[region, dnsTld].filter(Boolean).join('.')}/${version}`;

const RHO = {
  HOST: buildServiceUri('rho'),
  ALLOWED_FIELDS: [
    'mrId',
    'spanId',
    'startDate',
    'finishDate',
    'name',
    'parentSpan',
    'traceId',
    'properties',
    'duration',
    'recordDate',
  ],
  REQUIRED_FIELDS: [],
};

const DEFAULT_LOG_LEVEL = 'debug';

const OMEGA = {
  HOST: buildServiceUri('omega'),
  DEFAULT_LOG_LEVEL,
  ALLOWED_FIELDS: [
    'mrId',
    'spanId',
    'traceId',
    'creationDate',
    'level',
    'message',
    'properties',
  ],
  MAXIMUM_BULK_SIZE: 1000,
  REQUIRED_FIELDS: [],
  LOG_LEVELS: [
    DEFAULT_LOG_LEVEL,
    'info',
    'warn',
    'warning',
    'error',
    'fatal',
  ],
};

// const TSEC2JWT = {
//   HOST: environment => `https://tsec2jwt.smlb.${environment}.meigas.cloud/v1/Token`,
// };

export default {
  SEMAAS,
  RHO,
  OMEGA,
  // TSEC2JWT,
};
