// credits to GeenenTijd/dotify
// https://github.com/GeenenTijd/dotify/blob/master/dotify.js
const dotify = (obj) => {
  const SEPARATOR_KEY = '_';
  const res = {};
  const recurse = (obj, current) => {
    Object.keys(obj).forEach((key) => {
      const value = obj[key];
      const newKey = (current ? current + SEPARATOR_KEY + key : key); // joined key with dot
      if (value && typeof value === 'object') {
        recurse(value, newKey); // it's a nested object, so do it again
      } else {
        res[newKey] = value; // it's not an object, so set the property
      }
    });
  };

  recurse(obj);
  return res;
};
const sanitizeObj = (obj, allowedFields) => {
  const result = { ...obj };

  Object.keys(result).forEach((prop) => {
    if (!allowedFields.includes(prop)) {
      delete result[prop];
    }
  });

  if (result.properties) {
    result.properties = dotify(result.properties);
  }

  return result;
};
const hasProperty = obj => field => Object.prototype.hasOwnProperty.call(obj, field) && !!obj[field];
const hasProperties = (obj, expectedFields) => expectedFields.every(hasProperty(obj));
const groupBy = (items, value) => items.reduce((prev, current) => {
  const key = value instanceof Function ? value(current) : current[value];
  const itemsContainingKey = prev.find(r => r && r.key === key);

  if (itemsContainingKey) {
    itemsContainingKey.values.push(current);
  } else {
    prev.push({ key, values: [current] });
  }

  return prev;
}, []);
const createUUID = () => {
  const s = [];
  const hexDigits = '0123456789abcdef';
  for (let i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
  }
  s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010
  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
  s[8] = s[13] = s[18] = s[23] = '-';

  const uuid = s.join('');
  return uuid;
};

export default {
  dotify,
  sanitizeObj,
  hasProperty,
  hasProperties,
  groupBy,
  createUUID,
};
