import Utils from '../src/utils';

const {
  dotify,
  sanitizeObj,
  hasProperty,
  hasProperties,
  groupBy,
} = Utils;

describe('utils', () => {
  describe('hasProperty', () => {
    test.each([
      [{ test: true }, 'test', true],
      [{}, 'test', false]
    ])('it should detect property on given object', (model, property, expected) => {
      const result = hasProperty(model)(property);

      expect(result).toBe(expected);
    });
  });

  describe('hasProperties', () => {
    test.each([
      [{ test: true, body: {} }, ['test', 'body'], true],
      [{}, ['test'], false]
    ])('it should detect properties on given object', (model, properties, expected) => {
      const result = hasProperties(model, properties);

      expect(result).toBe(expected);
    });
  });

  describe('sanitizeObj', () => {
    test.each([
      [{ test: true, body: {} }, [], {}],
      [{ test: true, body: {} }, ['test'], { test: true }]
    ])('it should detect properties on given object', (model, allowedProperties, expected) => {
      const result = sanitizeObj(model, allowedProperties);

      expect(result).toEqual(expected);
    });
  });

  describe('dotify', () => {
    test.each([
      [{ test: true }, { test: true }],
      [{ test: { deep: { properties: true } }, simple: false }, { 'test_deep_properties': true, simple: false }]
    ])('it should convert deep nested properties object into slash notation', (model, expected) => {
      const result = dotify(model);

      expect(result).toEqual(expected);
    });
  });

  describe('groupBy', () => {
    describe('value', () => {
      test('it should group by simple value', () => {
        const items = [
          { type: 1 },
          { type: 2 }
        ];
        const result = groupBy(items, 'type');
        const expected = [
          { key: 1, values: [{ type: 1 }] },
          { key: 2, values: [{ type: 2 }] },
        ];

        expect(result).toEqual(expected);
      });
    });

    describe('function', () => {
      test('it should group by function', () => {
        const groupByFn = input => `k-${input.type}`;
        const items = [
          { id: 1, type: 1 },
          { id: 2, type: 2 },
          { id: 3, type: 2 }
        ];
        const result = groupBy(items, groupByFn);
        const expected = [
          { key: "k-1", values: [{ id: 1, type: 1 }] },
          { key: "k-2", values: [{ id: 2, type: 2 }, { id: 3, type: 2 }] },
        ];

        expect(result).toEqual(expected);
      });
    });
  });
});
