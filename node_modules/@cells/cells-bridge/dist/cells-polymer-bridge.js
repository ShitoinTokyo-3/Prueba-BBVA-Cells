(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["cells"] = factory();
	else
		root["cells"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/cells-semaas-adapter/dist/cells-semaas-adapter.js":
/*!************************************************************************!*\
  !*** ./node_modules/cells-semaas-adapter/dist/cells-semaas-adapter.js ***!
  \************************************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (global, factory) {
   true ? module.exports = factory() :
  undefined;
}(this, (function () { 'use strict';

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var asyncToGenerator = function (fn) {
    return function () {
      var gen = fn.apply(this, arguments);
      return new Promise(function (resolve, reject) {
        function step(key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            return Promise.resolve(value).then(function (value) {
              step("next", value);
            }, function (err) {
              step("throw", err);
            });
          }
        }

        return step("next");
      });
    };
  };

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    } else {
      return Array.from(arr);
    }
  };

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  !function (global) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = ( false ? undefined : _typeof(module)) === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    runtime.awrap = function (arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && hasOwn.call(value, "__await")) {
            return Promise.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    runtime.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          if (delegate.iterator.return) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[toStringTagSymbol] = "Generator";

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function stop() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined;
        }

        return ContinueSentinel;
      }
    };
  }(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  function () {
    return this;
  }() || Function("return this")());

  var SEMAAS_REQUIRED_FIELDS = ['consumerId', 'policy', 'mrId', 'nameSpace', 'region', 'dnsTld', 'tsec2JWTEndpoint', 'tsecStorageKey'];

  var SEMAAS = {
    DEFAULT_ADAPTER_IDENTIFIER: 'application',
    DEFAULT_ADAPTER_VERSION: 'v1',
    REQUIRED_FIELDS: SEMAAS_REQUIRED_FIELDS,
    ALLOWED_FIELDS: [].concat(SEMAAS_REQUIRED_FIELDS, ['identifier', 'version', 'logLevel'])
  };

  var buildServiceUri = function buildServiceUri(codename) {
    return function (region, dnsTld, version) {
      return 'https://' + codename + '.' + [region, dnsTld].filter(Boolean).join('.') + '/' + version;
    };
  };

  var RHO = {
    HOST: buildServiceUri('rho'),
    ALLOWED_FIELDS: ['mrId', 'spanId', 'startDate', 'finishDate', 'name', 'parentSpan', 'traceId', 'properties', 'duration', 'recordDate'],
    REQUIRED_FIELDS: []
  };

  var DEFAULT_LOG_LEVEL = 'debug';

  var OMEGA = {
    HOST: buildServiceUri('omega'),
    DEFAULT_LOG_LEVEL: DEFAULT_LOG_LEVEL,
    ALLOWED_FIELDS: ['mrId', 'spanId', 'traceId', 'creationDate', 'level', 'message', 'properties'],
    MAXIMUM_BULK_SIZE: 1000,
    REQUIRED_FIELDS: [],
    LOG_LEVELS: [DEFAULT_LOG_LEVEL, 'info', 'warn', 'warning', 'error', 'fatal']
  };

  // const TSEC2JWT = {
  //   HOST: environment => `https://tsec2jwt.smlb.${environment}.meigas.cloud/v1/Token`,
  // };

  var Constants = {
    SEMAAS: SEMAAS,
    RHO: RHO,
    OMEGA: OMEGA
    // TSEC2JWT,
  };

  // credits to GeenenTijd/dotify
  // https://github.com/GeenenTijd/dotify/blob/master/dotify.js
  var dotify = function dotify(obj) {
    var SEPARATOR_KEY = '_';
    var res = {};
    var recurse = function recurse(obj, current) {
      Object.keys(obj).forEach(function (key) {
        var value = obj[key];
        var newKey = current ? current + SEPARATOR_KEY + key : key; // joined key with dot
        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
          recurse(value, newKey); // it's a nested object, so do it again
        } else {
          res[newKey] = value; // it's not an object, so set the property
        }
      });
    };

    recurse(obj);
    return res;
  };
  var sanitizeObj = function sanitizeObj(obj, allowedFields) {
    var result = _extends({}, obj);

    Object.keys(result).forEach(function (prop) {
      if (!allowedFields.includes(prop)) {
        delete result[prop];
      }
    });

    if (result.properties) {
      result.properties = dotify(result.properties);
    }

    return result;
  };
  var hasProperty = function hasProperty(obj) {
    return function (field) {
      return Object.prototype.hasOwnProperty.call(obj, field) && !!obj[field];
    };
  };
  var hasProperties = function hasProperties(obj, expectedFields) {
    return expectedFields.every(hasProperty(obj));
  };
  var groupBy = function groupBy(items, value) {
    return items.reduce(function (prev, current) {
      var key = value instanceof Function ? value(current) : current[value];
      var itemsContainingKey = prev.find(function (r) {
        return r && r.key === key;
      });

      if (itemsContainingKey) {
        itemsContainingKey.values.push(current);
      } else {
        prev.push({ key: key, values: [current] });
      }

      return prev;
    }, []);
  };
  var createUUID = function createUUID() {
    var s = [];
    var hexDigits = '0123456789abcdef';
    for (var i = 0; i < 36; i++) {
      s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010
    s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
    s[8] = s[13] = s[18] = s[23] = '-';

    var uuid = s.join('');
    return uuid;
  };

  var Utils = {
    dotify: dotify,
    sanitizeObj: sanitizeObj,
    hasProperty: hasProperty,
    hasProperties: hasProperties,
    groupBy: groupBy,
    createUUID: createUUID
  };

  var OMEGA$1 = Constants.OMEGA;
  var DEFAULT_LOG_LEVEL$1 = OMEGA$1.DEFAULT_LOG_LEVEL,
      ALLOWED_FIELDS = OMEGA$1.ALLOWED_FIELDS;
  var sanitizeObj$1 = Utils.sanitizeObj;

  var Omega = function () {
    function Omega(mrId) {
      classCallCheck(this, Omega);

      this.mrId = mrId;
    }

    // @TODO renombrar a normalizeLog? buildLog?
    /* static */


    createClass(Omega, [{
      key: 'createLog',
      value: function createLog(obj) {
        var mrId = this.mrId;

        var sanitizedData = sanitizeObj$1(obj, ALLOWED_FIELDS);
        var DEFAULT_LOG = {
          mrId: mrId,
          creationDate: Date.now() * 1000000,
          level: DEFAULT_LOG_LEVEL$1
        };

        return _extends({}, DEFAULT_LOG, sanitizedData);
      }
    }]);
    return Omega;
  }();

  var RHO$1 = Constants.RHO;
  var ALLOWED_FIELDS$1 = RHO$1.ALLOWED_FIELDS;
  var sanitizeObj$2 = Utils.sanitizeObj,
      _createUUID = Utils.createUUID;

  var Span = function () {
    function Span(config) {
      classCallCheck(this, Span);

      this.spanId = null;
      this.initialize(config);
    }

    createClass(Span, [{
      key: 'initialize',
      value: function initialize(config) {
        var _this = this;

        ALLOWED_FIELDS$1.forEach(function (field) {
          if (config[field]) {
            _this[field] = config[field];
          }
        });

        this.spanId = _createUUID();
        this.start();
      }
    }, {
      key: 'start',
      value: function start() {
        this.startDate = Date.now() * 1000000;
      }
    }, {
      key: 'finish',
      value: function finish() {
        this.finishDate = Date.now() * 1000000;
      }
    }]);
    return Span;
  }();

  var Rho = function () {
    function Rho(mrId) {
      classCallCheck(this, Rho);

      this.mrId = mrId;
    }

    createClass(Rho, [{
      key: 'createUUID',
      value: function createUUID() {
        return _createUUID();
      }
    }, {
      key: 'createSpan',
      value: function createSpan(rawData, childSpanPrefix) {
        var DEFAULT_MR_ID = this.mrId;
        var _rawData$mrId = rawData.mrId,
            mrId = _rawData$mrId === undefined ? DEFAULT_MR_ID : _rawData$mrId,
            parentSpan = rawData.parentSpan;

        var normalizedParentSpan = this.getParentSpan(parentSpan, mrId, childSpanPrefix);
        var data = _extends({}, rawData, {
          mrId: mrId,
          parentSpan: normalizedParentSpan
        });
        var span = new Span(data);

        return span;
      }
    }, {
      key: 'buildSpans',
      value: function buildSpans(data) {
        var iterableData = Array.isArray(data) ? [].concat(toConsumableArray(data)) : [data];

        return iterableData.map(function (item) {
          return sanitizeObj$2(item, ALLOWED_FIELDS$1);
        });
      }
    }, {
      key: 'getParentSpan',
      value: function getParentSpan(parentSpan, mrId, childSpanPrefix) {
        if (!parentSpan) {
          return null;
        }

        return [childSpanPrefix, mrId, 'spans', parentSpan].join('/');
      }
    }]);
    return Rho;
  }();

  var Adapters = {
    Omega: Omega,
    Rho: Rho
  };

  function request(method) {
    var _this = this;

    return function () {
      var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options) {
        var url, body, headers, configuration, response, result;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = options.url, body = options.body, headers = options.headers;
                configuration = {
                  method: method,
                  body: JSON.stringify(body),
                  headers: {
                    'content-type': 'application/json'
                  }
                };


                if (headers) {
                  Object.keys(headers).forEach(function (header) {
                    var headerValue = headers[header];

                    configuration.headers[header] = headerValue;
                  });
                }

                // OJO!!!
                // Interceptar aquí errores
                _context.next = 5;
                return fetch(url, configuration);

              case 5:
                response = _context.sent;
                result = {};
                _context.prev = 7;
                _context.next = 10;
                return response.json();

              case 10:
                result = _context.sent;
                _context.next = 15;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context['catch'](7);

              case 15:
                if (!(!response.ok && result && result.status !== 400)) {
                  _context.next = 17;
                  break;
                }

                return _context.abrupt('return', null);

              case 17:
                return _context.abrupt('return', result);

              case 18:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this, [[7, 13]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  }

  var METHODS = {
    GET: request('get'),
    POST: request('post')
  };

  var Connector = function () {
    function Connector() {
      classCallCheck(this, Connector);
    }

    createClass(Connector, null, [{
      key: 'get',
      value: function () {
        var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url, headers) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt('return', METHODS.GET({ url: url, headers: headers }));

                case 1:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function get$$1(_x2, _x3) {
          return _ref2.apply(this, arguments);
        }

        return get$$1;
      }()
    }, {
      key: 'post',
      value: function () {
        var _ref3 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(url, body, headers) {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt('return', METHODS.POST({ url: url, body: body, headers: headers }));

                case 1:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function post(_x4, _x5, _x6) {
          return _ref3.apply(this, arguments);
        }

        return post;
      }()
    }]);
    return Connector;
  }();

  /** Default debounce duration (in ms) */
  var DEFAULT_DEBOUNCE_DURATION = 500;

  /** Decorates a class method so that it is debounced by the specified duration */
  function outerDecorator(duration) {
    return function innerDecorator(target, key, descriptor) {
      return {
        configurable: true,
        enumerable: descriptor.enumerable,
        get: function getter() {
          // Attach this function to the instance (not the class)
          Object.defineProperty(this, key, {
            configurable: true,
            enumerable: descriptor.enumerable,
            value: debounce(descriptor.value, duration)
          });

          return this[key];
        }
      };
    };
  }

  /** Debounces the specified function and returns a wrapper function */
  function debounce(method) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_DEBOUNCE_DURATION;

    var timeoutId = void 0;

    function debounceWrapper() {
      var _this = this;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      debounceWrapper.clear();

      timeoutId = setTimeout(function () {
        timeoutId = null;
        method.apply(_this, args);
      }, duration);
    }

    debounceWrapper.clear = function () {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }
    };

    return debounceWrapper;
  }

  var decorate = function decorate(decorators) {
    return function (obj, prop, descriptor) {
      var fn = descriptor.value;

      decorators.slice().reverse().forEach(function (decorator) {
        return fn = decorator(fn);
      });

      return _extends({}, descriptor, {
        value: fn
      });
    };
  };

  var Decorators = {
    outerDecorator: outerDecorator,
    decorate: decorate
  };

  var groupBy$1 = Utils.groupBy;


  var MAXIMUM_BULK_SIZE = 1000;

  var Queue = function () {
    // maximumBulkSize = null;

    function Queue(identifier) {
      classCallCheck(this, Queue);

      this.items = [];
      this.identifier = identifier;
    }

    createClass(Queue, [{
      key: 'add',
      value: function add(endpoint, data) {
        var _this = this;

        var iterableData = Array.isArray(data) ? [].concat(toConsumableArray(data)) : [data];

        iterableData.forEach(function (item) {
          var operation = {
            data: item,
            endpoint: endpoint
          };

          _this.items.push(operation);
        });
      }
    }, {
      key: 'dump',
      value: function dump() /* maximumBulkSize */{
        if (!this.any()) {
          return null;
        }

        var queueGroupedByEndpoint = groupBy$1(this.items, 'endpoint');
        var firstQueueGroup = queueGroupedByEndpoint[0].values;

        var bulk = firstQueueGroup.slice(0, MAXIMUM_BULK_SIZE);
        var newQueue = this.items.filter(function (item) {
          return !bulk.includes(item);
        });

        console.log('Dumping ' + bulk.length + ' items from ' + this.identifier + ' queue (' + this.items.length + ')...');

        this.items = newQueue;

        return bulk;
      }
    }, {
      key: 'any',
      value: function any() {
        return this.items !== null && this.items.length > 0;
      }
    }]);
    return Queue;
  }();

  var _dec, _class;

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var Omega$1 = Adapters.Omega,
      Rho$1 = Adapters.Rho;
  var _Constants$SEMAAS = Constants.SEMAAS,
      REQUIRED_FIELDS = _Constants$SEMAAS.REQUIRED_FIELDS,
      ALLOWED_FIELDS$2 = _Constants$SEMAAS.ALLOWED_FIELDS,
      DEFAULT_ADAPTER_IDENTIFIER = _Constants$SEMAAS.DEFAULT_ADAPTER_IDENTIFIER,
      DEFAULT_ADAPTER_VERSION = _Constants$SEMAAS.DEFAULT_ADAPTER_VERSION,
      _Constants$OMEGA = Constants.OMEGA,
      OMEGA_HOST = _Constants$OMEGA.HOST,
      DEFAULT_LOG_LEVEL$2 = _Constants$OMEGA.DEFAULT_LOG_LEVEL,
      LOG_LEVELS = _Constants$OMEGA.LOG_LEVELS,
      RHO_HOST = Constants.RHO.HOST;
  var hasProperties$1 = Utils.hasProperties;
  var outerDecorator$1 = Decorators.outerDecorator;
  var SEMaaS = (_dec = outerDecorator$1(5000), (_class = function () {
    function SEMaaS(config) {
      classCallCheck(this, SEMaaS);

      // configurable properties by constructor
      this.nameSpace = null;

      this.identifier = DEFAULT_ADAPTER_IDENTIFIER;

      this.mrId = null;

      this.consumerId = null;

      this.policy = null;

      this.region = null;

      this.dnsTld = null;

      this.version = DEFAULT_ADAPTER_VERSION;

      this.tsec2JWTEndpoint = null;

      this.logLevel = DEFAULT_LOG_LEVEL$2;

      // properties that belong to semaas life cycle and rely on configurable properties
      this.apiKey = null;

      // composition entitys
      this.omega = null;

      this.rho = null;

      this.queue = null;

      this.tsecStorageKey = 'tsec'; // sessionStorage key for recovery the tsec id
      this.setup(config);
    }

    createClass(SEMaaS, [{
      key: 'setup',
      value: function setup(config) {
        if (!config || !this.validateConfig(config, REQUIRED_FIELDS)) {
          throw new Error('Invalid setup for SEMaaS adapter (' + this.identifier + '). Required fields: ' + REQUIRED_FIELDS.join(', ') + '.');
        }

        this.initialize(config);
      }
    }, {
      key: 'validateConfig',
      value: function validateConfig(config, expectedFields) {
        return hasProperties$1(config, expectedFields);
      }
    }, {
      key: 'initialize',
      value: function initialize(config) {
        var _this = this;

        ALLOWED_FIELDS$2.forEach(function (field) {
          if (config[field]) {
            _this[field] = config[field];
          }
        });

        var nameSpace = this.nameSpace,
            identifier = this.identifier,
            mrId = this.mrId,
            tsec2JWTEndpoint = this.tsec2JWTEndpoint,
            region = this.region,
            dnsTld = this.dnsTld,
            version = this.version,
            logLevel = this.logLevel,
            tsecStorageKey = this.tsecStorageKey;


        this.omega = new Omega$1(mrId);
        this.rho = new Rho$1(mrId);
        this.queue = new Queue(identifier);

        console.info('SEMaaS adapter for ' + region + ' (TSEC: ' + tsec2JWTEndpoint + ') [' + dnsTld + ' - ' + version + '] (' + identifier + ' - ns: ' + nameSpace + ', mrId: ' + mrId + ') [logLevel: ' + logLevel + '] [tsecStorageKey: ' + tsecStorageKey + '] successfully initialized.');
      }
    }, {
      key: 'log',
      value: function log(obj) {
        var data = this.omega.createLog(obj);

        if (this.shouldIncludeLog(data.level, this.logLevel)) {
          this.enqueue(this.omegaEndpoint, data);
        }
      }
    }, {
      key: 'ingest',
      value: function ingest(spans) {
        var data = this.rho.buildSpans(spans);

        this.enqueue(this.rhoEndpoint, data);
      }
    }, {
      key: 'createSpan',
      value: function createSpan(data) {
        var span = this.rho.createSpan(data, this.prefixForChildSpan);

        return span;
      }
    }, {
      key: 'createUUID',
      value: function createUUID() {
        var UUID = this.rho.createUUID();

        return UUID;
      }
    }, {
      key: 'send',
      value: function () {
        var _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, body, headers) {
          var result;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  result = void 0;
                  _context.prev = 1;
                  _context.next = 4;
                  return Connector.post(url, body, headers);

                case 4:
                  result = _context.sent;
                  _context.next = 9;
                  break;

                case 7:
                  _context.prev = 7;
                  _context.t0 = _context['catch'](1);

                case 9:
                  if (result) {
                    _context.next = 14;
                    break;
                  }

                  console.log('There was a problem while sending data to SEMaaS - operation will be queued.');
                  this.enqueue(url, body);
                  _context.next = 16;
                  break;

                case 14:
                  if (!(result.status === 400)) {
                    _context.next = 16;
                    break;
                  }

                  throw new Error(result.message);

                case 16:
                  return _context.abrupt('return', result);

                case 17:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this, [[1, 7]]);
        }));

        function send(_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        }

        return send;
      }()
    }, {
      key: 'enqueue',
      value: function enqueue(url, body) {
        this.queue.add(url, body);
        this.flush();
      }

      // @decorate([tsec2jwt, outerDecorator(5000)])

    }, {
      key: 'flush',
      value: function () {
        var _ref2 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _this2 = this;

          var requestData, endpoint, body, headers;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.getRequestData();

                case 2:
                  requestData = _context2.sent;

                  if (requestData) {
                    _context2.next = 5;
                    break;
                  }

                  return _context2.abrupt('return');

                case 5:
                  endpoint = requestData.endpoint, body = requestData.body, headers = requestData.headers;

                  // if bulk send is OK, and there are more items, we try to flush the buffer

                  this.send(endpoint, body, headers).then(function () {
                    return _this2.queue.any() && _this2.flush();
                  }).catch(function (error) {
                    console.error('There was a problem while sending data to SEMaaS - ' + error.message);
                  });

                case 7:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function flush() {
          return _ref2.apply(this, arguments);
        }

        return flush;
      }()
    }, {
      key: 'flushAll',
      value: function () {
        var _ref3 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var requestData, endpoint, body, headers;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.getRequestData();

                case 2:
                  requestData = _context3.sent;

                  if (requestData) {
                    _context3.next = 5;
                    break;
                  }

                  return _context3.abrupt('return', Promise.resolve());

                case 5:
                  endpoint = requestData.endpoint, body = requestData.body, headers = requestData.headers;
                  return _context3.abrupt('return', this.send(endpoint, body, headers).catch(function (error) {
                    console.error('There was a problem while sending data to SEMaaS - ' + error.message);
                  }));

                case 7:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function flushAll() {
          return _ref3.apply(this, arguments);
        }

        return flushAll;
      }()
    }, {
      key: 'getRequestData',
      value: function () {
        var _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
          var validApiKey, bulk, endpoint, apiKey, body, headers;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.ensureValidApiKey();

                case 2:
                  validApiKey = _context4.sent;

                  if (validApiKey) {
                    _context4.next = 6;
                    break;
                  }

                  console.log('No valid API Key for SEMaaS adapter (' + this.identifier + ') - aborting operation');
                  return _context4.abrupt('return');

                case 6:
                  bulk = this.queue.dump();

                  if (bulk) {
                    _context4.next = 10;
                    break;
                  }

                  console.log('Empty queue for SEMaaS adapter (' + this.identifier + ')');
                  return _context4.abrupt('return');

                case 10:
                  endpoint = bulk[0].endpoint;
                  apiKey = this.apiKey;


                  console.log('Sending queued batch ' + endpoint + ' - ' + apiKey);

                  body = bulk.map(function (operation) {
                    return operation.data;
                  });
                  headers = this.buildApiHeaders();
                  return _context4.abrupt('return', {
                    endpoint: endpoint,
                    body: body,
                    headers: headers
                  });

                case 16:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function getRequestData() {
          return _ref4.apply(this, arguments);
        }

        return getRequestData;
      }()
    }, {
      key: 'ensureValidApiKey',
      value: function () {
        var _ref5 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!this.hasApiKey) {
                    _context5.next = 3;
                    break;
                  }

                  console.log('ApiKey OK -> next()');
                  return _context5.abrupt('return', true);

                case 3:
                  if (!this.hasCredentials) {
                    _context5.next = 6;
                    break;
                  }

                  console.log('ApiKey KO, Credentials OK -> getApiKey()');
                  return _context5.abrupt('return', this.getApiKey());

                case 6:

                  console.log('No ApiKey && No Credentials -> KO');
                  return _context5.abrupt('return', false);

                case 8:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function ensureValidApiKey() {
          return _ref5.apply(this, arguments);
        }

        return ensureValidApiKey;
      }()
    }, {
      key: 'buildApiHeaders',
      value: function buildApiHeaders() {
        var key = void 0;
        var value = void 0;

        switch (this.version.toLowerCase()) {
          case 'v1':
            key = 'Authorization';
            value = 'Bearer ' + this.apiKey;
            break;
          default:
            key = 'Api-Key';
            value = 'jwt ' + this.apiKey;
            break;
        }

        return defineProperty({}, key, value);
      }
    }, {
      key: 'getApiKey',
      value: function () {
        var _ref7 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
          var consumerId, policy, tsec2JWTEndpoint, headers, host, result, accessToken;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  consumerId = this.consumerId, policy = this.policy, tsec2JWTEndpoint = this.tsec2JWTEndpoint;
                  headers = {
                    'x-consumer-id': consumerId,
                    'x-tsec-token': window.sessionStorage.getItem('tsec'),
                    'x-validation-policy': policy
                  };
                  host = tsec2JWTEndpoint;
                  _context6.next = 5;
                  return Connector.get(host, headers);

                case 5:
                  result = _context6.sent;

                  if (result) {
                    _context6.next = 8;
                    break;
                  }

                  return _context6.abrupt('return', null);

                case 8:
                  accessToken = result.accessToken;


                  this.apiKey = accessToken;
                  return _context6.abrupt('return', accessToken);

                case 11:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function getApiKey() {
          return _ref7.apply(this, arguments);
        }

        return getApiKey;
      }()
    }, {
      key: 'getEndpoint',
      value: function getEndpoint(host) {
        var region = this.region,
            dnsTld = this.dnsTld,
            version = this.version;


        return host(region, dnsTld, version);
      }
    }, {
      key: 'shouldIncludeLog',
      value: function shouldIncludeLog(logLevel) {
        var applicationLogLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LOG_LEVEL$2;

        var getLogLevel = function getLogLevel(target) {
          return LOG_LEVELS.indexOf(target.toLowerCase());
        };
        var targetLogLevel = getLogLevel(logLevel);
        var minimumLogLevel = getLogLevel(applicationLogLevel);

        return targetLogLevel >= minimumLogLevel;
      }
    }, {
      key: 'hasApiKey',
      get: function get$$1() {
        // @TODO añadir lógica recuperación + persistencia sessionStorage jwt
        return !!this.apiKey;
      }
    }, {
      key: 'hasCredentials',
      get: function get$$1() {
        return !!this.consumerId && !!this.policy && !!this.tsec;
      }
    }, {
      key: 'initialized',
      get: function get$$1() {
        return !!this.omega && !!this.rho;
      }
    }, {
      key: 'omegaEndpoint',
      get: function get$$1() {
        var nameSpace = this.nameSpace;

        var host = this.getEndpoint(OMEGA_HOST);

        return host + '/ns/' + nameSpace + '/logs';
      }
    }, {
      key: 'rhoEndpoint',
      get: function get$$1() {
        var nameSpace = this.nameSpace;

        var host = this.getEndpoint(RHO_HOST);

        return host + '/ns/' + nameSpace + '/spans';
      }
    }, {
      key: 'prefixForChildSpan',
      get: function get$$1() {
        return 'ns/' + this.nameSpace + '/mrs';
      }
    }, {
      key: 'tsec',
      get: function get$$1() {
        return window.sessionStorage.getItem(this.tsecStorageKey);
      }
    }]);
    return SEMaaS;
  }(), (_applyDecoratedDescriptor(_class.prototype, 'flush', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'flush'), _class.prototype)), _class));

  return SEMaaS;

})));
//# sourceMappingURL=cells-semaas-adapter.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/es5-dot-prop/index.js":
/*!********************************************!*\
  !*** ./node_modules/es5-dot-prop/index.js ***!
  \********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isObj = __webpack_require__(/*! is-obj */ "./node_modules/is-obj/index.js");

function getPathSegments(path) {
  var pathArr = path.split('.');
  var parts = [];

  for (var i = 0; i < pathArr.length; i++) {
    var p = pathArr[i];

    while (p[p.length - 1] === '\\' && pathArr[i + 1] !== undefined) {
      p = p.slice(0, -1) + '.';
      p += pathArr[++i];
    }

    parts.push(p);
  }

  return parts;
}

module.exports = {
  get: function (obj, path, value) {
    if (!isObj(obj) || typeof path !== 'string') {
      return value === undefined ? obj : value;
    }

    var pathArr = getPathSegments(path);

    for (var i = 0; i < pathArr.length; i++) {
      if (!Object.prototype.propertyIsEnumerable.call(obj, pathArr[i])) {
        return value;
      }

      obj = obj[pathArr[i]];

      if (obj === undefined || obj === null) {
        // `obj` is either `undefined` or `null` so we want to stop the loop, and
        // if this is not the last bit of the path, and
        // if it did't return `undefined`
        // it would return `null` if `obj` is `null`
        // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`
        if (i !== pathArr.length - 1) {
          return value;
        }

        break;
      }
    }

    return obj;
  },
  set: function (obj, path, value) {
    if (!isObj(obj) || typeof path !== 'string') {
      return;
    }

    var pathArr = getPathSegments(path);

    for (var i = 0; i < pathArr.length; i++) {
      var p = pathArr[i];

      if (!isObj(obj[p])) {
        obj[p] = {};
      }

      if (i === pathArr.length - 1) {
        obj[p] = value;
      }

      obj = obj[p];
    }
  },
  delete: function (obj, path) {
    if (!isObj(obj) || typeof path !== 'string') {
      return;
    }

    var pathArr = getPathSegments(path);

    for (var i = 0; i < pathArr.length; i++) {
      var p = pathArr[i];

      if (i === pathArr.length - 1) {
        delete obj[p];
        return;
      }

      obj = obj[p];

      if (!isObj(obj)) {
        return;
      }
    }
  },
  has: function (obj, path) {
    if (!isObj(obj) || typeof path !== 'string') {
      return false;
    }

    var pathArr = getPathSegments(path);

    for (var i = 0; i < pathArr.length; i++) {
      if (isObj(obj)) {
        if (!(pathArr[i] in obj)) {
          return false;
        }

        obj = obj[pathArr[i]];
      } else {
        return false;
      }
    }

    return true;
  }
};

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/is-obj/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-obj/index.js ***!
  \**************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (x) {
	var type = typeof x;
	return x !== null && (type === 'object' || type === 'function');
};


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/index.js":
/*!************************************!*\
  !*** ./src/index.js + 235 modules ***!
  \************************************/
/*! no exports provided */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/es5-dot-prop/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/cells-semaas-adapter/dist/cells-semaas-adapter.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/events/events.js (<- Module is not an ECMAScript module) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/polyfills.js
var polyfills = __webpack_require__("./src/polyfills.js");

// EXTERNAL MODULE: ./node_modules/events/events.js
var events = __webpack_require__("./node_modules/events/events.js");
var events_default = /*#__PURE__*/__webpack_require__.n(events);

// CONCATENATED MODULE: ./src/core/manager/events.js
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var maxNumListeners = 20;

var CustomEventEmitter = /*#__PURE__*/function (_EventEmitter) {
  _inherits(CustomEventEmitter, _EventEmitter);

  var _super = _createSuper(CustomEventEmitter);

  function CustomEventEmitter() {
    _classCallCheck(this, CustomEventEmitter);

    return _super.apply(this, arguments);
  }

  _createClass(CustomEventEmitter, [{
    key: "listenToOnce",
    value:
    /**
     * @param {HTMLElement} node
     * @param {string} name
     * @param {Function} callback
     */
    function listenToOnce(node, name, callback) {
      node.addEventListener(name, function cb(event) {
        callback();
        event.currentTarget.removeEventListener(event.type, cb);
      });
    }
  }]);

  return CustomEventEmitter;
}(events_default.a);

var eventManager = new CustomEventEmitter();
eventManager.setMaxListeners(maxNumListeners);
/* harmony default export */ var manager_events = (eventManager);
// CONCATENATED MODULE: ./src/core/constants.js
// binding
var bindingCodes = {
  ALWAYS: "always",
  DELAYED: "delayed",
  UI: "ui",
  CURRENTVIEW: "currentview"
};
var constants_binding = {
  DEFAULT: bindingCodes.ALWAYS,
  VALUES: Object.values(bindingCodes)
}; // external events

var externalEventsCodes = {
  PAGE_READY: "page-ready",
  PARSE_ROUTE: "parse-route",
  AFTER_PUBLISH: "after-publish",
  NAV_REQUEST: "nav-request",
  BEFORE_SET_ATTR_TO_NODE: "before-set-attr-to-node",
  AFTER_SET_ATTR_TO_NODE: "after-set-attr-to-node",
  BEFORE_CREATE_NODE: "before-create-node",
  AFTER_CREATE_NODE: "after-create-node",
  BEFORE_IMPORT: "before-import",
  AFTER_IMPORT: "after-import",
  PAGE_REQUEST: "page-request",
  PAGE_RESPONSE: "page-response",
  DATA_LOAD: "data-load",
  TEMPLATE_TRANSITION_END: "template-transition-end",
  TRACK_EVENT: "track-event",
  TEMPLATE_REGISTERED: "template-registered",
  ROUTER_BACKSTEP: "router-backstep",
  LOG_EVENT: "log-event"
};
var constants_externalEvents = Object.values(externalEventsCodes); // componentsPath

var componentsPath = "./bower_components/"; // composerEndpoint

var constants_composerEndpoint = "./composerMocks/"; // deployEndpoint

var deployEndpoint = ""; // initialTemplate

var initialTemplate = "login"; // monitoring config
// const mrId = 'web';

var mrId = 'core'; // const nameSpace = 'com.bbva.es.channels';

var nameSpace = 'ether.cells';
var monitoring = {
  SEMAAS: {
    policy: 'ei_bbva_es',
    mrId: mrId,
    nameSpace: nameSpace,
    identifier: 'bridge',
    // consumerId: `${mrId}@${nameSpace}`,
    consumerId: 'core@ether.cells',
    tsecStorageKey: 'tsec'
  }
}; // pagesPath

var pagesPath = "./pages/"; // prpl

var prplCodes = {
  NONE: "none",
  DEFER: "defer",
  PROGRESSIVE: "progressive",
  HERO: "hero"
};
var prpl = {
  DEFAULT: prplCodes.DEFER,
  VALUES: Object.values(prplCodes)
};
var preRenderState = {
  WORKING: 'working',
  REQUESTED: 'requested'
}; // render engines

var renderEngines = {
  LIT_ELEMENT: 'litElement',
  POLYMER: 'polymer'
}; //

var pageTypes = {
  STATIC: 'static',
  DYNAMIC: 'dynamic'
}; // default

/* harmony default export */ var constants = ({
  bindingCodes: bindingCodes,
  binding: constants_binding,
  componentsPath: componentsPath,
  composerEndpoint: constants_composerEndpoint,
  deployEndpoint: deployEndpoint,
  externalEvents: constants_externalEvents,
  externalEventsCodes: externalEventsCodes,
  initialTemplate: initialTemplate,
  monitoring: monitoring,
  pagesPath: pagesPath,
  prplCodes: prplCodes,
  prpl: prpl,
  preRenderState: preRenderState,
  renderEngines: renderEngines,
  pageTypes: pageTypes
});
// CONCATENATED MODULE: ./src/core/utils.js
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Taken from string.js npm package
// https://github.com/jprichardson/string.js
var dasherize = function dasherize(str) {
  return str.trim().replace(/[_\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();
};
var camelize = function camelize(str) {
  return str.trim().replace(/(-|_|\s)+(.)?/g, function (mathc, sep, c) {
    return c ? c.toUpperCase() : '';
  });
};
var isPlainObject = function isPlainObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
};
var findPropertyInArray = function findPropertyInArray(prop) {
  return function (arr) {
    return arr.map(findProperty(prop)).flat();
  };
};
var findPropertyInObject = function findPropertyInObject(prop) {
  return function (collection) {
    return Object.entries(collection).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];

      return k === prop ? [v] : findProperty(prop)(v);
    }).flat();
  };
};
var findProperty = function findProperty(prop) {
  return function (v) {
    return isPlainObject(v) ? findPropertyInObject(prop)(v) : Array.isArray(v) ? findPropertyInArray(prop)(v) : [];
  };
};
var attributeWhiteList = ['ambient', 'variant', 'disabled'];
var setAttribute = function setAttribute(node, attr, value) {
  if (typeof value === 'boolean') {
    if (value) {
      node.setAttribute(attr, '');
    } else {
      node.removeAttribute(attr);
    }
  } else {
    node.setAttribute(attr, value);
  }
};
/* harmony default export */ var utils = ({
  dasherize: dasherize,
  camelize: camelize,
  findProperty: findProperty,
  attributeWhiteList: attributeWhiteList,
  setAttribute: setAttribute
});
// CONCATENATED MODULE: ./src/core/manager/dom.js
function dom_typeof(obj) { "@babel/helpers - typeof"; return dom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, dom_typeof(obj); }

function dom_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function dom_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function dom_createClass(Constructor, protoProps, staticProps) { if (protoProps) dom_defineProperties(Constructor.prototype, protoProps); if (staticProps) dom_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





var dom_externalEventsCodes = constants.externalEventsCodes;

var dom_CellsManagerDom = /*#__PURE__*/function () {
  function CellsManagerDom() {
    dom_classCallCheck(this, CellsManagerDom);
  }

  dom_createClass(CellsManagerDom, [{
    key: "createComponents",
    value: function createComponents(spec) {
      var _this = this;

      /* istanbul ignore if */
      if (!spec) {
        return;
      }

      return spec.map(function (element) {
        var newElement = _this.createElement(element.tagName);

        newElement.__zone = element.zone;
        return newElement;
      });
    }
  }, {
    key: "setProps",
    value: function setProps(node, props, render) {
      var BEFORE_SET_ATTR_TO_NODE = dom_externalEventsCodes.BEFORE_SET_ATTR_TO_NODE,
          AFTER_SET_ATTR_TO_NODE = dom_externalEventsCodes.AFTER_SET_ATTR_TO_NODE;

      if (props && dom_typeof(props) === 'object') {
        manager_events.emit(BEFORE_SET_ATTR_TO_NODE, node.tagName);
        Object.keys(props).forEach(function (key) {
          if (render === renderEngines.LIT_ELEMENT && attributeWhiteList.includes(key)) {
            setAttribute(node, key, props[key]);
          } else {
            node[key] = props[key];
          }
        });
        manager_events.emit(AFTER_SET_ATTR_TO_NODE, node);
      }
    }
  }, {
    key: "setAttrs",
    value: function setAttrs(node, attrs) {
      if (attrs && dom_typeof(attrs) === 'object') {
        Object.keys(attrs).forEach(function (key) {
          setAttribute(node, key, attrs[key]);
        });
      }
    }
  }, {
    key: "createElement",
    value: function createElement(tagName, properties, render) {
      var BEFORE_CREATE_NODE = dom_externalEventsCodes.BEFORE_CREATE_NODE,
          AFTER_CREATE_NODE = dom_externalEventsCodes.AFTER_CREATE_NODE;
      manager_events.emit(BEFORE_CREATE_NODE, tagName);
      var node = document.createElement(tagName);
      manager_events.emit(AFTER_CREATE_NODE, node);
      /* istanbul ignore else */

      if (properties) {
        this.setProps(node, properties, render);
      }

      return node;
    }
  }]);

  return CellsManagerDom;
}();

/* harmony default export */ var dom = (dom_CellsManagerDom);
// CONCATENATED MODULE: ./src/core/manager/storage.js
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function storage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function storage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function storage_createClass(Constructor, protoProps, staticProps) { if (protoProps) storage_defineProperties(Constructor.prototype, protoProps); if (staticProps) storage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var InMemmoryStorage = /*#__PURE__*/function () {
  function InMemmoryStorage() {
    storage_classCallCheck(this, InMemmoryStorage);

    this.dictionary = {};
  }

  storage_createClass(InMemmoryStorage, [{
    key: "getItem",
    value: function getItem(key) {
      return this.dictionary[key] || null;
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      this.dictionary[key] = value;
    }
  }]);

  return InMemmoryStorage;
}();

var CellsStorage = /*#__PURE__*/function () {
  function CellsStorage(options) {
    storage_classCallCheck(this, CellsStorage);

    this.prefix = '';
    this.persistent = false;
    this.internalStorage = new InMemmoryStorage();

    _extends(this, options);

    if (this.persistent) {
      this.clear();
    }
  }

  storage_createClass(CellsStorage, [{
    key: "storage",
    get: function get() {
      var store;

      try {
        store = this.persistent ? window.localStorage : window.sessionStorage;
        store.setItem('_$_', {});
      } catch (error) {
        store = this.internalStorage;
      }

      return store;
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      return JSON.parse(this.storage.getItem(this.prefix + key));
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      this.storage.setItem(this.prefix + key, JSON.stringify(value, '', true));
    }
  }, {
    key: "clear",
    value: function clear() {
      var pattern = new RegExp('^(' + this.prefix + ')');

      for (var key in this.storage) {
        if (this.storage.hasOwnProperty(key)) {
          if (pattern.test(key)) {
            this.storage.removeItem(key);
          }
        }
      }
    }
  }]);

  return CellsStorage;
}();


// CONCATENATED MODULE: ./src/core/connector.js
function connector_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function connector_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function connector_createClass(Constructor, protoProps, staticProps) { if (protoProps) connector_defineProperties(Constructor.prototype, protoProps); if (staticProps) connector_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var CellsBridgeConnector = /*#__PURE__*/function () {
  function CellsBridgeConnector() {
    connector_classCallCheck(this, CellsBridgeConnector);
  }

  connector_createClass(CellsBridgeConnector, [{
    key: "_get",
    value: function _get(options, format) {
      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();

        if (!options || !options.url) {
          reject(new Error('URL not defined'));
          return;
        }

        var method = (options.method || '').toUpperCase() || 'GET';
        xhr.addEventListener('load', function (e) {
          var xhr = e.target;
          var status = xhr.status;

          if (status >= 200 && status < 300 || status == 0 && xhr.responseText.length > 0) {
            if (format === 'json') {
              resolve(JSON.parse(xhr.response));
            } else {
              resolve(xhr.responseText);
            }
          } else {
            reject(new Error(xhr.statusText));
          }
        });
        xhr.addEventListener('error', function () {
          reject(new Error('Network Error'));
        });
        xhr.open(method, options.url); //

        var headers = options.headers;

        for (var header in headers) {
          if (headers.hasOwnProperty(header)) {
            xhr.setRequestHeader(header, headers[header]);
          }
        }

        xhr.send(options.body);
      });
    }
  }, {
    key: "getJSON",
    value: function getJSON(options) {
      return this._get(options, 'json');
    }
  }, {
    key: "getHTML",
    value: function getHTML(options) {
      return this._get(options, 'html');
    }
  }]);

  return CellsBridgeConnector;
}();


// CONCATENATED MODULE: ./src/core/sanitizer.js
function sanitizer_extends() { sanitizer_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return sanitizer_extends.apply(this, arguments); }

function sanitizer_slicedToArray(arr, i) { return sanitizer_arrayWithHoles(arr) || sanitizer_iterableToArrayLimit(arr, i) || sanitizer_unsupportedIterableToArray(arr, i) || sanitizer_nonIterableRest(); }

function sanitizer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function sanitizer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return sanitizer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return sanitizer_arrayLikeToArray(o, minLen); }

function sanitizer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sanitizer_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function sanitizer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function sanitizer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function sanitizer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function sanitizer_createClass(Constructor, protoProps, staticProps) { if (protoProps) sanitizer_defineProperties(Constructor.prototype, protoProps); if (staticProps) sanitizer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
 * Get path for component retrieval based on component definition properties.
 *
 * @param  {Object} componentDefinition Raw component definition.
 * @return {String}                     Path for component retrieval.
 */

var getPathFromComponent = function getPathFromComponent(componentDefinition) {
  var familyPath = componentDefinition.familyPath,
      tag = componentDefinition.tag,
      tagName = componentDefinition.tagName;

  var _tag = tag || tagName;

  var firstPath = familyPath || _tag;
  return "".concat(firstPath, "/").concat(_tag, ".html");
};

var sanitizer_CellsBridgeComposerSanitizer = /*#__PURE__*/function () {
  function CellsBridgeComposerSanitizer() {
    sanitizer_classCallCheck(this, CellsBridgeComposerSanitizer);
  }

  sanitizer_createClass(CellsBridgeComposerSanitizer, [{
    key: "_buildConfig",
    value: function _buildConfig(component) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UI';
      var componentType = component.type,
          tag = component.tag,
          tagName = component.tagName,
          zone = component.zone,
          fixed = component.fixed,
          container = component.container,
          priority = component.priority,
          properties = component.properties,
          render = component.render,
          featureFlag = component.featureFlag,
          attributes = component.attributes;
      var path = getPathFromComponent(component);
      var configType = componentType ? componentType.toUpperCase() : type;
      var config = {
        type: configType,
        tagName: tag || tagName,
        zone: zone,
        fixed: fixed,
        container: container,
        priority: priority,
        properties: properties || {},
        attributes: attributes || {},
        path: path,
        render: render,
        featureFlag: featureFlag
      };
      return this._parseConnections(config);
    }
  }, {
    key: "parse",
    value: function parse(json) {
      var LTRIM_SLASH = /^\/(\b)/;

      var components = this._parseComponentsFromJson(json, 'components', 'UI');

      var jsonTemplate = json.template;

      if (jsonTemplate) {
        jsonTemplate = this._buildConfig(jsonTemplate, 'TEMPLATE');
      }

      var pages = {};
      var jsonPages = json.pages;
      /* istanbul ignore if */

      if (jsonPages) {
        Object.entries(jsonPages).forEach(function (_ref) {
          var _ref2 = sanitizer_slicedToArray(_ref, 2),
              page = _ref2[0],
              url = _ref2[1].url;

          pages[page] = '/' + url.replace(LTRIM_SLASH, '');
        });
      }

      return {
        page: json.page,
        currentPage: json.currentPage || {},
        template: jsonTemplate,
        components: components,
        pages: pages
      };
    }
  }, {
    key: "_parseComponentsFromJson",
    value: function _parseComponentsFromJson(json, key, type) {
      var _this = this;

      var components = Array.isArray(json[key]) ? json[key] : [];
      return components.map(function (component) {
        return _this._buildConfig(component, type);
      });
    }
    /**
     * Extend given component definition object with parsed component connections.
     *
     * @private
     * @method _parseConnections
     * @param  {Object} rawComponentDefinition  Raw component definition.
     * @return {Object}                         Component definition including connections.
     */

  }, {
    key: "_parseConnections",
    value: function _parseConnections(rawComponentDefinition) {
      var componentDefinition = this._normalizeComponentDefinition(rawComponentDefinition);

      var cellsConnections = componentDefinition.properties.cellsConnections;

      if (!cellsConnections || !Object.keys(cellsConnections).length > 0) {
        return componentDefinition;
      }

      var componentDefinitionWithConnections = sanitizer_extends({}, componentDefinition);

      if (cellsConnections.params) {
        var params = this._parseConnectionsParams(cellsConnections.params);
        /* istanbul ignore if */


        if (!cellsConnections["in"]) {
          cellsConnections["in"] = {};
        }
        /* istanbul ignore if */


        if (!cellsConnections.out) {
          cellsConnections.out = {};
        }

        sanitizer_extends(cellsConnections["in"], params["in"]);

        sanitizer_extends(cellsConnections.out, params.out);
      }

      componentDefinitionWithConnections.connections = cellsConnections;
      return componentDefinitionWithConnections;
    }
    /**
     * Normalizes given raw component definition. Safe-guard method.
     *
     * @private
     * @method _normalizeComponentDefinition
     * @param  {Object} rawComponentDefinition Raw component definition object.
     * @return {Object}                        Normalized component definition object.
     */

  }, {
    key: "_normalizeComponentDefinition",
    value: function _normalizeComponentDefinition(rawComponentDefinition) {
      return sanitizer_extends({
        properties: {
          cellsConnections: {
            "in": {},
            out: {}
          }
        } // default

      }, rawComponentDefinition);
    }
    /**
     * Parse params to appropiate connections.
     *
     * @private
     * @method _parseConnectionsParams
     * @param  {Object} params Params to be parsed.
     * @return {Object}        Parsed connections.
     */

  }, {
    key: "_parseConnectionsParams",
    value: function _parseConnectionsParams(params) {
      var connections = {
        "in": {},
        out: {}
      };

      for (var prop in params) {
        if (params.hasOwnProperty(prop)) {
          var paramDef = params[prop];
          var outBind = dasherize(prop) + '-changed';
          connections["in"][paramDef] = this._createConnection(prop);
          connections.out[paramDef] = this._createConnection(outBind);
        }
      }

      return connections;
    }
    /**
     * Create connection object based on given parameters.
     *
     * @private
     * @method _createConnection
     * @param  {String}  bind          Property to bind to.
     * @param  {Boolean} [global=true] Global flag.
     * @return {Object}                Connection object.
     */

  }, {
    key: "_createConnection",
    value: function _createConnection(bind) {
      var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return {
        bind: bind,
        global: global
      };
    }
  }, {
    key: "split",
    value: function split(data) {
      var response;
      /* istanbul ignore if */

      if (data) {
        response = {
          CC: [],
          UI: [],
          DM: []
        };

        for (var index = 0; index < data.length; index++) {
          var item = data[index];
          response[item.type].push(item);
        }
      }

      return response;
    }
  }]);

  return CellsBridgeComposerSanitizer;
}();


// CONCATENATED MODULE: ./src/core/manager/page.js
function page_typeof(obj) { "@babel/helpers - typeof"; return page_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, page_typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == page_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function page_extends() { page_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return page_extends.apply(this, arguments); }

function page_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function page_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function page_createClass(Constructor, protoProps, staticProps) { if (protoProps) page_defineProperties(Constructor.prototype, protoProps); if (staticProps) page_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






var page_externalEventsCodes = constants.externalEventsCodes;
/**
 * Class that retrieves pages either from the cache or by fetching them using http requests.
 * This class can handle:
 *  - dynamic pages: the one that are defined in json files.
 *  Also, dynamic pages can be localy located o remotely located.
 *  - static pages: the one that are defined in html files
 * 
 * @class CellsManagerPage
 * 
 *
 * The constructor receives a CellsBridge that has all the needed configuration:
 *
 * The property 'templatesPath' indicates the path where the local pages are located.
 * It must be defined only if there are local pages.
 *
 * The property 'composerEndpoint' indicates the url where the local pages are located.
 * This url must have the literals '{id}' and '{platform}'. It must be defined only if there are remote pages.
 *
 * The property 'remoteTemplates' is an array that contains the name of the remote templates
 * (just the name, not the extension).
 * It must be defined only if there are remote pages.
 *
  * The property 'htmlPagesPath' is the path to the folder that contains the html pages.
 *
 * The property 'htmlPages' is an array that contains the name of the static html pages
 * (just the name, not the extension).
 *
 * The property 'appId' is the application's id.
 *
 * The property 'getPlatform' is a function, usually defined in the app.js file, that returns
 * a string indicating the platform that runs the application (for instance: destkop, ios or android).
 */

var page_CellsManagerPage = /*#__PURE__*/function () {
  /**
   * @param {CellsBridge} bridge
   */
  function CellsManagerPage(bridge) {
    page_classCallCheck(this, CellsManagerPage);

    this._initCellsPageManager(bridge);
  }
  /**
   * @param {CellsBridge} bridge
   */


  page_createClass(CellsManagerPage, [{
    key: "_initCellsPageManager",
    value: function _initCellsPageManager(bridge) {
      var _bridge$htmlPagesPath = bridge.htmlPagesPath,
          htmlPagesPath = _bridge$htmlPagesPath === void 0 ? './pages/' : _bridge$htmlPagesPath,
          htmlPages = bridge.htmlPages,
          templatesPath = bridge.templatesPath,
          composerEndpoint = bridge.composerEndpoint,
          remoteTemplates = bridge.remoteTemplates,
          appId = bridge.appId,
          getPlatform = bridge.getPlatform,
          cache = bridge.cache,
          prefix = bridge.storagePrefix,
          composerEngine = bridge.composerEngine,
          TemplateManager = bridge.TemplateManager;
      var storage = new CellsStorage({
        prefix: prefix,
        persistent: cache
      });
      var connector = new CellsBridgeConnector();
      var sanitizer = new sanitizer_CellsBridgeComposerSanitizer();

      page_extends(this, {
        storage: storage,
        htmlPagesPath: htmlPagesPath,
        htmlPages: htmlPages,
        templatesPath: templatesPath,
        composerEndpoint: composerEndpoint,
        remoteTemplates: remoteTemplates,
        appId: appId,
        getPlatform: getPlatform,
        cache: cache,
        connector: connector,
        sanitizer: sanitizer,
        composerEngine: composerEngine,
        TemplateManager: TemplateManager
      });
    }
    /**
     * @param  {String} page
     */

  }, {
    key: "_remoteTemplate",
    value: function _remoteTemplate(page) {
      var replaced = this.composerEndpoint.replace(/{appId}/, this.appId);

      if (this.getPlatform) {
        replaced = replaced.replace(/{platform}/, this.getPlatform());
      }

      replaced = replaced.replace(/{page}/, page);
      return replaced;
    }
    /**
     * @param {String} page
     */

  }, {
    key: "_localTemplate",
    value: function _localTemplate(page) {
      var endpoint = !this.templatesPath ? this.composerEndpoint : this.templatesPath;
      return "".concat(endpoint).concat(page, ".json");
    }
    /**
     * @param {String} page
     */

  }, {
    key: "_isLocalComposer",
    value: function _isLocalComposer(page) {
      var result = true;
      var hasTemplatePath = this.templatesPath && this.templatesPath.length > 0;
      var hasRemoteTemplates = this.remoteTemplates && this.remoteTemplates.length > 0; // legacy case when there was just composerEndpoint and
      // it could be a directory or an url

      var oldWayOnlyCompopserEndpointDefined = this.composerEndpoint && !hasTemplatePath && !hasRemoteTemplates;

      if (oldWayOnlyCompopserEndpointDefined) {
        result = this.composerEndpoint.indexOf('http') !== 0;
      } else {
        if (this.composerEndpoint && this.remoteTemplates) {
          result = this.remoteTemplates.indexOf(page) < 0;
        } else {
          result = true;
        }
      }

      return result;
    }
    /**
     * @param  {String} page
     */

  }, {
    key: "_renderComposerEndpoint",
    value: function _renderComposerEndpoint(page) {
      if (this._isLocalComposer(page)) {
        return this._localTemplate(page);
      } else {
        return this._remoteTemplate(page);
      }
    }
    /**
     * Returns the url needed to retrieve a page. It handles theese cases:
     *  - page is dynamic (json file) and remote
     *  - page is dynamic (json file) and local
     *  - page is static (html file)
     *
     * @param {String} page is the name of the page to retrieve
     */

  }, {
    key: "generateRequestUrl",
    value: function generateRequestUrl(page) {
      if (this.htmlPages && this.htmlPages.indexOf(page) >= 0) {
        return this.htmlPagesPath + page + '.html';
      } else {
        return this._renderComposerEndpoint(page);
      }
    }
    /**
     * @param {Object} page
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: "onPageDefinitionNotFound",
    value: function onPageDefinitionNotFound(page) {// Overwrite to make something when page definition is not found.
    }
  }, {
    key: "clear",
    value: function clear() {
      this.storage.clear();
    }
    /**
     * Returns a promise that retrieves a dynamic page (json file).
     * The page may come from the cache or from a http request.
     *
     * @param {String} page name
     * @param {Object} options for http request
     * @param {Object} configuration
     */

  }, {
    key: "get",
    value: function get(page, options, config) {
      var useComposerEngineForThisPage = this.composerEngine && !this._isLocalComposer(page);
      var spec;

      if (useComposerEngineForThisPage) {
        this.TemplateManager.removeTemplate(page);
        return this._getFromComposerEngine(page, options);
      } else {
        spec = this.storage.getItem(page);

        if (this.cache && spec) {
          return Promise.resolve(spec);
        } else {
          return this._getFromConnector(page, options, config);
        }
      }
    }
    /**
     *
     * @param {String} page name
     * @param {Object} options for http request
     *    
    */

  }, {
    key: "_getFromComposerEngine",
    value: function _getFromComposerEngine(page, options) {
      var response = JSON.parse(this.composerEngine.getPage(page));
      return Promise.resolve(this._onResponse(page, options, response));
    }
    /**
     *
     * @param {String} page name
     * @param {Object} options for http request
     * @param {Object} config configuration
    */

  }, {
    key: "_getFromConnector",
    value: function _getFromConnector(page, options, config) {
      var _this = this;

      var PAGE_REQUEST = page_externalEventsCodes.PAGE_REQUEST;
      options = options || {};
      options.url = this.generateRequestUrl(page, options, config);
      manager_events.emit(PAGE_REQUEST, options);
      return this.connector.getJSON(options).then(function (response) {
        return _this._onResponse(page, options, response);
      })["catch"]( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(error) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this._onResponseFail(page);

                case 2:
                  error = _context.sent;
                  console.error(error);
                  return _context.abrupt("return", error.message);

                case 5:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
    /**
     * Returns a promise that retrieves a static page (html file).
     * The page comes from a http request.
     *
     * @param {String} page name
     * @param {Object} options for http request
     */

  }, {
    key: "getPage",
    value: function getPage(page, options) {
      var _this2 = this;

      var PAGE_REQUEST = page_externalEventsCodes.PAGE_REQUEST;
      options = options || {};
      options.url = this.generateRequestUrl(page);
      manager_events.emit(PAGE_REQUEST, options);
      return this.connector.getHTML(options).then(function (response) {
        return _this2._onResponseHTML(page, options, response);
      })["catch"](function (error) {
        _this2._onResponseFail(page);

        console.error(error);
        return error.message;
      });
    } //getComponentPage(...)

    /**
     * Returns a promise that retrieves a static page (html file).
     * The page comes from a http request.
     *
     * @param {String} page name
     * @param {Object} options for http request
     * @param {Response} response for http request
     */

  }, {
    key: "_onResponse",
    value: function _onResponse(page, options, response) {
      var PAGE_RESPONSE = page_externalEventsCodes.PAGE_RESPONSE,
          DATA_LOAD = page_externalEventsCodes.DATA_LOAD;
      response.page = page;
      manager_events.emit(PAGE_RESPONSE, response);
      var sanitizedData = this.sanitizer.parse(response); // sanitizedData = this.bridge.parse('data', sanitizedData);

      this.storage.setItem(page, sanitizedData);
      manager_events.emit(DATA_LOAD, sanitizedData);
      return sanitizedData;
    }
    /**
     * @param  {String} page name of the page
     * @param  {Object} options 
     * @param  {String} responseText html of the page
     */

  }, {
    key: "_onResponseHTML",
    value: function _onResponseHTML(page, options, responseText) {
      var PAGE_RESPONSE = page_externalEventsCodes.PAGE_RESPONSE,
          DATA_LOAD = page_externalEventsCodes.DATA_LOAD;
      var response = {
        page: page,
        html: responseText
      };
      manager_events.emit(PAGE_RESPONSE, response);
      var sanitizedData = {
        page: page,
        currentPage: {},
        template: {},
        components: [],
        pages: [],
        html: responseText
      };
      this.storage.setItem(page, sanitizedData);
      manager_events.emit(DATA_LOAD, sanitizedData);
      return sanitizedData;
    }
  }, {
    key: "_onResponseFail",
    value: function _onResponseFail(page) {
      if (this.onPageDefinitionNotFound) {
        this.onPageDefinitionNotFound(page);
      }

      return Promise.reject(new Error("Definition file for page '".concat(page, "' not found.")));
    }
  }]);

  return CellsManagerPage;
}();


// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isFunction.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/config.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
var config_config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/hostReportError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; }, 0);
}
//# sourceMappingURL=hostReportError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Observer.js
/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */


var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config_config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError(err);
        }
    },
    complete: function () { }
};
//# sourceMappingURL=Observer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isArray.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();
//# sourceMappingURL=isArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isObject.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x !== null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
})();
var UnsubscriptionError = UnsubscriptionErrorImpl;
//# sourceMappingURL=UnsubscriptionError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js
/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */




var Subscription_Subscription = /*@__PURE__*/ (function () {
    function Subscription(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._ctorUnsubscribe = true;
            this._unsubscribe = unsubscribe;
        }
    }
    Subscription.prototype.unsubscribe = function () {
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        }
        else if (_parentOrParents !== null) {
            for (var index = 0; index < _parentOrParents.length; ++index) {
                var parent_1 = _parentOrParents[index];
                parent_1.remove(this);
            }
        }
        if (isFunction(_unsubscribe)) {
            if (_ctorUnsubscribe) {
                this._unsubscribe = undefined;
            }
            try {
                _unsubscribe.call(this);
            }
            catch (e) {
                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
            }
        }
        if (isArray(_subscriptions)) {
            var index = -1;
            var len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject(sub)) {
                    try {
                        sub.unsubscribe();
                    }
                    catch (e) {
                        errors = errors || [];
                        if (e instanceof UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        }
                        else {
                            errors.push(e);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new UnsubscriptionError(errors);
        }
    };
    Subscription.prototype.add = function (teardown) {
        var subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (!(subscription instanceof Subscription)) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default: {
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
        }
        var _parentOrParents = subscription._parentOrParents;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        }
        else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
        }
        else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        }
        else {
            return subscription;
        }
        var subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [subscription];
        }
        else {
            subscriptions.push(subscription);
        }
        return subscription;
    };
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());

function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
}
//# sourceMappingURL=Subscription.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = /*@__PURE__*/ (function () {
    return typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
})();
var $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Subscriber.js
/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */







var Subscriber_Subscriber = /*@__PURE__*/ (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this.syncErrorValue = null;
        _this.syncErrorThrown = false;
        _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        _this.destination = destinationOrNext;
                        destinationOrNext.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new Subscriber_SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new Subscriber_SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber] = function () { return this; };
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _parentOrParents = this._parentOrParents;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    };
    return Subscriber;
}(Subscription_Subscription));

var Subscriber_SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== empty) {
                context = Object.create(observerOrNext);
                if (isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config_config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config_config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config_config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config_config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config_config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config_config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError(err);
                return true;
            }
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber_Subscriber));

//# sourceMappingURL=Subscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/canReportError.js
/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

function canReportError(observer) {
    while (observer) {
        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
        if (closed_1 || isStopped) {
            return false;
        }
        else if (destination && destination instanceof Subscriber_Subscriber) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
//# sourceMappingURL=canReportError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js
/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber]) {
            return nextOrObserver[rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_Subscriber(empty);
    }
    return new Subscriber_Subscriber(nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable_observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();
//# sourceMappingURL=observable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/pipe.js
/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js
/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */





var Observable_Observable = /*@__PURE__*/ (function () {
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        }
        else {
            sink.add(this.source || (config_config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (config_config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config_config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (canReportError(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    Observable.prototype[observable_observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config_config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ObjectUnsubscribedErrorImpl;
})();
var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var SubjectSubscription_SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_Subscription));

//# sourceMappingURL=SubjectSubscription.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Subject.js
/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */







var Subject_SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber_Subscriber));

var Subject_Subject = /*@__PURE__*/ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber] = function () {
        return new Subject_SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new Subject_AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new Subject_AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_Observable));

var Subject_AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject_Subject));

//# sourceMappingURL=Subject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/refCount.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function refCount_refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new refCount_RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var refCount_RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=refCount.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js
/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */






var ConnectableObservable_ConnectableObservable = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        _this._isComplete = false;
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_Subscription();
            connection.add(this.source
                .subscribe(new ConnectableObservable_ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_Subscription.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_refCount()(this);
    };
    return ConnectableObservable;
}(Observable_Observable));

var connectableObservableDescriptor = /*@__PURE__*/ (function () {
    var connectableProto = ConnectableObservable_ConnectableObservable.prototype;
    return {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
})();
var ConnectableObservable_ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_SubjectSubscriber));
var ConnectableObservable_RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new ConnectableObservable_RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var ConnectableObservable_RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=ConnectableObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/groupBy.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */





function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new groupBy_GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
var groupBy_GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject_Subject());
            groups.set(key, group);
            var groupedObservable = new groupBy_GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new groupBy_GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new groupBy_GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_Subscriber));
var groupBy_GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_Subscriber));
var groupBy_GroupedObservable = /*@__PURE__*/ (function (_super) {
    __extends(GroupedObservable, _super);
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new groupBy_InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_Observable));

var groupBy_InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_Subscription));
//# sourceMappingURL=groupBy.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/BehaviorSubject.js
/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */



var BehaviorSubject_BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_Subject));

//# sourceMappingURL=BehaviorSubject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/Action.js
/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */


var Action_Action = /*@__PURE__*/ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(Subscription_Subscription));

//# sourceMappingURL=Action.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js
/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */


var AsyncAction_AsyncAction = /*@__PURE__*/ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_Action));

//# sourceMappingURL=AsyncAction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


var QueueAction_QueueAction = /*@__PURE__*/ (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_AsyncAction));

//# sourceMappingURL=QueueAction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Scheduler.js
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    Scheduler.now = function () { return Date.now(); };
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js
/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */


var AsyncScheduler_AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        _this.active = false;
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

//# sourceMappingURL=AsyncScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var QueueScheduler_QueueScheduler = /*@__PURE__*/ (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler_AsyncScheduler));

//# sourceMappingURL=QueueScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/queue.js
/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */


var queueScheduler = /*@__PURE__*/ new QueueScheduler_QueueScheduler(QueueAction_QueueAction);
var queue = queueScheduler;
//# sourceMappingURL=queue.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/empty.js
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

var EMPTY = /*@__PURE__*/ new Observable_Observable(function (subscriber) { return subscriber.complete(); });
function empty_empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable_Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isScheduler.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    };
};
//# sourceMappingURL=subscribeToArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function scheduleArray(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var sub = new Subscription_Subscription();
        var i = 0;
        sub.add(scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
                return;
            }
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
                sub.add(this.schedule());
            }
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromArray.js
/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable_Observable(subscribeToArray(input));
    }
    else {
        return scheduleArray(input, scheduler);
    }
}
//# sourceMappingURL=fromArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js
/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */



function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler(scheduler)) {
        args.pop();
        return scheduleArray(args, scheduler);
    }
    else {
        return fromArray(args);
    }
}
//# sourceMappingURL=of.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable_Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable_Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Notification.js
/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */



var NotificationKind;
/*@__PURE__*/ (function (NotificationKind) {
    NotificationKind["NEXT"] = "N";
    NotificationKind["ERROR"] = "E";
    NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification_Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of(this.value);
            case 'E':
                return throwError(this.error);
            case 'C':
                return empty_empty();
        }
        throw new Error('unexpected notification kind value');
    };
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

//# sourceMappingURL=Notification.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/observeOn.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



function observeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new observeOn_ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());

var observeOn_ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        var destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_Notification.createError(err));
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_Notification.createComplete());
        this.unsubscribe();
    };
    return ObserveOnSubscriber;
}(Subscriber_Subscriber));

var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

//# sourceMappingURL=observeOn.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/ReplaySubject.js
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */







var ReplaySubject_ReplaySubject = /*@__PURE__*/ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        if (!this.isStopped) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
                _events.shift();
            }
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        if (!this.isStopped) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription_Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_Subject));

var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());
//# sourceMappingURL=ReplaySubject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/AsyncSubject.js
/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */



var AsyncSubject_AsyncSubject = /*@__PURE__*/ (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_Subject));

//# sourceMappingURL=AsyncSubject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/Immediate.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};
var TestTools = {
    pending: function () {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js
/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */



var AsapAction_AsapAction = /*@__PURE__*/ (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction_AsyncAction));

//# sourceMappingURL=AsapAction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AsapScheduler_AsapScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_AsyncScheduler));

//# sourceMappingURL=AsapScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/asap.js
/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */


var asapScheduler = /*@__PURE__*/ new AsapScheduler_AsapScheduler(AsapAction_AsapAction);
var asap = asapScheduler;
//# sourceMappingURL=asap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/async.js
/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */


var asyncScheduler = /*@__PURE__*/ new AsyncScheduler_AsyncScheduler(AsyncAction_AsyncAction);
var async_async = asyncScheduler;
//# sourceMappingURL=async.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js
/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */


var AnimationFrameAction_AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_AsyncAction));

//# sourceMappingURL=AnimationFrameAction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */


var AnimationFrameScheduler_AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_AsyncScheduler));

//# sourceMappingURL=AnimationFrameScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js
/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */


var animationFrameScheduler = /*@__PURE__*/ new AnimationFrameScheduler_AnimationFrameScheduler(AnimationFrameAction_AnimationFrameAction);
var animationFrame = animationFrameScheduler;
//# sourceMappingURL=animationFrame.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js
/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */



var VirtualTimeScheduler_VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualTimeScheduler_VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
            actions.shift();
            this.frame = action.delay;
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_AsyncScheduler));

var VirtualTimeScheduler_VirtualAction = /*@__PURE__*/ (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_AsyncAction));

//# sourceMappingURL=VirtualTimeScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/noop.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }
//# sourceMappingURL=noop.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isObservable.js
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function isObservable(obj) {
    return !!obj && (obj instanceof Observable_Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
//# sourceMappingURL=isObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
    function ArgumentOutOfRangeErrorImpl() {
        Error.call(this);
        this.message = 'argument out of range';
        this.name = 'ArgumentOutOfRangeError';
        return this;
    }
    ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return ArgumentOutOfRangeErrorImpl;
})();
var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/EmptyError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var EmptyErrorImpl = /*@__PURE__*/ (function () {
    function EmptyErrorImpl() {
        Error.call(this);
        this.message = 'no elements in sequence';
        this.name = 'EmptyError';
        return this;
    }
    EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return EmptyErrorImpl;
})();
var EmptyError = EmptyErrorImpl;
//# sourceMappingURL=EmptyError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/TimeoutError.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var TimeoutErrorImpl = /*@__PURE__*/ (function () {
    function TimeoutErrorImpl() {
        Error.call(this);
        this.message = 'Timeout has occurred';
        this.name = 'TimeoutError';
        return this;
    }
    TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    return TimeoutErrorImpl;
})();
var TimeoutError = TimeoutErrorImpl;
//# sourceMappingURL=TimeoutError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new map_MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());

var map_MapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=map.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindCallback.js
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */






function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new Observable_Observable(function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new AsyncSubject_AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (canReportError(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(bindCallback_dispatch, 0, state);
            }
        });
    };
}
function bindCallback_dispatch(state) {
    var _this = this;
    var self = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    var err = state.err, subject = state.subject;
    subject.error(err);
}
//# sourceMappingURL=bindCallback.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js
/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */






function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new Observable_Observable(function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new AsyncSubject_AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        if (canReportError(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(bindNodeCallback_dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
function bindNodeCallback_dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(bindNodeCallback_dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(bindNodeCallback_dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(bindNodeCallback_dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function bindNodeCallback_dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function bindNodeCallback_dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}
//# sourceMappingURL=bindNodeCallback.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var OuterSubscriber_OuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_Subscriber));

//# sourceMappingURL=OuterSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/InnerSubscriber.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


var InnerSubscriber_InnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_Subscriber));

//# sourceMappingURL=InnerSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js
/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */

var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError);
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToPromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/iterator.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator_iterator = /*@__PURE__*/ getSymbolIterator();
var $$iterator = iterator_iterator;
//# sourceMappingURL=iterator.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator = iterable[iterator_iterator]();
        do {
            var item = void 0;
            try {
                item = iterator.next();
            }
            catch (err) {
                subscriber.error(err);
                return subscriber;
            }
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        if (typeof iterator.return === 'function') {
            subscriber.add(function () {
                if (iterator.return) {
                    iterator.return();
                }
            });
        }
        return subscriber;
    };
};
//# sourceMappingURL=subscribeToIterable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[observable_observable]();
        if (typeof obs.subscribe !== 'function') {
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};
//# sourceMappingURL=subscribeToObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isArrayLike.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isPromise.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js
/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */









var subscribeTo = function (result) {
    if (!!result && typeof result[observable_observable] === 'function') {
        return subscribeToObservable(result);
    }
    else if (isArrayLike(result)) {
        return subscribeToArray(result);
    }
    else if (isPromise(result)) {
        return subscribeToPromise(result);
    }
    else if (!!result && typeof result[iterator_iterator] === 'function') {
        return subscribeToIterable(result);
    }
    else {
        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js
/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */



function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
    if (innerSubscriber === void 0) {
        innerSubscriber = new InnerSubscriber_InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    }
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof Observable_Observable) {
        return result.subscribe(innerSubscriber);
    }
    return subscribeTo(result)(innerSubscriber);
}
//# sourceMappingURL=subscribeToResult.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js
/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */






var NONE = {};
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = undefined;
    var scheduler = undefined;
    if (isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    if (observables.length === 1 && isArray(observables[0])) {
        observables = observables[0];
    }
    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new combineLatest_CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());

var combineLatest_CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult(this, observable, undefined, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_OuterSubscriber));

//# sourceMappingURL=combineLatest.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */



function scheduleObservable(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var sub = new Subscription_Subscription();
        sub.add(scheduler.schedule(function () {
            var observable = input[observable_observable]();
            sub.add(observable.subscribe({
                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function schedulePromise(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var sub = new Subscription_Subscription();
        sub.add(scheduler.schedule(function () {
            return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            });
        }));
        return sub;
    });
}
//# sourceMappingURL=schedulePromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js
/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */



function scheduleIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable_Observable(function (subscriber) {
        var sub = new Subscription_Subscription();
        var iterator;
        sub.add(function () {
            if (iterator && typeof iterator.return === 'function') {
                iterator.return();
            }
        });
        sub.add(scheduler.schedule(function () {
            iterator = input[iterator_iterator]();
            sub.add(scheduler.schedule(function () {
                if (subscriber.closed) {
                    return;
                }
                var value;
                var done;
                try {
                    var result = iterator.next();
                    value = result.value;
                    done = result.done;
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                    this.schedule();
                }
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleIterable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js
/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

function isInteropObservable(input) {
    return input && typeof input[observable_observable] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isIterable.js
/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

function isIterable(input) {
    return input && typeof input[iterator_iterator] === 'function';
}
//# sourceMappingURL=isIterable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js
/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */








function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        else if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        else if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        }
        else if (isIterable(input) || typeof input === 'string') {
            return scheduleIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=scheduled.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js
/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */



function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable_Observable) {
            return input;
        }
        return new Observable_Observable(subscribeTo(input));
    }
    else {
        return scheduled(input, scheduler);
    }
}
//# sourceMappingURL=from.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/innerSubscribe.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */




var innerSubscribe_SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SimpleInnerSubscriber, _super);
    function SimpleInnerSubscriber(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
    }
    SimpleInnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(value);
    };
    SimpleInnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error);
        this.unsubscribe();
    };
    SimpleInnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete();
        this.unsubscribe();
    };
    return SimpleInnerSubscriber;
}(Subscriber_Subscriber));

var innerSubscribe_ComplexInnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ComplexInnerSubscriber, _super);
    function ComplexInnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        return _this;
    }
    ComplexInnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);
    };
    ComplexInnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error);
        this.unsubscribe();
    };
    ComplexInnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return ComplexInnerSubscriber;
}(Subscriber_Subscriber));

var innerSubscribe_SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SimpleOuterSubscriber, _super);
    function SimpleOuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    SimpleOuterSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    SimpleOuterSubscriber.prototype.notifyComplete = function () {
        this.destination.complete();
    };
    return SimpleOuterSubscriber;
}(Subscriber_Subscriber));

var innerSubscribe_ComplexOuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ComplexOuterSubscriber, _super);
    function ComplexOuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ComplexOuterSubscriber.prototype.notifyNext = function (_outerValue, innerValue, _outerIndex, _innerSub) {
        this.destination.next(innerValue);
    };
    ComplexOuterSubscriber.prototype.notifyError = function (error) {
        this.destination.error(error);
    };
    ComplexOuterSubscriber.prototype.notifyComplete = function (_innerSub) {
        this.destination.complete();
    };
    return ComplexOuterSubscriber;
}(Subscriber_Subscriber));

function innerSubscribe(result, innerSubscriber) {
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof Observable_Observable) {
        return result.subscribe(innerSubscriber);
    }
    var subscription;
    try {
        subscription = subscribeTo(result)(innerSubscriber);
    }
    catch (error) {
        innerSubscriber.error(error);
    }
    return subscription;
}
//# sourceMappingURL=innerSubscribe.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new mergeMap_MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());

var mergeMap_MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish) {
        var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = innerSubscribe(ish, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function () {
        var buffer = this.buffer;
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));

var flatMap = mergeMap;
//# sourceMappingURL=mergeMap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeAll.js
/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */


function mergeAll(concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return mergeMap(identity, concurrent);
}
//# sourceMappingURL=mergeAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatAll.js
/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

function concatAll() {
    return mergeAll(1);
}
//# sourceMappingURL=concatAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js
/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */


function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return concatAll()(of.apply(void 0, observables));
}
//# sourceMappingURL=concat.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */



function defer(observableFactory) {
    return new Observable_Observable(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? from(input) : empty_empty();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/forkJoin.js
/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */





function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 1) {
        var first_1 = sources[0];
        if (isArray(first_1)) {
            return forkJoinInternal(first_1, null);
        }
        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
            var keys = Object.keys(first_1);
            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
        }
    }
    if (typeof sources[sources.length - 1] === 'function') {
        var resultSelector_1 = sources.pop();
        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;
        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));
    }
    return forkJoinInternal(sources, null);
}
function forkJoinInternal(sources, keys) {
    return new Observable_Observable(function (subscriber) {
        var len = sources.length;
        if (len === 0) {
            subscriber.complete();
            return;
        }
        var values = new Array(len);
        var completed = 0;
        var emitted = 0;
        var _loop_1 = function (i) {
            var source = from(sources[i]);
            var hasValue = false;
            subscriber.add(source.subscribe({
                next: function (value) {
                    if (!hasValue) {
                        hasValue = true;
                        emitted++;
                    }
                    values[i] = value;
                },
                error: function (err) { return subscriber.error(err); },
                complete: function () {
                    completed++;
                    if (completed === len || !hasValue) {
                        if (emitted === len) {
                            subscriber.next(keys ?
                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
                                values);
                        }
                        subscriber.complete();
                    }
                }
            }));
        };
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
    });
}
//# sourceMappingURL=forkJoin.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




var fromEvent_toString = /*@__PURE__*/ (function () { return Object.prototype.toString; })();
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_Observable(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js
/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */




function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_Observable(function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!isFunction(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
//# sourceMappingURL=fromEventPattern.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/generate.js
/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity;
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = identity;
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new Observable_Observable(function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(generate_dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function generate_dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=generate.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/iif.js
/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */


function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) {
        trueResult = EMPTY;
    }
    if (falseResult === void 0) {
        falseResult = EMPTY;
    }
    return defer(function () { return condition() ? trueResult : falseResult; });
}
//# sourceMappingURL=iif.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isNumeric.js
/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

function isNumeric(val) {
    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */



function interval(period, scheduler) {
    if (period === void 0) {
        period = 0;
    }
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    if (!isNumeric(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = async_async;
    }
    return new Observable_Observable(function (subscriber) {
        subscriber.add(scheduler.schedule(interval_dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
function interval_dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}
//# sourceMappingURL=interval.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js
/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */




function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_Observable) {
        return observables[0];
    }
    return mergeAll(concurrent)(fromArray(observables, scheduler));
}
//# sourceMappingURL=merge.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/never.js
/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */


var NEVER = /*@__PURE__*/ new Observable_Observable(noop);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js
/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */




function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return EMPTY;
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && isArray(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new Observable_Observable(function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return from(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
//# sourceMappingURL=onErrorResumeNext.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/pairs.js
/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */


function pairs(obj, scheduler) {
    if (!scheduler) {
        return new Observable_Observable(function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new Observable_Observable(function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new Subscription_Subscription();
            subscription.add(scheduler.schedule(pairs_dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
function pairs_dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
//# sourceMappingURL=pairs.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/not.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
//# sourceMappingURL=not.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new filter_FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
var filter_FilterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=filter.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/partition.js
/** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */




function partition(source, predicate, thisArg) {
    return [
        filter(predicate, thisArg)(new Observable_Observable(subscribeTo(source))),
        filter(not(predicate, thisArg))(new Observable_Observable(subscribeTo(source)))
    ];
}
//# sourceMappingURL=partition.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/race.js
/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1) {
        if (isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return fromArray(observables, undefined).lift(new RaceOperator());
}
var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new race_RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());

var race_RaceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult(this, observable, undefined, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_OuterSubscriber));

//# sourceMappingURL=race.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/range.js
/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

function range(start, count, scheduler) {
    if (start === void 0) {
        start = 0;
    }
    return new Observable_Observable(function (subscriber) {
        if (count === undefined) {
            count = start;
            start = 0;
        }
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(range_dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
function range_dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
//# sourceMappingURL=range.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js
/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */




function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) {
        dueTime = 0;
    }
    var period = -1;
    if (isNumeric(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!isScheduler(scheduler)) {
        scheduler = async_async;
    }
    return new Observable_Observable(function (subscriber) {
        var due = isNumeric(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(timer_dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
function timer_dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/using.js
/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */



function using(resourceFactory, observableFactory) {
    return new Observable_Observable(function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? from(result) : EMPTY;
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
//# sourceMappingURL=using.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/zip.js
/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_.._internal_symbol_iterator,_innerSubscribe PURE_IMPORTS_END */






function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
}
var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new zip_ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());

var zip_ZipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray(value)) {
            iterators.push(new zip_StaticArrayIterator(value));
        }
        else if (typeof value[iterator_iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator_iterator]()));
        }
        else {
            iterators.push(new zip_ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        this.unsubscribe();
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                var destination = this.destination;
                destination.add(iterator.subscribe());
            }
            else {
                this.active--;
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_Subscriber));

var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return Boolean(nextResult && nextResult.done);
    };
    return StaticIterator;
}());
var zip_StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator_iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
var zip_ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator_iterator] = function () {
        return this;
    };
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (innerValue) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function () {
        return innerSubscribe(this.observable, new innerSubscribe_SimpleInnerSubscriber(this));
    };
    return ZipBufferIterator;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=zip.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/index.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */























































//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/audit.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function audit(durationSelector) {
    return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
    };
}
var AuditOperator = /*@__PURE__*/ (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new audit_AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
var audit_AuditSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = void 0;
            try {
                var durationSelector = this.durationSelector;
                duration = durationSelector(value);
            }
            catch (err) {
                return this.destination.error(err);
            }
            var innerSubscription = innerSubscribe(duration, new innerSubscribe_SimpleInnerSubscriber(this));
            if (!innerSubscription || innerSubscription.closed) {
                this.clearThrottle();
            }
            else {
                this.add(this.throttled = innerSubscription);
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = undefined;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = undefined;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function () {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=audit.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/auditTime.js
/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */



function auditTime(duration, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return audit(function () { return timer(duration, scheduler); });
}
//# sourceMappingURL=auditTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/buffer.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function buffer_buffer(closingNotifier) {
    return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
    };
}
var BufferOperator = /*@__PURE__*/ (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new buffer_BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
var buffer_BufferSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        var _this = _super.call(this, destination) || this;
        _this.buffer = [];
        _this.add(innerSubscribe(closingNotifier, new innerSubscribe_SimpleInnerSubscriber(_this)));
        return _this;
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function () {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=buffer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/bufferCount.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function bufferCount(bufferSize, startBufferEvery) {
    if (startBufferEvery === void 0) {
        startBufferEvery = null;
    }
    return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    };
}
var BufferCountOperator = /*@__PURE__*/ (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = bufferCount_BufferCountSubscriber;
        }
        else {
            this.subscriberClass = bufferCount_BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
var bufferCount_BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.buffer = [];
        return _this;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber_Subscriber));
var bufferCount_BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.startBufferEvery = startBufferEvery;
        _this.buffers = [];
        _this.count = 0;
        return _this;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=bufferCount.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/bufferTime.js
/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */




function bufferTime(bufferTimeSpan) {
    var length = arguments.length;
    var scheduler = async_async;
    if (isScheduler(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    var bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    var maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    };
}
var BufferTimeOperator = /*@__PURE__*/ (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new bufferTime_BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = /*@__PURE__*/ (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
var bufferTime_BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.bufferTimeSpan = bufferTimeSpan;
        _this.bufferCreationInterval = bufferCreationInterval;
        _this.maxBufferSize = maxBufferSize;
        _this.scheduler = scheduler;
        _this.contexts = [];
        var context = _this.openContext();
        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (_this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: _this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
        return _this;
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context_1;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber_Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/bufferToggle.js
/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */




function bufferToggle(openings, closingSelector) {
    return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    };
}
var BufferToggleOperator = /*@__PURE__*/ (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new bufferToggle_BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
var bufferToggle_BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(subscribeToResult(_this, openings));
        return _this;
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription_Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber_OuterSubscriber));
//# sourceMappingURL=bufferToggle.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/bufferWhen.js
/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */



function bufferWhen(closingSelector) {
    return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
    };
}
var BufferWhenOperator = /*@__PURE__*/ (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new bufferWhen_BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
var bufferWhen_BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = undefined;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function () {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier;
        try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
        }
        catch (err) {
            return this.error(err);
        }
        closingSubscription = new Subscription_Subscription();
        this.closingSubscription = closingSubscription;
        this.add(closingSubscription);
        this.subscribing = true;
        closingSubscription.add(innerSubscribe(closingNotifier, new innerSubscribe_SimpleInnerSubscriber(this)));
        this.subscribing = false;
    };
    return BufferWhenSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=bufferWhen.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/catchError.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        var operator = new CatchOperator(selector);
        var caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
var CatchOperator = /*@__PURE__*/ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new catchError_CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
var catchError_CatchSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
            this.add(innerSubscriber);
            var innerSubscription = innerSubscribe(result, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                this.add(innerSubscription);
            }
        }
    };
    return CatchSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=catchError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/combineAll.js
/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

function combineAll(project) {
    return function (source) { return source.lift(new CombineLatestOperator(project)); };
}
//# sourceMappingURL=combineAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/combineLatest.js
/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */



var none = {};
function combineLatest_combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    if (observables.length === 1 && isArray(observables[0])) {
        observables = observables[0].slice();
    }
    return function (source) { return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project)); };
}
//# sourceMappingURL=combineLatest.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concat.js
/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */

function concat_concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(concat.apply(void 0, [source].concat(observables))); };
}
//# sourceMappingURL=concat.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatMap.js
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function concatMap(project, resultSelector) {
    return mergeMap(project, resultSelector, 1);
}
//# sourceMappingURL=concatMap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatMapTo.js
/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */

function concatMapTo(innerObservable, resultSelector) {
    return concatMap(function () { return innerObservable; }, resultSelector);
}
//# sourceMappingURL=concatMapTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/count.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function count_count(predicate) {
    return function (source) { return source.lift(new CountOperator(predicate, source)); };
}
var CountOperator = /*@__PURE__*/ (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new count_CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
var count_CountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=count.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/debounce.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function debounce(durationSelector) {
    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
}
var DebounceOperator = /*@__PURE__*/ (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new debounce_DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
var debounce_DebounceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = innerSubscribe(duration, new innerSubscribe_SimpleInnerSubscriber(this));
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = undefined;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = undefined;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=debounce.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/debounceTime.js
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */



function debounceTime(dueTime, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
}
var DebounceTimeOperator = /*@__PURE__*/ (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new debounceTime_DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
var debounceTime_DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(debounceTime_dispatchNext, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            var lastValue = this.lastValue;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber_Subscriber));
function debounceTime_dispatchNext(subscriber) {
    subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function defaultIfEmpty(defaultValue) {
    if (defaultValue === void 0) {
        defaultValue = null;
    }
    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
}
var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new defaultIfEmpty_DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
var defaultIfEmpty_DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this = _super.call(this, destination) || this;
        _this.defaultValue = defaultValue;
        _this.isEmpty = true;
        return _this;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=defaultIfEmpty.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isDate.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
//# sourceMappingURL=isDate.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/delay.js
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */





function delay_delay(delay, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    var absoluteDelay = isDate(delay);
    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
}
var DelayOperator = /*@__PURE__*/ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new delay_DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
var delay_DelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        var destination = this.destination;
        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification_Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
        this.unsubscribe();
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification_Notification.createComplete());
        this.unsubscribe();
    };
    return DelaySubscriber;
}(Subscriber_Subscriber));
var DelayMessage = /*@__PURE__*/ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());
//# sourceMappingURL=delay.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/delayWhen.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return function (source) {
            return new delayWhen_SubscriptionDelayObservable(source, subscriptionDelay)
                .lift(new DelayWhenOperator(delayDurationSelector));
        };
    }
    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
}
var DelayWhenOperator = /*@__PURE__*/ (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new delayWhen_DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
var delayWhen_DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.index = 0;
        return _this;
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        var index = this.index++;
        try {
            var delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
        this.unsubscribe();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        if (subscriptionIdx !== -1) {
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        }
        return subscription.outerValue;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            var destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber_OuterSubscriber));
var delayWhen_SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    }
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new delayWhen_SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable_Observable));
var delayWhen_SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.unsubscribe();
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=delayWhen.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/dematerialize.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function dematerialize() {
    return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
    };
}
var DeMaterializeOperator = /*@__PURE__*/ (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new dematerialize_DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
var dematerialize_DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=dematerialize.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinct.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function distinct(keySelector, flushes) {
    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
}
var DistinctOperator = /*@__PURE__*/ (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new distinct_DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
var distinct_DistinctSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.values = new Set();
        if (flushes) {
            _this.add(innerSubscribe(flushes, new innerSubscribe_SimpleInnerSubscriber(_this)));
        }
        return _this;
    }
    DistinctSubscriber.prototype.notifyNext = function () {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));

//# sourceMappingURL=distinct.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function distinctUntilChanged(compare, keySelector) {
    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
}
var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new distinctUntilChanged_DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
var distinctUntilChanged_DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var key;
        try {
            var keySelector = this.keySelector;
            key = keySelector ? keySelector(value) : value;
        }
        catch (err) {
            return this.destination.error(err);
        }
        var result = false;
        if (this.hasKey) {
            try {
                var compare = this.compare;
                result = compare(this.key, key);
            }
            catch (err) {
                return this.destination.error(err);
            }
        }
        else {
            this.hasKey = true;
        }
        if (!result) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=distinctUntilChanged.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/distinctUntilKeyChanged.js
/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */

function distinctUntilKeyChanged(key, compare) {
    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
}
//# sourceMappingURL=distinctUntilKeyChanged.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throwIfEmpty.js
/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */



function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) {
        errorFactory = defaultErrorFactory;
    }
    return function (source) {
        return source.lift(new ThrowIfEmptyOperator(errorFactory));
    };
}
var ThrowIfEmptyOperator = /*@__PURE__*/ (function () {
    function ThrowIfEmptyOperator(errorFactory) {
        this.errorFactory = errorFactory;
    }
    ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new throwIfEmpty_ThrowIfEmptySubscriber(subscriber, this.errorFactory));
    };
    return ThrowIfEmptyOperator;
}());
var throwIfEmpty_ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrowIfEmptySubscriber, _super);
    function ThrowIfEmptySubscriber(destination, errorFactory) {
        var _this = _super.call(this, destination) || this;
        _this.errorFactory = errorFactory;
        _this.hasValue = false;
        return _this;
    }
    ThrowIfEmptySubscriber.prototype._next = function (value) {
        this.hasValue = true;
        this.destination.next(value);
    };
    ThrowIfEmptySubscriber.prototype._complete = function () {
        if (!this.hasValue) {
            var err = void 0;
            try {
                err = this.errorFactory();
            }
            catch (e) {
                err = e;
            }
            this.destination.error(err);
        }
        else {
            return this.destination.complete();
        }
    };
    return ThrowIfEmptySubscriber;
}(Subscriber_Subscriber));
function defaultErrorFactory() {
    return new EmptyError();
}
//# sourceMappingURL=throwIfEmpty.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/take.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




function take(count) {
    return function (source) {
        if (count === 0) {
            return empty_empty();
        }
        else {
            return source.lift(new take_TakeOperator(count));
        }
    };
}
var take_TakeOperator = /*@__PURE__*/ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new take_TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
var take_TakeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=take.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/elementAt.js
/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */





function elementAt(index, defaultValue) {
    if (index < 0) {
        throw new ArgumentOutOfRangeError();
    }
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(filter(function (v, i) { return i === index; }), take(1), hasDefaultValue
            ? defaultIfEmpty(defaultValue)
            : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); }));
    };
}
//# sourceMappingURL=elementAt.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/endWith.js
/** PURE_IMPORTS_START _observable_concat,_observable_of PURE_IMPORTS_END */


function endWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    return function (source) { return concat(source, of.apply(void 0, array)); };
}
//# sourceMappingURL=endWith.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/every.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function every(predicate, thisArg) {
    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
}
var EveryOperator = /*@__PURE__*/ (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new every_EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
var every_EverySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.source = source;
        _this.index = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=every.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaust.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function exhaust() {
    return function (source) { return source.lift(new SwitchFirstOperator()); };
}
var SwitchFirstOperator = /*@__PURE__*/ (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new exhaust_SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
var exhaust_SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(innerSubscribe(value, new innerSubscribe_SimpleInnerSubscriber(this)));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function () {
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=exhaust.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/exhaustMap.js
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) {
        return source.lift(new ExhaustMapOperator(project));
    };
}
var ExhaustMapOperator = /*@__PURE__*/ (function () {
    function ExhaustMapOperator(project) {
        this.project = project;
    }
    ExhaustMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new exhaustMap_ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhaustMapOperator;
}());
var exhaustMap_ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.hasSubscription = true;
        this._innerSub(result);
    };
    ExhaustMapSubscriber.prototype._innerSub = function (result) {
        var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = innerSubscribe(result, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function () {
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=exhaustMap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/expand.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function expand(project, concurrent, scheduler) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
}
var ExpandOperator = /*@__PURE__*/ (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new expand_ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());

var expand_ExpandSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
        }
        return _this;
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            try {
                var project = this.project;
                var result = project(value, index);
                if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                }
                else {
                    var state = { subscriber: this, result: result, value: value, index: index };
                    var destination_1 = this.destination;
                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            }
            catch (e) {
                destination.error(e);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        var destination = this.destination;
        destination.add(innerSubscribe(result, new innerSubscribe_SimpleInnerSubscriber(this)));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    };
    ExpandSubscriber.prototype.notifyNext = function (innerValue) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function () {
        var buffer = this.buffer;
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));

//# sourceMappingURL=expand.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/finalize.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */



function finalize(callback) {
    return function (source) { return source.lift(new FinallyOperator(callback)); };
}
var FinallyOperator = /*@__PURE__*/ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new finalize_FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
var finalize_FinallySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new Subscription_Subscription(callback));
        return _this;
    }
    return FinallySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=finalize.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/find.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
}
var FindValueOperator = /*@__PURE__*/ (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new find_FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());

var find_FindValueSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.yieldIndex = yieldIndex;
        _this.thisArg = thisArg;
        _this.index = 0;
        return _this;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
        this.unsubscribe();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber_Subscriber));

//# sourceMappingURL=find.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/findIndex.js
/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */

function findIndex(predicate, thisArg) {
    return function (source) { return source.lift(new FindValueOperator(predicate, source, true, thisArg)); };
}
//# sourceMappingURL=findIndex.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/first.js
/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */






function first_first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
}
//# sourceMappingURL=first.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/ignoreElements.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
var IgnoreElementsOperator = /*@__PURE__*/ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ignoreElements_IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
var ignoreElements_IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
    };
    return IgnoreElementsSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=ignoreElements.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/isEmpty.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function isEmpty() {
    return function (source) { return source.lift(new IsEmptyOperator()); };
}
var IsEmptyOperator = /*@__PURE__*/ (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new isEmpty_IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
var isEmpty_IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=isEmpty.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeLast.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */




function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return empty_empty();
        }
        else {
            return source.lift(new takeLast_TakeLastOperator(count));
        }
    };
}
var takeLast_TakeLastOperator = /*@__PURE__*/ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new takeLast_TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
var takeLast_TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=takeLast.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/last.js
/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */






function last_last(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
}
//# sourceMappingURL=last.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mapTo.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function mapTo(value) {
    return function (source) { return source.lift(new MapToOperator(value)); };
}
var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new mapTo_MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
var mapTo_MapToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=mapTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/materialize.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */



function materialize() {
    return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
    };
}
var MaterializeOperator = /*@__PURE__*/ (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new materialize_MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
var materialize_MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification_Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification_Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification_Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=materialize.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/scan.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function scan(accumulator, seed) {
    var hasSeed = false;
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new scan_ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
var scan_ScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=scan.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/reduce.js
/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */




function reduce(accumulator, seed) {
    if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);
        };
    }
    return function reduceOperatorFunction(source) {
        return pipe(scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast(1))(source);
    };
}
//# sourceMappingURL=reduce.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/max.js
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function max_max(comparer) {
    var max = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
        : function (x, y) { return x > y ? x : y; };
    return reduce(max);
}
//# sourceMappingURL=max.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/merge.js
/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */

function merge_merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function (source) { return source.lift.call(merge.apply(void 0, [source].concat(observables))); };
}
//# sourceMappingURL=merge.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMapTo.js
/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */

function mergeMapTo(innerObservable, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return mergeMap(function () { return innerObservable; }, concurrent);
}
//# sourceMappingURL=mergeMapTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeScan.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function mergeScan(accumulator, seed, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
}
var MergeScanOperator = /*@__PURE__*/ (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new mergeScan_MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());

var mergeScan_MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var destination = this.destination;
            var ish = void 0;
            try {
                var accumulator = this.accumulator;
                ish = accumulator(this.acc, value, index);
            }
            catch (e) {
                return destination.error(e);
            }
            this.active++;
            this._innerSub(ish);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish) {
        var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        var innerSubscription = innerSubscribe(ish, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
        this.unsubscribe();
    };
    MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function () {
        var buffer = this.buffer;
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));

//# sourceMappingURL=mergeScan.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/min.js
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function min_min(comparer) {
    var min = (typeof comparer === 'function')
        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
        : function (x, y) { return x < y ? x : y; };
    return reduce(min);
}
//# sourceMappingURL=min.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/multicast.js
/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */

function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(source, connectableObservableDescriptor);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
var MulticastOperator = /*@__PURE__*/ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());

//# sourceMappingURL=multicast.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js
/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_innerSubscribe PURE_IMPORTS_END */




function onErrorResumeNext_onErrorResumeNext() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    if (nextSources.length === 1 && isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
}
function onErrorResumeNextStatic() {
    var nextSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        nextSources[_i] = arguments[_i];
    }
    var source = undefined;
    if (nextSources.length === 1 && isArray(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return from(source).lift(new OnErrorResumeNextOperator(nextSources));
}
var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new onErrorResumeNext_OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var onErrorResumeNext_OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
        this.unsubscribe();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
        this.unsubscribe();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (!!next) {
            var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
            var destination = this.destination;
            destination.add(innerSubscriber);
            var innerSubscription = innerSubscribe(next, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=onErrorResumeNext.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/pairwise.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function pairwise() {
    return function (source) { return source.lift(new PairwiseOperator()); };
}
var PairwiseOperator = /*@__PURE__*/ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new pairwise_PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
var pairwise_PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        var pair;
        if (this.hasPrev) {
            pair = [this.prev, value];
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
        if (pair) {
            this.destination.next(pair);
        }
    };
    return PairwiseSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=pairwise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/partition.js
/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */


function partition_partition(predicate, thisArg) {
    return function (source) {
        return [
            filter(predicate, thisArg)(source),
            filter(not(predicate, thisArg))(source)
        ];
    };
}
//# sourceMappingURL=partition.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/pluck.js
/** PURE_IMPORTS_START _map PURE_IMPORTS_END */

function pluck() {
    var properties = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        properties[_i] = arguments[_i];
    }
    var length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return function (source) { return map(plucker(properties, length))(source); };
}
function plucker(props, length) {
    var mapper = function (x) {
        var currentProp = x;
        for (var i = 0; i < length; i++) {
            var p = currentProp != null ? currentProp[props[i]] : undefined;
            if (p !== void 0) {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
//# sourceMappingURL=pluck.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/publish.js
/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */


function publish(selector) {
    return selector ?
        multicast(function () { return new Subject_Subject(); }, selector) :
        multicast(new Subject_Subject());
}
//# sourceMappingURL=publish.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/publishBehavior.js
/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */


function publishBehavior(value) {
    return function (source) { return multicast(new BehaviorSubject_BehaviorSubject(value))(source); };
}
//# sourceMappingURL=publishBehavior.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/publishLast.js
/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */


function publishLast() {
    return function (source) { return multicast(new AsyncSubject_AsyncSubject())(source); };
}
//# sourceMappingURL=publishLast.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/publishReplay.js
/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */


function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
    }
    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
    var subject = new ReplaySubject_ReplaySubject(bufferSize, windowTime, scheduler);
    return function (source) { return multicast(function () { return subject; }, selector)(source); };
}
//# sourceMappingURL=publishReplay.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/race.js
/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */


function race_race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function raceOperatorFunction(source) {
        if (observables.length === 1 && isArray(observables[0])) {
            observables = observables[0];
        }
        return source.lift.call(race.apply(void 0, [source].concat(observables)));
    };
}
//# sourceMappingURL=race.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/repeat.js
/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */



function repeat(count) {
    if (count === void 0) {
        count = -1;
    }
    return function (source) {
        if (count === 0) {
            return empty_empty();
        }
        else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
        }
        else {
            return source.lift(new RepeatOperator(count - 1, source));
        }
    };
}
var RepeatOperator = /*@__PURE__*/ (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new repeat_RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
var repeat_RepeatSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=repeat.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/repeatWhen.js
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */



function repeatWhen(notifier) {
    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
}
var RepeatWhenOperator = /*@__PURE__*/ (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new repeatWhen_RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
var repeatWhen_RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function () {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function () {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next(undefined);
        }
    };
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = undefined;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = undefined;
        }
        this.retries = undefined;
    };
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject_Subject();
        var retries;
        try {
            var notifier = this.notifier;
            retries = notifier(this.notifications);
        }
        catch (e) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = innerSubscribe(retries, new innerSubscribe_SimpleInnerSubscriber(this));
    };
    return RepeatWhenSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=repeatWhen.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/retry.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function retry(count) {
    if (count === void 0) {
        count = -1;
    }
    return function (source) { return source.lift(new RetryOperator(count, source)); };
}
var RetryOperator = /*@__PURE__*/ (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new retry_RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
var retry_RetrySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=retry.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/retryWhen.js
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */



function retryWhen(notifier) {
    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
}
var RetryWhenOperator = /*@__PURE__*/ (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new retryWhen_RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
var retryWhen_RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject_Subject();
                try {
                    var notifier = this.notifier;
                    retries = notifier(errors);
                }
                catch (e) {
                    return _super.prototype.error.call(this, e);
                }
                retriesSubscription = innerSubscribe(retries, new innerSubscribe_SimpleInnerSubscriber(this));
            }
            else {
                this.errors = undefined;
                this.retriesSubscription = undefined;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = undefined;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = undefined;
        }
        this.retries = undefined;
    };
    RetryWhenSubscriber.prototype.notifyNext = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=retryWhen.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/sample.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function sample(notifier) {
    return function (source) { return source.lift(new sample_SampleOperator(notifier)); };
}
var sample_SampleOperator = /*@__PURE__*/ (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new sample_SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(innerSubscribe(this.notifier, new innerSubscribe_SimpleInnerSubscriber(sampleSubscriber)));
        return subscription;
    };
    return SampleOperator;
}());
var sample_SampleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasValue = false;
        return _this;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=sample.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/sampleTime.js
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */



function sampleTime(period, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
}
var SampleTimeOperator = /*@__PURE__*/ (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new sampleTime_SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
var sampleTime_SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
        return _this;
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber_Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function sequenceEqual(compareTo, comparator) {
    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparator)); };
}
var SequenceEqualOperator = /*@__PURE__*/ (function () {
    function SequenceEqualOperator(compareTo, comparator) {
        this.compareTo = compareTo;
        this.comparator = comparator;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new sequenceEqual_SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
    };
    return SequenceEqualOperator;
}());

var sequenceEqual_SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparator) {
        var _this = _super.call(this, destination) || this;
        _this.compareTo = compareTo;
        _this.comparator = comparator;
        _this._a = [];
        _this._b = [];
        _this._oneComplete = false;
        _this.destination.add(compareTo.subscribe(new sequenceEqual_SequenceEqualCompareToSubscriber(destination, _this)));
        return _this;
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
        this.unsubscribe();
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            try {
                areEqual = comparator ? comparator(a, b) : a === b;
            }
            catch (e) {
                this.destination.error(e);
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype.completeB = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber_Subscriber));

var sequenceEqual_SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        return _this;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
        this.unsubscribe();
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent.completeB();
        this.unsubscribe();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=sequenceEqual.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/share.js
/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */



function shareSubjectFactory() {
    return new Subject_Subject();
}
function share() {
    return function (source) { return refCount_refCount()(multicast(shareSubjectFactory)(source)); };
}
//# sourceMappingURL=share.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/shareReplay.js
/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */

function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var config;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        config = configOrBufferSize;
    }
    else {
        config = {
            bufferSize: configOrBufferSize,
            windowTime: windowTime,
            refCount: false,
            scheduler: scheduler,
        };
    }
    return function (source) { return source.lift(shareReplayOperator(config)); };
}
function shareReplayOperator(_a) {
    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
    var subject;
    var refCount = 0;
    var subscription;
    var hasError = false;
    var isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        var innerSub;
        if (!subject || hasError) {
            hasError = false;
            subject = new ReplaySubject_ReplaySubject(bufferSize, windowTime, scheduler);
            innerSub = subject.subscribe(this);
            subscription = source.subscribe({
                next: function (value) {
                    subject.next(value);
                },
                error: function (err) {
                    hasError = true;
                    subject.error(err);
                },
                complete: function () {
                    isComplete = true;
                    subscription = undefined;
                    subject.complete();
                },
            });
            if (isComplete) {
                subscription = undefined;
            }
        }
        else {
            innerSub = subject.subscribe(this);
        }
        this.add(function () {
            refCount--;
            innerSub.unsubscribe();
            innerSub = undefined;
            if (subscription && !isComplete && useRefCount && refCount === 0) {
                subscription.unsubscribe();
                subscription = undefined;
                subject = undefined;
            }
        });
    };
}
//# sourceMappingURL=shareReplay.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/single.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */



function single(predicate) {
    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
}
var SingleOperator = /*@__PURE__*/ (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new single_SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
var single_SingleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.seenValue = false;
        _this.index = 0;
        return _this;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=single.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/skip.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function skip(count) {
    return function (source) { return source.lift(new SkipOperator(count)); };
}
var SkipOperator = /*@__PURE__*/ (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new skip_SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
var skip_SkipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=skip.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/skipLast.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */



function skipLast(count) {
    return function (source) { return source.lift(new skipLast_SkipLastOperator(count)); };
}
var skipLast_SkipLastOperator = /*@__PURE__*/ (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            return source.subscribe(new Subscriber_Subscriber(subscriber));
        }
        else {
            return source.subscribe(new skipLast_SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
var skipLast_SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=skipLast.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/skipUntil.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function skipUntil(notifier) {
    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
}
var SkipUntilOperator = /*@__PURE__*/ (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (destination, source) {
        return source.subscribe(new skipUntil_SkipUntilSubscriber(destination, this.notifier));
    };
    return SkipUntilOperator;
}());
var skipUntil_SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(_this);
        _this.add(innerSubscriber);
        _this.innerSubscription = innerSubscriber;
        var innerSubscription = innerSubscribe(notifier, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            _this.add(innerSubscription);
            _this.innerSubscription = innerSubscription;
        }
        return _this;
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function () {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
    };
    return SkipUntilSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=skipUntil.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/skipWhile.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function skipWhile(predicate) {
    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
}
var SkipWhileOperator = /*@__PURE__*/ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new skipWhile_SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
var skipWhile_SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=skipWhile.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/startWith.js
/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */


function startWith() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        array[_i] = arguments[_i];
    }
    var scheduler = array[array.length - 1];
    if (isScheduler(scheduler)) {
        array.pop();
        return function (source) { return concat(array, source, scheduler); };
    }
    else {
        return function (source) { return concat(array, source); };
    }
}
//# sourceMappingURL=startWith.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js
/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */




var SubscribeOnObservable_SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) {
            delayTime = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!isNumeric(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap;
        }
        return _this;
    }
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) {
            delay = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable_Observable));

//# sourceMappingURL=SubscribeOnObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/subscribeOn.js
/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */

function subscribeOn(scheduler, delay) {
    if (delay === void 0) {
        delay = 0;
    }
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new subscribeOn_SubscribeOnOperator(scheduler, delay));
    };
}
var subscribeOn_SubscribeOnOperator = /*@__PURE__*/ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable_SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());
//# sourceMappingURL=subscribeOn.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMap.js
/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */




function switchMap(project, resultSelector) {
    if (typeof resultSelector === 'function') {
        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
    }
    return function (source) { return source.lift(new SwitchMapOperator(project)); };
}
var SwitchMapOperator = /*@__PURE__*/ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new switchMap_SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
var switchMap_SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        var innerSubscriber = new innerSubscribe_SimpleInnerSubscriber(this);
        var destination = this.destination;
        destination.add(innerSubscriber);
        this.innerSubscription = innerSubscribe(result, innerSubscriber);
        if (this.innerSubscription !== innerSubscriber) {
            destination.add(this.innerSubscription);
        }
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
        this.unsubscribe();
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = undefined;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function () {
        this.innerSubscription = undefined;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=switchMap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchAll.js
/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */


function switchAll() {
    return switchMap(identity);
}
//# sourceMappingURL=switchAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/switchMapTo.js
/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */

function switchMapTo(innerObservable, resultSelector) {
    return resultSelector ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
}
//# sourceMappingURL=switchMapTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeUntil.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


function takeUntil(notifier) {
    return function (source) { return source.lift(new takeUntil_TakeUntilOperator(notifier)); };
}
var takeUntil_TakeUntilOperator = /*@__PURE__*/ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new takeUntil_TakeUntilSubscriber(subscriber);
        var notifierSubscription = innerSubscribe(this.notifier, new innerSubscribe_SimpleInnerSubscriber(takeUntilSubscriber));
        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
var takeUntil_TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.seenValue = false;
        return _this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function () {
        this.seenValue = true;
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
    };
    return TakeUntilSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=takeUntil.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/takeWhile.js
/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */


function takeWhile(predicate, inclusive) {
    if (inclusive === void 0) {
        inclusive = false;
    }
    return function (source) {
        return source.lift(new TakeWhileOperator(predicate, inclusive));
    };
}
var TakeWhileOperator = /*@__PURE__*/ (function () {
    function TakeWhileOperator(predicate, inclusive) {
        this.predicate = predicate;
        this.inclusive = inclusive;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new takeWhile_TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    };
    return TakeWhileOperator;
}());
var takeWhile_TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate, inclusive) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.inclusive = inclusive;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            if (this.inclusive) {
                destination.next(value);
            }
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=takeWhile.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/tap.js
/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */




function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
var DoOperator = /*@__PURE__*/ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new tap_TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
var tap_TapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = noop;
        _this._tapError = noop;
        _this._tapComplete = noop;
        _this._tapError = error || noop;
        _this._tapComplete = complete || noop;
        if (isFunction(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || noop;
            _this._tapError = observerOrNext.error || noop;
            _this._tapComplete = observerOrNext.complete || noop;
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=tap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throttle.js
/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */


var defaultThrottleConfig = {
    leading: true,
    trailing: false
};
function throttle(durationSelector, config) {
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing)); };
}
var ThrottleOperator = /*@__PURE__*/ (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new throttle_ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
var throttle_ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = undefined;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (!!duration) {
            this.add(this._throttled = innerSubscribe(duration, new innerSubscribe_SimpleInnerSubscriber(this)));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = undefined;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function () {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=throttle.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/throttleTime.js
/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */




function throttleTime(duration, scheduler, config) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    if (config === void 0) {
        config = defaultThrottleConfig;
    }
    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
}
var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new throttleTime_ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
var throttleTime_ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(throttleTime_dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
            else if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber_Subscriber));
function throttleTime_dispatchNext(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeInterval.js
/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */




function timeInterval(scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return function (source) {
        return defer(function () {
            return source.pipe(scan(function (_a, value) {
                var current = _a.current;
                return ({ value: value, current: scheduler.now(), last: current });
            }, { current: scheduler.now(), value: undefined, last: undefined }), map(function (_a) {
                var current = _a.current, last = _a.last, value = _a.value;
                return new TimeInterval(value, current - last);
            }));
        });
    };
}
var TimeInterval = /*@__PURE__*/ (function () {
    function TimeInterval(value, interval) {
        this.value = value;
        this.interval = interval;
    }
    return TimeInterval;
}());

//# sourceMappingURL=timeInterval.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeoutWith.js
/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_innerSubscribe PURE_IMPORTS_END */




function timeoutWith(due, withObservable, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return function (source) {
        var absoluteTimeout = isDate(due);
        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
var TimeoutWithOperator = /*@__PURE__*/ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new timeoutWith_TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
var timeoutWith_TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(innerSubscribe(withObservable, new innerSubscribe_SimpleInnerSubscriber(subscriber)));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = undefined;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=timeoutWith.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timeout.js
/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */




function timeout(due, scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return timeoutWith(due, throwError(new TimeoutError()), scheduler);
}
//# sourceMappingURL=timeout.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/timestamp.js
/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */


function timestamp(scheduler) {
    if (scheduler === void 0) {
        scheduler = async_async;
    }
    return map(function (value) { return new Timestamp(value, scheduler.now()); });
}
var Timestamp = /*@__PURE__*/ (function () {
    function Timestamp(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
    return Timestamp;
}());

//# sourceMappingURL=timestamp.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/toArray.js
/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

function toArrayReducer(arr, item, index) {
    if (index === 0) {
        return [item];
    }
    arr.push(item);
    return arr;
}
function toArray() {
    return reduce(toArrayReducer, []);
}
//# sourceMappingURL=toArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/window.js
/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */



function window_window(windowBoundaries) {
    return function windowOperatorFunction(source) {
        return source.lift(new window_WindowOperator(windowBoundaries));
    };
}
var window_WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new window_WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(innerSubscribe(this.windowBoundaries, new innerSubscribe_SimpleInnerSubscriber(windowSubscriber)));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
var window_WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.window = new Subject_Subject();
        destination.next(_this.window);
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function () {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function () {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject_Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(innerSubscribe_SimpleOuterSubscriber));
//# sourceMappingURL=window.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/windowCount.js
/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */



function windowCount(windowSize, startWindowEvery) {
    if (startWindowEvery === void 0) {
        startWindowEvery = 0;
    }
    return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    };
}
var WindowCountOperator = /*@__PURE__*/ (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new windowCount_WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
var windowCount_WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new Subject_Subject()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject_Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber_Subscriber));
//# sourceMappingURL=windowCount.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/windowTime.js
/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */






function windowTime_windowTime(windowTimeSpan) {
    var scheduler = async_async;
    var windowCreationInterval = null;
    var maxWindowSize = Number.POSITIVE_INFINITY;
    if (isScheduler(arguments[3])) {
        scheduler = arguments[3];
    }
    if (isScheduler(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (isNumeric(arguments[2])) {
        maxWindowSize = Number(arguments[2]);
    }
    if (isScheduler(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (isNumeric(arguments[1])) {
        windowCreationInterval = Number(arguments[1]);
    }
    return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    };
}
var WindowTimeOperator = /*@__PURE__*/ (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new windowTime_WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var windowTime_CountedSubject = /*@__PURE__*/ (function (_super) {
    __extends(CountedSubject, _super);
    function CountedSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject_Subject));
var windowTime_WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: _this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
        return _this;
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new windowTime_CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber_Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/windowToggle.js
/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */





function windowToggle(openings, closingSelector) {
    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
}
var WindowToggleOperator = /*@__PURE__*/ (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new windowToggle_WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
var windowToggle_WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
        return _this;
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingNotifier = void 0;
            try {
                var closingSelector = this.closingSelector;
                closingNotifier = closingSelector(innerValue);
            }
            catch (e) {
                return this.error(e);
            }
            var window_1 = new Subject_Subject();
            var subscription = new Subscription_Subscription();
            var context_4 = { window: window_1, subscription: subscription };
            this.contexts.push(context_4);
            var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
            if (innerSubscription.closed) {
                this.closeWindow(this.contexts.length - 1);
            }
            else {
                innerSubscription.context = context_4;
                subscription.add(innerSubscription);
            }
            this.destination.next(window_1);
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber_OuterSubscriber));
//# sourceMappingURL=windowToggle.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/windowWhen.js
/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */




function windowWhen(closingSelector) {
    return function windowWhenOperatorFunction(source) {
        return source.lift(new windowWhen_WindowOperator(closingSelector));
    };
}
var windowWhen_WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new windowWhen_WindowSubscriber(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
var windowWhen_WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.closingSelector = closingSelector;
        _this.openWindow();
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) {
            innerSub = null;
        }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject_Subject();
        this.destination.next(window);
        var closingNotifier;
        try {
            var closingSelector = this.closingSelector;
            closingNotifier = closingSelector();
        }
        catch (e) {
            this.destination.error(e);
            this.window.error(e);
            return;
        }
        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
    };
    return WindowSubscriber;
}(OuterSubscriber_OuterSubscriber));
//# sourceMappingURL=windowWhen.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js
/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */



function withLatestFrom() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (source) {
        var project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        var observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
var WithLatestFromOperator = /*@__PURE__*/ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new withLatestFrom_WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
var withLatestFrom_WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add(subscribeToResult(_this, observable, undefined, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber_OuterSubscriber));
//# sourceMappingURL=withLatestFrom.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/zip.js
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

function zip_zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    return function zipOperatorFunction(source) {
        return source.lift.call(zip.apply(void 0, [source].concat(observables)));
    };
}
//# sourceMappingURL=zip.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/zipAll.js
/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

function zipAll(project) {
    return function (source) { return source.lift(new ZipOperator(project)); };
}
//# sourceMappingURL=zipAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/index.js
/** PURE_IMPORTS_START  PURE_IMPORTS_END */







































































































//# sourceMappingURL=index.js.map

// CONCATENATED MODULE: ./src/core/state/channel.js

/**
 * @returns {String}
 */

function generateUUID() {
  var d = new Date().getTime();
  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
  return uuid;
}
/**
 * @returns {ReplaySubject}
 */


var channel_createChannel = function createChannel() {
  var channel = new ReplaySubject_ReplaySubject(1);

  var _nextFromSuperClass = channel.next.bind(channel);
  /**
   * @param {Object} value
   */


  channel.next = function (value) {
    if (!value.uuid) {
      value.uuid = generateUUID();
    }

    if (!value.time) {
      value.time = new Date().getTime();
    }

    _nextFromSuperClass(value);
  };
  /**
   * @returns  {Boolean}
   */


  channel.hasObservers = function () {
    if (this.closed) {
      throw new Error();
    }

    return this.observers.length > 0;
  };

  channel.complete = function () {};
  /**
   * @param  {any} error
   */


  channel.error = function (error) {
    this.observers.forEach(function (o) {
      o.isStopped = false;
      o.onError(error);
    });
  };
  /**
   * @param  {Number} index
   */


  channel.unsubscribe = function (index) {
    this.observers.splice(index, 1);
  };

  channel.unsubscribeAll = function () {
    this.observers.splice(0, this.observers.length);
  };

  channel.clean = function () {
    this._events = [];
    this.observers = [];
  };

  channel.dispose = function () {
    this.unsubscribe();
  };

  return channel;
};

/* harmony default export */ var state_channel = (channel_createChannel);
// CONCATENATED MODULE: ./src/core/state/subscriptor.js
function subscriptor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function subscriptor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function subscriptor_createClass(Constructor, protoProps, staticProps) { if (protoProps) subscriptor_defineProperties(Constructor.prototype, protoProps); if (staticProps) subscriptor_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
 * @typedef {import('./channel')} createChannel
 */

/**
 * 
 *  @class Subscriptor
 */

var subscriptor_Subscriptor = /*#__PURE__*/function () {
  /**
   * @param  {HTMLElement} node
   */
  function Subscriptor(node) {
    subscriptor_classCallCheck(this, Subscriptor);

    this.node = node;
    this.subscriptions = [];
    this.publications = new Subscription_Subscription();
  }
  /**
   * @param  {createChannel} channel
   * @returns {Boolean}
   */


  subscriptor_createClass(Subscriptor, [{
    key: "hasSubscription",
    value: function hasSubscription(channel) {
      return this.subscriptions.filter(function (d) {
        return d.channel === channel;
      }).length > 0;
    }
    /**
     * Publish an event.sss
     *
     * @param  {Event} event
     */

  }, {
    key: "publish",
    value: function publish(event) {
      this.publications.add(event);
    }
    /**
     * @param  {createChannel} channel
     * @param  {Function}  fn       Callback function to run when a value from a channel changed
     * @return  {Function} 
     */

  }, {
    key: "makeCallbackWithNoReplay",
    value: function makeCallbackWithNoReplay(channel, fn) {
      if (!fn.node.intervals) {
        fn.node.intervals = [];
      }

      if (!fn.node.ids) {
        fn.node.ids = [];
      }

      var getTimeFromNode = function getTimeFromNode(node) {
        return node.intervals[channel.name];
      };

      var setTimeForNode = function setTimeForNode(node, time) {
        node.intervals[channel.name] = time;
      };

      var getTimeFromChannel = function getTimeFromChannel(channel) {
        return channel._events.length > 0 ? channel._events[0].time : 1;
      };

      var getIdFromNode = function getIdFromNode(node) {
        return node.ids[channel.name];
      };

      var setIdForNode = function setIdForNode(node, id) {
        node.ids[channel.name] = id;
      };

      var getIdFromChannel = function getIdFromChannel(channel) {
        return channel._events.length > 0 ? channel._events[0].uuid : null;
      };

      var fnReplayOff = function () {
        var lastInterval = getTimeFromChannel(channel);
        var nodeInterval = getTimeFromNode(fn.node);
        var lastId = getIdFromChannel(channel);
        var nodeId = getIdFromNode(fn.node);

        if (!nodeInterval || nodeInterval < lastInterval || nodeInterval === lastInterval && nodeId != lastId) {
          setTimeForNode(fn.node, lastInterval);
          setIdForNode(fn.node, lastId);
          return fn.apply(this, arguments);
        }

        setTimeForNode(fn.node, lastInterval);
      }.bind(this);

      fnReplayOff.node = fn.node;
      return fnReplayOff;
    }
    /**
     * Subscribe to a channel.
     *
     * @param  {Channel}   channel  Channel to subscribe
     * @param  {Function}  fn       Callback function to run when a value from a channel changed
     */

  }, {
    key: "subscribe",
    value: function subscribe(channel, fn, previousState, bind) {
      if (!this.hasSubscription(channel)) {
        var callback = fn;
        var subscription;

        if (previousState === false) {
          callback = this.makeCallbackWithNoReplay(channel, fn);
        }

        var pos = this._firstInstanceOfObserver(callback.node, channel);

        if (pos === -1) {
          subscription = channel.subscribe(callback);
          pos = channel.observers.length - 1;
        } else {
          subscription = channel.observers[pos];
        }

        subscription.node = callback.node;
        var subscriptionDetail = {
          channel: channel,
          bind: bind,
          observer: subscription,
          subscription: subscription
        };
        this.subscriptions.push(subscriptionDetail);
      }
    }
    /**
     * Remove all active subscriptions.
     * 
     * @param {Boolean}
     */

  }, {
    key: "unsubscribe",
    value: function unsubscribe(cleanPrivateChannels) {
      this.subscriptions.forEach(function (_ref) {
        var channel = _ref.channel,
            observer = _ref.observer;
        var index = channel.observers.indexOf(observer);

        if (index >= 0) {
          if (cleanPrivateChannels === true || !channel.name.match(/\b__bridge_/)) {
            channel.unsubscribe(index);
          }
        }
      });
      this.publications.unsubscribe();
    }
    /**
     * Returns the position of the first occurrence of the observer's node in the channel.
     * If the node has none observer registered to the channel, it returns -1.
     *
     * @param {HTMLElement} node
     * @param {createChannel} channel
     */

  }, {
    key: "_firstInstanceOfObserver",
    value: function _firstInstanceOfObserver(node, channel) {
      return channel.observers.findIndex(function (obs) {
        return obs.node === node;
      });
    }
  }]);

  return Subscriptor;
}();


// CONCATENATED MODULE: ./src/core/state/index.js


// CONCATENATED MODULE: ./src/core/adapter/polymer-adapter.js
function polymer_adapter_typeof(obj) { "@babel/helpers - typeof"; return polymer_adapter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, polymer_adapter_typeof(obj); }

function polymer_adapter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function polymer_adapter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function polymer_adapter_createClass(Constructor, protoProps, staticProps) { if (protoProps) polymer_adapter_defineProperties(Constructor.prototype, protoProps); if (staticProps) polymer_adapter_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var _dashToCamelCase = function _dashToCamelCase(input) {
  return input.toLowerCase().replace(/-(.)/g, function (match, group1) {
    return group1.toUpperCase();
  });
};

var PolymerAdapter = /*#__PURE__*/function () {
  function PolymerAdapter(componentConnector) {
    polymer_adapter_classCallCheck(this, PolymerAdapter);

    this.componentConnector = componentConnector;
  }

  polymer_adapter_createClass(PolymerAdapter, [{
    key: "isUnresolved",
    value: function isUnresolved(node) {
      var isCustomElement = node.tagName.includes('-');

      var isPolymerElement = this._isPolymerElement(node);

      return isCustomElement && !isPolymerElement;
    }
  }, {
    key: "isInstance",
    value: function isInstance(node) {
      var isCustomElement = node.tagName.includes('-');
      return isCustomElement && !this.isUnresolved(node);
    }
    /**
     * Returns true if the event has reached the node that is listening the event
     *
     * @param {Event} event
     */

  }, {
    key: "isEventAtTarget",
    value: function isEventAtTarget(event) {
      var atTarget;

      if (
      /** For Polymer 2 **/
      Polymer && Polymer.Settings && (Polymer.Settings.hasShadow === false ||
      /** For Polymer 2 **/
      Polymer.Settings.useShadow === false)) {
        var normalizedEvent = Polymer.dom(event);
        atTarget = normalizedEvent.localTarget === event.currentTarget;
      } else {
        var AT_TARGET_VALUE = Event.AT_TARGET || Event.prototype.AT_TARGET;
        atTarget = event.eventPhase === AT_TARGET_VALUE;
      }

      return atTarget;
    }
  }, {
    key: "dispatchActionFunction",
    value: function dispatchActionFunction(evt, target, method) {
      var propertyName = this._getPropertyChangedName(evt.type);

      var payload;

      if (propertyName && evt.detail && evt.detail.hasOwnProperty('value')) {
        if (Polymer && Polymer.dom(evt).rootTarget) {
          payload = Polymer.dom(evt).rootTarget[propertyName];
        } else {
          payload = evt.detail.value;
        }
      } else {
        payload = evt.detail;
      }

      if (typeof method === 'function') {
        method(payload);
      } else {
        target[method](payload);
      }
    }
  }, {
    key: "dispatchActionProperty",
    value: function dispatchActionProperty(evt, target, property) {
      var info;

      var data = this._parseActionInEvent(evt, property, target);

      if (target && target.constructor._finalize) {
        var isProperty = target.constructor.properties[data.property];

        if (isProperty) {
          target[data.property] = data.value;
          return;
        } else {
          return this._handleAttribute(target, data);
        }
      } //check if target is an instance of Polymer Element to check if is a polymer 2 element


      if (target && target.getPropertyInfo || Polymer.Element !== undefined && target instanceof Polymer.Element === false) {
        if (target.getPropertyInfo) {
          info = target.getPropertyInfo(data.property);
        } else {
          info = this._getTargetProperties(target)[data.property];
        }
        /* istanbul ignore else */


        if (info && info.defined && !info.readOnly && !info.computed) {
          return target.set(data.path, data.value);
        }
      } //check if target is an instance of Polymer Element to check if is a polymer 2 element


      if (target && target.getPropertyInfo === undefined || Polymer.Element !== undefined && target instanceof Polymer.Element === false) {
        info = this._getTargetProperties(target) !== undefined ? this._getTargetProperties(target)[data.property] : undefined;

        if (info && !info.readOnly && !info.computed) {
          return target.set(data.path, data.value);
        }
      }

      return this._handleAttribute(target, data);
    }
  }, {
    key: "processFirstTimeConnections",
    value: function processFirstTimeConnections(node, connections) {
      if (!node || !connections) {
        return;
      }

      if (node.__isCellsConnected) {
        return;
      }

      if (connections["in"]) {
        for (var action in connections["in"]) {
          if (connections["in"].hasOwnProperty(action)) {
            if (this.componentConnector.manager.get(action)._events[0]) {
              if (connections.ignoreAttr) {
                connections.ignoreAttr.push(connections["in"][action].bind);
              } else {
                connections.ignoreAttr = [connections["in"][action].bind];
              }
            }
          }
        }
      } // iterate over all out channels associated to
      // a change property event and force the event triggering
      // for the first time the component is connected to a channel


      if (connections.out) {
        for (var _action in connections.out) {
          if (connections.out.hasOwnProperty(_action)) {
            var attrName = this._getPropertyChangedName(connections.out[_action].bind);

            var polymerVersion = this._whichPolymerVersion(node);

            if (polymerVersion === 2) {
              if (attrName && node.__data && !this.componentConnector.manager.get(_action)._events[0]) {
                if (node && node._hasReadOnlyEffect) {
                  if (!node._hasReadOnlyEffect(attrName) && !node._hasComputedEffect(attrName)) {
                    var oldValue = node[attrName];
                    node.__data[attrName] = undefined;
                    node[attrName] = oldValue;
                  }
                }
              }
            } else {
              if (attrName && node.__data__ && !this.componentConnector.get(_action)._events[0]) {
                if (node && node.getPropertyInfo) {
                  var info = node.getPropertyInfo(attrName);

                  if (info.defined && !info.readOnly && !info.computed) {
                    var _oldValue = node[attrName]; // remove polymer internal current value to trigger model changes

                    node.__data__[attrName] = undefined;
                    node[attrName] = _oldValue;
                  }
                }
              }
            }
          }
        }
      }

      node.__isCellsConnected = true;
    }
    /**
     * Return the version of Polymer instance if the node is a Polymer element.
     * Return -1 if if the node is not a Polymer element.
     *
     * @param {Element} node
     */

  }, {
    key: "_whichPolymerVersion",
    value: function _whichPolymerVersion(node) {
      var version = -1;

      var Noop = function Noop() {};

      var _ref = window.Polymer || {},
          _ref$Element = _ref.Element,
          Element = _ref$Element === void 0 ? Noop : _ref$Element,
          _ref$ElementMixin = _ref.ElementMixin,
          ElementMixin = _ref$ElementMixin === void 0 ? Noop : _ref$ElementMixin,
          _ref$LegacyElementMix = _ref.LegacyElementMixin,
          LegacyElementMixin = _ref$LegacyElementMix === void 0 ? Noop : _ref$LegacyElementMix;

      var isPolymer1 = node.__isPolymerInstance__ === true;
      var isPolymer2 = node instanceof Element || node instanceof ElementMixin || node instanceof LegacyElementMixin || node.is !== undefined && node.ready !== undefined && node.notifyPath !== undefined;

      if (isPolymer2) {
        version = 2;
      } else if (isPolymer1) {
        version = 1;
      }

      return version;
    }
    /**
     * Return true if the node is instance of a Polymer element, otherwise return false.
     *
     * @param {Element} node
     */

  }, {
    key: "_isPolymerElement",
    value: function _isPolymerElement(node) {
      return this._whichPolymerVersion(node) > 0;
    }
  }, {
    key: "_getTargetProperties",
    value: function _getTargetProperties(target) {
      var props;

      if (target.constructor.config) {
        props = target.constructor.config.properties;
      } else if (target.constructor._properties) {
        props = target.constructor._properties;
      }

      return props;
    }
  }, {
    key: "_handleAttribute",
    value: function _handleAttribute(target, _ref2) {
      var value = _ref2.value,
          path = _ref2.path;

      // check if target property is a boolean one and current value is false.
      // it expects to remove the attribute (as it's a boolean one)
      if (typeof value === 'boolean' && !value) {
        return target.removeAttribute(path);
      }

      return target.setAttribute(path, value);
    }
  }, {
    key: "_getPropertyChangedName",
    value: function _getPropertyChangedName(name) {
      var propertyName;
      var EVENT_CHANGED = '-changed';

      if (name.indexOf(EVENT_CHANGED, name.length - EVENT_CHANGED.length) !== -1) {
        propertyName = name.slice(0, -EVENT_CHANGED.length);
        propertyName = _dashToCamelCase(propertyName);
      }

      return propertyName;
    }
  }, {
    key: "_parseActionInEvent",
    value: function _parseActionInEvent(evt, targetPath, target) {
      var path;
      var value; // Check if event is because of property changed.

      var propertyName = this._getPropertyChangedName(evt.type);

      if (propertyName && evt.detail && evt.detail.hasOwnProperty('value')) {
        value = evt.detail.value;
        targetPath = targetPath || propertyName;

        if (evt.detail.path) {
          path = evt.detail.path.replace(propertyName, targetPath);
        } else {
          path = targetPath;
        }
      } else {
        path = targetPath;
        value = evt.detail;
      }

      if (target !== undefined && target.is === undefined && polymer_adapter_typeof(value) === 'object') {
        if (Polymer && Polymer.Element === undefined) {
          value = JSON.stringify(value);
        } else {
          /* istanbul ignore else */
          if ((Polymer && target instanceof Polymer.Element) === false) {
            value = JSON.stringify(value);
          }
        }
      }

      return {
        path: path,
        value: value,
        property: targetPath
      };
    }
  }]);

  return PolymerAdapter;
}();


// CONCATENATED MODULE: ./src/core/adapter/lit-element-adapter.js
function lit_element_adapter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function lit_element_adapter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function lit_element_adapter_createClass(Constructor, protoProps, staticProps) { if (protoProps) lit_element_adapter_defineProperties(Constructor.prototype, protoProps); if (staticProps) lit_element_adapter_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var lit_element_adapter_dashToCamelCase = function _dashToCamelCase(input) {
  return input.toLowerCase().replace(/-(.)/g, function (match, group1) {
    return group1.toUpperCase();
  });
};

var lit_element_adapter_LitElementAdapter = /*#__PURE__*/function () {
  function LitElementAdapter(componentConnector) {
    var _this = this;

    lit_element_adapter_classCallCheck(this, LitElementAdapter);

    this._parseActionInEvent = function (evt, targetPath, target) {
      // Check if event is because of property changed.
      var propertyName = _this._getProperyChangedName(evt.type);

      var value;
      var path;

      if (propertyName && evt.detail && evt.detail.hasOwnProperty('value')) {
        value = evt.detail.value;
        targetPath = targetPath || propertyName;

        if (evt.detail.path) {
          path = evt.detail.path.replace(propertyName, targetPath);
        } else {
          path = targetPath;
        }
      } else {
        path = targetPath;
        value = evt.detail;
      }

      return {
        path: path,
        value: value,
        property: targetPath
      };
    };

    this.componentConnector = componentConnector;
  }

  lit_element_adapter_createClass(LitElementAdapter, [{
    key: "isUnresolved",
    value: function isUnresolved(node) {
      var isCustomElement = node.tagName.includes('-');
      var resolved = node.updateComplete instanceof Promise && typeof node.render === 'function';
      return isCustomElement && !resolved;
    }
  }, {
    key: "isInstance",
    value: function isInstance(node) {
      var isCustomElement = node.tagName.includes('-');
      return isCustomElement && !this.isUnresolved(node);
    }
    /**
     * Returns true if the event has reached the node that is listening the event
     *
     * @param {Event} event
     */

  }, {
    key: "isEventAtTarget",
    value: function isEventAtTarget(event) {
      var AT_TARGET_VALUE = Event.AT_TARGET || Event.prototype.AT_TARGET;
      return event.eventPhase === AT_TARGET_VALUE;
    }
  }, {
    key: "dispatchActionFunction",
    value: function dispatchActionFunction(evt, target, method) {
      var payload = evt.detail;

      if (typeof method === 'function') {
        method(payload);
      } else {
        target[method](payload);
      }
    }
  }, {
    key: "dispatchActionProperty",
    value: function dispatchActionProperty(evt, target, property) {
      var data = this._parseActionInEvent(evt, property, target);

      if (!attributeWhiteList.includes(property)) {
        target[property] = data.value;
      } else {
        setAttribute(target, property, data.value);
      }
    }
  }, {
    key: "processFirstTimeConnections",
    value: function processFirstTimeConnections(node, connections) {
      if (!node || !connections) {
        return;
      }

      if (node.__isCellsConnected) {
        return;
      }
      /* istanbul ignore else */


      if (connections["in"]) {
        for (var action in connections["in"]) {
          if (connections["in"].hasOwnProperty(action)) {
            /* istanbul ignore else */
            if (this.componentConnector.manager.get(action)._events[0]) {
              /* istanbul ignore else */
              if (connections.ignoreAttr) {
                connections.ignoreAttr.push(connections["in"][action].bind);
              } else {
                connections.ignoreAttr = [connections["in"][action].bind];
              }
            }
          }
        }
      }

      node.__isCellsConnected = true;
    }
  }, {
    key: "_getProperyChangedName",
    value: function _getProperyChangedName(name) {
      var propertyName;
      var EVENT_CHANGED = '-changed';

      if (name.indexOf(EVENT_CHANGED, name.length - EVENT_CHANGED.length) !== -1) {
        propertyName = name.slice(0, -EVENT_CHANGED.length);
        propertyName = lit_element_adapter_dashToCamelCase(propertyName);
      }

      return propertyName;
    }
  }]);

  return LitElementAdapter;
}();


// CONCATENATED MODULE: ./src/core/adapter/vanilla-adapter.js
function vanilla_adapter_typeof(obj) { "@babel/helpers - typeof"; return vanilla_adapter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, vanilla_adapter_typeof(obj); }

function vanilla_adapter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function vanilla_adapter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function vanilla_adapter_createClass(Constructor, protoProps, staticProps) { if (protoProps) vanilla_adapter_defineProperties(Constructor.prototype, protoProps); if (staticProps) vanilla_adapter_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var vanilla_adapter_dashToCamelCase = function _dashToCamelCase(input) {
  return input.toLowerCase().replace(/-(.)/g, function (match, group1) {
    return group1.toUpperCase();
  });
};

var VanillaAdapter = /*#__PURE__*/function () {
  function VanillaAdapter(componentConnector) {
    vanilla_adapter_classCallCheck(this, VanillaAdapter);

    this.componentConnector = componentConnector;
  }

  vanilla_adapter_createClass(VanillaAdapter, [{
    key: "isUnresolved",
    value: function isUnresolved(node) {
      return false;
    }
  }, {
    key: "isInstance",
    value: function isInstance(node) {
      var isCustomElement = node.tagName.includes('-');
      return Boolean(!isCustomElement || customElements.get(node.tagName.toLowerCase()));
    }
    /**
     * Returns true if the event has reached the node that is listening the event
     *
     * @param {Event} event
     */

  }, {
    key: "isEventAtTarget",
    value: function isEventAtTarget(event) {
      return event.eventPhase === Event.AT_TARGET;
    }
  }, {
    key: "dispatchActionFunction",
    value: function dispatchActionFunction(evt, target, method) {
      var payload = evt.detail;

      if (typeof method === 'function') {
        method(payload);
      } else {
        target[method](payload);
      }
    }
  }, {
    key: "dispatchActionProperty",
    value: function dispatchActionProperty(evt, target, property) {
      var data = this._parseActionInEvent(evt, property, target);

      return target[data.property] = data.value;
    }
  }, {
    key: "processFirstTimeConnections",
    value: function processFirstTimeConnections(node, connections) {
      if (!node || !connections) {
        return;
      }

      if (node.__isCellsConnected) {
        return;
      }
      /* istanbul ignore else */


      if (connections["in"]) {
        for (var action in connections["in"]) {
          if (connections["in"].hasOwnProperty(action)) {
            /* istanbul ignore else */
            if (this.componentConnector.manager.get(action)._events[0]) {
              /* istanbul ignore else */
              if (connections.ignoreAttr) {
                connections.ignoreAttr.push(connections["in"][action].bind);
              } else {
                connections.ignoreAttr = [connections["in"][action].bind];
              }
            }
          }
        }
      }

      node.__isCellsConnected = true;
    }
  }, {
    key: "_getProperyChangedName",
    value: function _getProperyChangedName(name) {
      var propertyName;
      var EVENT_CHANGED = '-changed';

      if (name.indexOf(EVENT_CHANGED, name.length - EVENT_CHANGED.length) !== -1) {
        propertyName = name.slice(0, -EVENT_CHANGED.length);
        propertyName = vanilla_adapter_dashToCamelCase(propertyName);
      }

      return propertyName;
    }
  }, {
    key: "_parseActionInEvent",
    value: function _parseActionInEvent(evt, targetPath, target) {
      // Check if event is because of property changed.
      var propertyName = this._getProperyChangedName(evt.type);

      var value;
      var path;

      if (propertyName && evt.detail && evt.detail.hasOwnProperty('value')) {
        value = evt.detail.value;
        targetPath = targetPath || propertyName;

        if (evt.detail.path) {
          path = evt.detail.path.replace(propertyName, targetPath);
        } else {
          path = targetPath;
        }
      } else {
        path = targetPath;
        value = evt.detail;
      }

      if (target !== undefined && target.is === undefined && vanilla_adapter_typeof(value) === 'object') {
        value = JSON.stringify(value);
      }

      return {
        path: path,
        value: value,
        property: targetPath
      };
    }
  }]);

  return VanillaAdapter;
}();


// CONCATENATED MODULE: ./src/core/adapter/adapter-resolver.js
function adapter_resolver_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function adapter_resolver_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function adapter_resolver_createClass(Constructor, protoProps, staticProps) { if (protoProps) adapter_resolver_defineProperties(Constructor.prototype, protoProps); if (staticProps) adapter_resolver_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }




var POLYMER_ADAPTER = 0;
var LIT_ADAPTER = 1;
var VANILLA_ADAPTER = 2;

var adapter_resolver_AdapterResolver = /*#__PURE__*/function () {
  function AdapterResolver(componentConnector) {
    adapter_resolver_classCallCheck(this, AdapterResolver);

    this.adapters = new Array(2);
    this.adapters[POLYMER_ADAPTER] = new PolymerAdapter(componentConnector);
    this.adapters[LIT_ADAPTER] = new lit_element_adapter_LitElementAdapter(componentConnector);
    this.adapters[VANILLA_ADAPTER] = new VanillaAdapter(componentConnector);
  }
  /**
   * node: {HTMLElement}
   */


  adapter_resolver_createClass(AdapterResolver, [{
    key: "getNodeAdapter",
    value: function getNodeAdapter(node) {
      return this.adapters.find(function (adapter) {
        return adapter.isInstance(node);
      }) || this.adapters[POLYMER_ADAPTER];
    }
  }, {
    key: "getAdapterByName",
    value: function getAdapterByName(name) {
      var index;

      switch (name) {
        case 'polymer':
          index = POLYMER_ADAPTER;
          break;

        case 'litElement':
          index = LIT_ADAPTER;
          break;

        case 'vanilla':
          index = VANILLA_ADAPTER;
          break;

        default:
          index = POLYMER_ADAPTER;
      }

      return this.adapters[index];
    }
  }, {
    key: "getComponentAdapter",
    value: function getComponentAdapter(component) {
      var render = component.spec && component.spec.render;
      return this.getAdapterByName(render);
    }
  }]);

  return AdapterResolver;
}();


// CONCATENATED MODULE: ./src/core/featureflag/feature-flag-collection.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function feature_flag_collection_slicedToArray(arr, i) { return feature_flag_collection_arrayWithHoles(arr) || feature_flag_collection_iterableToArrayLimit(arr, i) || feature_flag_collection_unsupportedIterableToArray(arr, i) || feature_flag_collection_nonIterableRest(); }

function feature_flag_collection_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function feature_flag_collection_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return feature_flag_collection_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return feature_flag_collection_arrayLikeToArray(o, minLen); }

function feature_flag_collection_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function feature_flag_collection_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function feature_flag_collection_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function feature_flag_collection_extends() { feature_flag_collection_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return feature_flag_collection_extends.apply(this, arguments); }

function feature_flag_collection_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function feature_flag_collection_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function feature_flag_collection_createClass(Constructor, protoProps, staticProps) { if (protoProps) feature_flag_collection_defineProperties(Constructor.prototype, protoProps); if (staticProps) feature_flag_collection_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Feature Identifier
 * @typedef {String} CellsFeatureKey
 */

/**
  * Feature black list
  * @typedef {Array<CellsFeatureKey>} CellsFeatureBlackList
  */

/**
 * Feature object
 * @typedef {Object} CellsFeature
 * @property {*} defaultValue  Default value of feature
 * @property {*} value         Current value of feature
 * @property {CellsFeatureKey} key      Feature identifier
 *
 */

/**
 * Feature Collection
 * @typedef {Object.<CellsFeatureKey, CellsFeature>} CellsFeatureCollection
 */

/**
 * Cells Feature Response
 * @typedef {Object} CellsFeatureResponse
 * @property {CellsFeatureCollection} features
 */

/**
 * Channel name of FeatureFlagCollection. Emit data in this channel when collection of FeatureFlag is updated
 * @constant
 * @type {string}
 */
var BRIDGE_CHANNEL_KEY = '__bridge_ch_featureflag';
/**
 * Name of CustomElement method use to evaluate value of FeatureFlag
 * @constant
 * @type {string}
 */

var BRIDGE_BIND_KEY = 'featureFlagChangedCallback';
/**
 * FeatureFlag last value collection by node
 */

var lastValue = new Map();

var FeatureFlagCollection = /*#__PURE__*/function () {
  function FeatureFlagCollection(bridge) {
    feature_flag_collection_classCallCheck(this, FeatureFlagCollection);

    this._featureCollection = {};
    this._connector = bridge.ComponentConnector;
  }
  /**
   * Deep copy of collection of features flags
   * @property
   */


  feature_flag_collection_createClass(FeatureFlagCollection, [{
    key: "collection",
    get: function get() {
      return JSON.parse(JSON.stringify(this._featureCollection));
    }
    /**
     * Add new feature flag to collection
     * @param {CellsFeature} featureFlag
     */

  }, {
    key: "add",
    value: function add(featureFlag) {
      this._featureCollection[featureFlag.key] = featureFlag;
    }
    /**
     * Get value of feature if is enabled or null is disabled
     * @method
     * @param {CellsFeature} feature   Feature with identifier
     * @returns {*}               Feature value or null if the feature is disabled
     */

  }, {
    key: "value",
    value: function value(_ref) {
      var key = _ref.key,
          defaultValue = _ref.defaultValue,
          _value = _ref.value;
      var _featureCollection = this._featureCollection;

      if (_featureCollection.hasOwnProperty(key) && _featureCollection[key].hasOwnProperty('value')) {
        return _featureCollection[key].value;
      } else if (_featureCollection.hasOwnProperty(key) && _featureCollection[key].hasOwnProperty('defaultValue')) {
        return _featureCollection[key].defaultValue;
      } else if (_value !== undefined) {
        return _value;
      } else {
        return defaultValue;
      }
    }
    /**
     * Extend collection; if feature is registered, overwrite values
     * @method
     * @param {CellsFeatureCollection} featureCollection
     * @returns {FeatureFlagCollection} this
     */

  }, {
    key: "extend",
    value: function extend(featureCollection) {
      feature_flag_collection_extends(this._featureCollection, featureCollection);

      return this._publish();
    }
    /**
     * Register collection of features and add default value of each feature
     * @method
     * @param {CellsFeatureCollection} featureCollection
     * @returns {FeatureFlagCollection} this
     */

  }, {
    key: "register",
    value: function register(featureCollection) {
      var _this = this;

      Object.entries(featureCollection).map(function (_ref2) {
        var _ref3 = feature_flag_collection_slicedToArray(_ref2, 2),
            key = _ref3[0],
            defaultValue = _ref3[1].defaultValue;

        return _defineProperty({}, key, defaultValue);
      }).forEach(function (singleFeatureCollection) {
        return feature_flag_collection_extends(_this._featureCollection, singleFeatureCollection);
      });
      return this._publish();
    }
    /**
     * @method
     * @param {CellsFeatureResponse} featureResponse Response of feature service
     * @returns {FeatureFlagCollection} this
     */

  }, {
    key: "update",
    value: function update(featureResponse) {
      return this.extend(featureResponse.features);
    }
  }, {
    key: "subscribe",
    value: function subscribe(callback) {
      var _this2 = this;

      if (typeof callback === 'function') {
        this._connector.manager.get(BRIDGE_CHANNEL_KEY).subscribe(function () {
          return callback(_this2);
        });
      }

      return this;
    }
    /**
     * @private
     * @returns {FeatureFlagCollection} this
     */

  }, {
    key: "_publish",
    value: function _publish() {
      var channel = this._connector.manager.get(BRIDGE_CHANNEL_KEY);

      channel.next(new CustomEvent(BRIDGE_CHANNEL_KEY, {
        detail: this.collection
      }));
      return this;
    }
  }]);

  return FeatureFlagCollection;
}();


// CONCATENATED MODULE: ./src/core/channel-manager.js
function channel_manager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function channel_manager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function channel_manager_createClass(Constructor, protoProps, staticProps) { if (protoProps) channel_manager_defineProperties(Constructor.prototype, protoProps); if (staticProps) channel_manager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
 * @typedef {import('rxjs/ReplaySubject')} ReplySubject
 */

/**
 * @typedef { ReplySubject } Channel
 */

var channel_manager_ChannelManager = /*#__PURE__*/function () {
  function ChannelManager() {
    channel_manager_classCallCheck(this, ChannelManager);

    this.channels = {}; //*1prototype mixin clone problem
  }
  /**
   * Gets a channel by name.
   *
   * @param  {String} name
   *
   * @return {Channel}
   */


  channel_manager_createClass(ChannelManager, [{
    key: "get",
    value: function get(name) {
      var channel = this.channels[name];

      if (channel == null) {
        channel = this.create(name);
      }

      return channel;
    }
    /**
     * Gets a channel by name.
     *
     * @param  {String} name
     *
     * @return {Channel}
     */

  }, {
    key: "getUnsafe",
    value: function getUnsafe(name) {
      return this.channels[name];
    }
    /**
     * Creates a channel.
     *
     * @param  {String} name Channel name
     *
     * @return {Channel}
     */

  }, {
    key: "create",
    value: function create(name) {
      var channel = state_channel();
      channel.name = name;
      this.channels[name] = channel;
      return channel;
    }
    /**
     * Removes a channel from the collection.
     *
     * @param  {String} name Name of the channel to remove.
     */

  }, {
    key: "remove",
    value: function remove(name) {
      delete this.channels[name];
    }
  }, {
    key: "unregisterAllSubscriptors",
    value: function unregisterAllSubscriptors() {
      this.ComponentConnector.subscriptors.forEach(function (v) {
        v.subscriptions.forEach(function (s) {
          return s.subscription.unsubscribe();
        });
      });
    }
  }, {
    key: "cleanAllChannels",
    value: function cleanAllChannels() {
      for (var channelName in this.channels) {
        if (this.channels.hasOwnProperty(channelName)) {
          this.channels[channelName].clean();
        }
      }
    }
  }, {
    key: "removeAllChannels",
    value: function removeAllChannels() {
      for (var channelName in this.channels) {
        if (this.channels.hasOwnProperty(channelName)) {
          delete this.channels[channelName];
        }
      }
    }
    /**
     * Returns true if there is a channel registered with the given name,
     *
     * @param {String} name Channel name,
     *
     * @return {Boolean}
     */

  }, {
    key: "has",
    value: function has(name) {
      return this.channels[name] != null;
    }
  }]);

  return ChannelManager;
}();
;
// CONCATENATED MODULE: ./src/core/component-connector.js
function component_connector_extends() { component_connector_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return component_connector_extends.apply(this, arguments); }

function component_connector_slicedToArray(arr, i) { return component_connector_arrayWithHoles(arr) || component_connector_iterableToArrayLimit(arr, i) || component_connector_unsupportedIterableToArray(arr, i) || component_connector_nonIterableRest(); }

function component_connector_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function component_connector_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return component_connector_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return component_connector_arrayLikeToArray(o, minLen); }

function component_connector_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function component_connector_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function component_connector_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function component_connector_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function component_connector_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function component_connector_createClass(Constructor, protoProps, staticProps) { if (protoProps) component_connector_defineProperties(Constructor.prototype, protoProps); if (staticProps) component_connector_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }









var component_connector_externalEventsCodes = constants.externalEventsCodes;

var component_connector_ComponentConnector = /*#__PURE__*/function () {
  function ComponentConnector(bridge) {
    component_connector_classCallCheck(this, ComponentConnector);

    this.adapterResolver = new adapter_resolver_AdapterResolver(this);
    this.manager = new channel_manager_ChannelManager();
    this.subscriptors = new Map();
    this.bridgeChannelsPrefix = /__bridge_(?!ch)/;
    this.bridge = bridge;
  }

  component_connector_createClass(ComponentConnector, [{
    key: "getSubscriptor",
    value: function getSubscriptor(node) {
      var subscriptor = this.subscriptors.get(node);

      if (!subscriptor) {
        subscriptor = new subscriptor_Subscriptor(node);
        this.subscriptors.set(node, subscriptor);
      }

      return subscriptor;
    }
    /**
     * Register a component in pubsub
     *
     * @param  {HTMLElement}  node
     * @param  {Object}       connections
     */

  }, {
    key: "registerComponent",
    value: function registerComponent(component) {
      var node = component.node,
          connections = component.connections;
      var adapter = this.adapterResolver.getComponentAdapter(component);

      if (node && connections) {
        this._registerOutConnections(node, connections.out);

        this._registerInConnections(node, connections["in"]);
      }

      adapter.processFirstTimeConnections(node, connections);
    }
    /**
     * Registesr new connections of a node that may have other connections registered previously.
     *
     * @param  {HTMLElement}  node
     * @param  {Object}       connections
     */

  }, {
    key: "progressiveRegisterConnections",
    value: function progressiveRegisterConnections(node, connections) {
      if (node && connections) {
        this._registerOutConnections(node, connections.out);

        this._updateInConnections(node, connections["in"]);
      }
    }
  }, {
    key: "_registerInConnections",
    value: function _registerInConnections(node) {
      var _this = this;

      var inConnections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Object.entries(inConnections).forEach(function (_ref) {
        var _ref2 = component_connector_slicedToArray(_ref, 2),
            channelName = _ref2[0],
            _ref2$ = _ref2[1],
            bindName = _ref2$.bind,
            _ref2$$previousState = _ref2$.previousState,
            previousState = _ref2$$previousState === void 0 ? false : _ref2$$previousState;

        _this.addSubscription(channelName, node, bindName, previousState);
      });
    }
  }, {
    key: "addSubscription",
    value: function addSubscription(channelName, node, bind) {
      var previousState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      var callback = this._wrapCallbackWithNode(node, bind);

      var channel = this.manager.get(channelName); // @TODO ojo!!! CC this.isBridgeChannel(channelName) ? this.manager.getUnsafe(channelName) : this.manager.get(channelName);

      if (channel) {
        var subscriptor = this.getSubscriptor(node);
        subscriptor.subscribe(channel, callback, previousState, bind);
      }
    }
  }, {
    key: "_updateInConnections",
    value: function _updateInConnections(node) {
      var _this2 = this;

      var inConnections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Object.entries(inConnections).forEach(function (_ref3) {
        var _ref4 = component_connector_slicedToArray(_ref3, 2),
            channelName = _ref4[0],
            _ref4$ = _ref4[1],
            bindName = _ref4$.bind,
            _ref4$$previousState = _ref4$.previousState,
            previousState = _ref4$$previousState === void 0 ? false : _ref4$$previousState;

        _this2.updateSubscription(channelName, node, bindName, previousState);
      });
    }
  }, {
    key: "updateSubscription",
    value: function updateSubscription(channelName, node, bind) {
      var previousState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var subscriptor = this.getSubscriptor(node);

      if (this.isActiveBridgeChannel(channelName) || !this.isActiveBridgeChannel(channelName) && !this.hasSubscriptions(subscriptor, channelName)) {
        var channel = this.manager.get(channelName);

        var callback = this._wrapCallbackWithNode(node, bind);

        subscriptor.subscribe(channel, callback, previousState, bind);
      }
    }
  }, {
    key: "_wrapCallbackWithNode",
    value: function _wrapCallbackWithNode(node, bindName) {
      var cb = this.wrapCallback(node, bindName);
      cb.node = node;
      return cb;
    }
  }, {
    key: "wrapCallback",
    value: function wrapCallback(node, bindName) {
      var _this3 = this;

      // TODO: move to utils
      var _idleCallback = function _idleCallback(fn) {
        setTimeout(function () {
          if ('requestIdleCallback' in window) {
            window.requestIdleCallback(fn);
          } else {
            setTimeout(fn, 1);
          }
        }, 100);
      };

      return function (evt) {
        var adapter = _this3.adapterResolver.getNodeAdapter(node);

        var checkDispatchActionType = function checkDispatchActionType(mutations, observerObject) {
          if (adapter.isUnresolved(node)) {
            _idleCallback(checkDispatchActionType);
          } else {
            if (typeof bindName === 'function' || typeof node[bindName] === 'function') {
              adapter.dispatchActionFunction(evt, node, bindName);
            } else {
              adapter.dispatchActionProperty(evt, node, bindName);
            }

            if (observerObject) {
              observerObject.disconnect();
            }
          }
        };

        if (adapter.isUnresolved(node)) {
          var observer = new MutationObserver(checkDispatchActionType);
          var config = {
            attributes: false,
            childList: true,
            characterData: true
          };
          observer.observe(node, config);

          _idleCallback(checkDispatchActionType, 100);
        } else {
          checkDispatchActionType();
        }
      };
    }
  }, {
    key: "_hasPublisher",
    value: function _hasPublisher(_ref5, node, channelName, bindName) {
      var publications = _ref5.publications;
      return Boolean((publications._subscriptions || []).find(function (publication) {
        return publication.node === node && publication.channelName === channelName && publication.eventName === bindName;
      }));
    }
  }, {
    key: "_registerOutConnections",
    value: function _registerOutConnections(node) {
      var _this4 = this;

      var outConnections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Object.entries(outConnections).forEach(function (_ref6) {
        var _ref7 = component_connector_slicedToArray(_ref6, 2),
            channelName = _ref7[0],
            conn = _ref7[1];

        return _this4.addPublication(channelName, node, conn.bind, conn);
      });
    }
  }, {
    key: "addPublication",
    value: function addPublication(channelName, node, bindName, outConnectionDefinition) {
      if (this.isBridgeChannel(channelName)) {
        console.warn("Forbidden operation. You are trying to write to a private channel (".concat(channelName, ")."));
      } else {
        var subscriptor = this.getSubscriptor(node);

        var hasPublisher = this._hasPublisher(subscriptor, node, channelName, bindName);

        if (!hasPublisher) {
          var channel = this.manager.get(channelName);
          subscriptor.publish(this.wrapEvent(node, bindName, channel, outConnectionDefinition));
        }
      }
    }
  }, {
    key: "publish",
    value: function publish(channelName, value) {
      if (this.isBridgeChannel(channelName)) {
        console.warn("Forbidden operation. You are trying to write to a private channel (".concat(channelName, ")."));
      } else {
        var channel = this.manager.get(channelName);
        var customEventName = "".concat(channelName, "-publish");
        channel.next(new CustomEvent(customEventName, {
          detail: value
        }));
      }
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(channels, node) {
      if (!channels || !node) {
        return;
      }

      var normalizedChannels = Array.isArray(channels) ? channels : [channels];
      var subscriptor = this.subscriptors.get(node);

      var byChannelName = function byChannelName(subscription) {
        return normalizedChannels.includes(subscription.channel.name);
      };

      var filterAndRemove = function filterAndRemove(sub) {
        return !(byChannelName(sub) && !sub.subscription.unsubscribe());
      };

      subscriptor.subscriptions = subscriptor.subscriptions.filter(filterAndRemove);
    }
    /**
     * Unregister a node from pubsub
     *
     * @param  {HTMLElement} node
     */

  }, {
    key: "unregisterComponent",
    value: function unregisterComponent(node, cleanPrivateChannels) {
      if (!node) {
        return;
      }

      var subscriptor = this.subscriptors.get(node);

      if (subscriptor) {
        subscriptor.unsubscribe(cleanPrivateChannels);
        this.subscriptors["delete"](node);
      }
    }
  }, {
    key: "unregisterAllSubscriptors",
    value: function unregisterAllSubscriptors(cleanPrivateChannels) {
      this.subscriptors.forEach(function (v) {
        v.subscriptions.forEach(function (s) {
          return s.subscription.unsubscribe(cleanPrivateChannels);
        });
      });
      this.subscriptors = new Map();
    }
    /**
     * Wrap an event.
     *
     * @param  {HTMLElement} node
     * @param  {String} eventName
     * @param  {Channel} channel
     *
     * @return {Function}
     */

  }, {
    key: "wrapEvent",
    value: function wrapEvent(node, eventName, channel, connection) {
      var _this5 = this;

      var AFTER_PUBLISH = component_connector_externalEventsCodes.AFTER_PUBLISH,
          NAV_REQUEST = component_connector_externalEventsCodes.NAV_REQUEST,
          ROUTER_BACKSTEP = component_connector_externalEventsCodes.ROUTER_BACKSTEP,
          TRACK_EVENT = component_connector_externalEventsCodes.TRACK_EVENT,
          LOG_EVENT = component_connector_externalEventsCodes.LOG_EVENT;

      var ffValue = function ffValue(ff) {
        return _this5.bridge.featureFlagCollection.value(component_connector_extends({
          defaultValue: true
        }, ff));
      };

      var source = fromEvent(node, eventName); // this checking is for components with FeatureFlag configuration

      if (lastValue.has(node)) {
        source = source.pipe(filter(function () {
          return lastValue.get(node);
        }));
      }

      var wrappedListener = source.subscribe(function (event) {
        var adapter = _this5.adapterResolver.getNodeAdapter(node);

        if (!adapter.isEventAtTarget(event)) {
          // If the event bubbles up from a child element:
          return;
        }

        channel.next(event);
        manager_events.emit(AFTER_PUBLISH, event);

        if (connection && connection.link && ffValue(connection.link.featureFlag)) {
          var linkObject = component_connector_extends({}, connection.link);

          if (connection.link.page) {
            if (connection.link.page.hasOwnProperty('bind')) {
              linkObject.page = event.detail[connection.link.page.bind];
            }
          }

          manager_events.emit(NAV_REQUEST, {
            event: event,
            detail: linkObject
          });
        }

        if (connection && connection.backStep && ffValue(connection.backStep.featureFlag)) {
          manager_events.emit(ROUTER_BACKSTEP, {
            event: event,
            detail: {}
          });
        }

        if (connection && connection.analytics && ffValue(connection.analytics.featureFlag)) {
          manager_events.emit(TRACK_EVENT, {
            event: event,
            detail: connection.analytics
          });
        }

        if (connection && connection.log && ffValue(connection.log.featureFlag)) {
          manager_events.emit(LOG_EVENT, {
            event: event,
            detail: connection.log
          });
        }

        if (_this5.wrapEventHandler) {
          _this5.wrapEventHandler(event, connection, channel);
        }
      });
      wrappedListener.node = node;
      wrappedListener.eventName = eventName;
      wrappedListener.channelName = channel.name;
      wrappedListener.options = connection;
      return wrappedListener;
    }
    /**
     * receive a channel name and change old private values.
     *
     * @param  {string} name
     *
     */

  }, {
    key: "createEvent",
    value: function createEvent(name, value) {
      var evt = new Event(name);
      evt.detail = {
        value: value
      };
      return evt;
    }
    /**
     * returns true if there's a private channel with the given name
     *
     * @param {String} name
     *
     * @return {Boolean}
     */

  }, {
    key: "isActiveBridgeChannel",
    value: function isActiveBridgeChannel(name) {
      return this.isBridgeChannel(name) && this.manager.getUnsafe(name);
    }
    /**
     * returns true if the given name matches a private channel's name
     *
     * @param {String} name
     *
     * @return {Boolean}
     */

  }, {
    key: "isBridgeChannel",
    value: function isBridgeChannel(name) {
      return this.bridgeChannelsPrefix.test(name);
    }
    /**
     * returns true if the subscriptor has been subscribed to the given channel.
     *
     * @param {Subscriptor} subscriptor
     * @param {String} channelName
     *
     * @return {Boolean}
     */

  }, {
    key: "hasSubscriptions",
    value: function hasSubscriptions(subscriptor, channelName) {
      return Boolean(subscriptor.subscriptions.find(function (d) {
        return d.channel.name === channelName;
      }));
    }
  }]);

  return ComponentConnector;
}();


// CONCATENATED MODULE: ./src/core/route.js
function route_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function route_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function route_createClass(Constructor, protoProps, staticProps) { if (protoProps) route_defineProperties(Constructor.prototype, protoProps); if (staticProps) route_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @class Route
 */
var Route = /*#__PURE__*/function () {
  /**
   * @type {RegExp}
   */

  /**
   * @type {RegExp}
   */

  /**
   * @type {string}
   */

  /**
   * @type {string}
   */

  /**
   *
   * {{[key:string]: string}}
   */

  /**
   * @type {string[]}
   */

  /**
   * @type {RegExp[]}
   */

  /**
  * @type {?string}
  */

  /**
   * @type {boolean}
   */
  // needed to discriminate between 404 and rest of pages with same pattern

  /**
   * @private
   * @param {String} name
   * @param {String} pattern
   */

  /**
   *
   * @param {string} name
   * @param {string|string[]} pattern
   */
  function Route(name, pattern) {
    route_classCallCheck(this, Route);

    this.name = '';
    this.params = {};
    this.patterns = [''];
    this.redirectPage = null;
    this.isAccessible = true;
    this.name = name;
    this.patterns = typeof pattern === 'string' ? [pattern] : pattern;
    this.regexps = this.patterns.map(function (p) {
      var regexpStr = p.replace(Route.PARAM, '([^/]+)').replace(Route.TRAILING_SLASHES, '/*');
      return new RegExp('^' + regexpStr + '$');
    });
  }
  /**
   * @param {{[key:string]: string}} params
   * @returns {string}
   */


  route_createClass(Route, [{
    key: "path",
    value: function path(params) {
      params = params || {};
      this.params = {};
      var parts;
      var path = this.patterns[0];

      while ((parts = Route.PARAM.exec(this.patterns[0])) !== null) {
        path = path.replace(parts[0], params[parts[1]]);
        this.params[parts[1]] = params[parts[1]];
      }

      var queryParams = [];

      for (var param in params) {
        if (!this.params.hasOwnProperty(param)) {
          queryParams.push(param + '=' + encodeURIComponent(params[param]));
        }
      }

      if (queryParams.length) {
        path += '?' + queryParams.join('&');
      }

      return path;
    }
    /**
     *
     * @param {string} path
     * @returns {?{
     *      index: number,
     *      parts: string[],
     *      pattern: string,
     *      regex: RegExp
     * }}
     */

  }, {
    key: "matchPath",
    value: function matchPath(path) {
      var _this = this;

      var match = null;
      this.regexps.forEach(function (re, i) {
        var result = path.match(re);

        if (result) {
          match = {
            index: i,
            regex: _this.regexps[i],
            pattern: _this.patterns[i],
            parts: result
          };
        }
      });
      return match;
    }
    /**
     * @param {string} path
     */

  }, {
    key: "parsePath",
    value: function parsePath(path) {
      var match = this.matchPath(path);
      this.params = {};

      if (match) {
        var i = 1;
        var parts;

        while ((parts = Route.PARAM.exec(match.pattern)) !== null) {
          this.params[parts[1]] = this._parseParam(match.parts[i]);
          i++;
        }
      }
    }
    /**
     * @param {*} query
     */

  }, {
    key: "parseQuery",
    value: function parseQuery(query) {
      this.query = query;

      for (var queryParam in this.query) {
        if (this.query.hasOwnProperty(queryParam)) {
          this.params[queryParam] = this.query[queryParam];
        }
      }
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "is404",
    value: function is404() {
      return this.name === Route._404_PAGE_NAME;
    }
    /**
     * @private
     * @param {string} value
     * @returns {boolean}
     */

  }, {
    key: "_isNumber",
    value: function _isNumber(value) {
      return parseInt(value) + '' === value || parseFloat(value) + '' === value;
    }
    /**
     * @private
     * @param {string} param
     * @returns {string|number}
     */

  }, {
    key: "_parseParam",
    value: function _parseParam(param) {
      return this._isNumber(param) ? +param : param;
    }
  }, {
    key: "handler",
    value: function handler() {// Overwrite to make something with the current route
    }
  }]);

  return Route;
}();

Route.PARAM = /(?::([^/]+))/g;
Route.TRAILING_SLASHES = /\/*$/;
Route._404_PAGE_NAME = '404';

// CONCATENATED MODULE: ./src/core/navigation-stack.js
function navigation_stack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function navigation_stack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function navigation_stack_createClass(Constructor, protoProps, staticProps) { if (protoProps) navigation_stack_defineProperties(Constructor.prototype, protoProps); if (staticProps) navigation_stack_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @typedef Navigation
 * @type {object}
 * @property {string|undefined} from
 * @property {string|undefined} to
 * @property {boolean} [skipHistory]
 */

/**
 * @typedef RoutePage
 * @type {object}
 * @property {string} page
 * @property {object} params
 */
var NavigationStack = /*#__PURE__*/function () {
  function NavigationStack() {
    navigation_stack_classCallCheck(this, NavigationStack);

    /**
     * @type {RoutePage[]}
     */
    this.navStack = [];
    /**
     * @type {{[key:string]: boolean}}
     */

    this.skipNav = {};
  }
  /**
   * @returns {number}
   */


  navigation_stack_createClass(NavigationStack, [{
    key: "length",
    get: function get() {
      return this.navStack.length;
    }
    /**
     * @param {Navigation} nav
     */

  }, {
    key: "addSkipNavigation",
    value: function addSkipNavigation(nav) {
      if (nav.skipHistory === true || nav.skipHistory === false) {
        this.skipNav["".concat(nav.from, ":").concat(nav.to)] = nav.skipHistory;
      }
    }
    /**
     * @param {Navigation} nav
     * @returns {Navigation} nav
     */

  }, {
    key: "_reverseNavigation",
    value: function _reverseNavigation(nav) {
      return {
        from: nav.to,
        to: nav.from
      };
    }
    /**
     * @param {Navigation} nav
     * @returns {boolean}
     */

  }, {
    key: "isSkipNavigation",
    value: function isSkipNavigation(nav) {
      return this.skipNav["".concat(nav.from, ":").concat(nav.to)] === true;
    }
    /**
     * @returns {Navigation} nav
     */

  }, {
    key: "lastNavigation",
    value: function lastNavigation() {
      var navCount = this.navStack.length;
      var from;
      var to;

      if (navCount === 1) {
        to = this.navStack[0];
      } else if (navCount > 1) {
        to = this.navStack[navCount - 1];
        from = this.navStack[navCount - 2];
      }

      return this.createNavigation(from, to);
    }
    /**
     * @param {string} page
     * @param {object} params
     * @returns {RoutePage}
     */

  }, {
    key: "createRoute",
    value: function createRoute(page) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return {
        page: page,
        params: params
      };
    }
    /**
     * @param {RoutePage|undefined} routeFrom
     * @param {RoutePage|undefined} routeTo
     * @returns {Navigation}
     */

  }, {
    key: "createNavigation",
    value: function createNavigation(routeFrom, routeTo) {
      return {
        from: routeFrom ? routeFrom.page : undefined,
        to: routeTo ? routeTo.page : undefined
      };
    }
    /**
     * @param {RoutePage} route
     */

  }, {
    key: "push",
    value: function push(route) {
      var _this$top;

      if (!this.top() || ((_this$top = this.top()) === null || _this$top === void 0 ? void 0 : _this$top.page) !== route.page) {
        this.navStack.push(route);
      }
    }
    /**
     * @param {RoutePage} route
     */

  }, {
    key: "replace",
    value: function replace(route) {
      var _this$top2;

      if (!this.top() || ((_this$top2 = this.top()) === null || _this$top2 === void 0 ? void 0 : _this$top2.page) !== route.page) {
        this.navStack[this.navStack.length - 1] = route;
      }
    }
    /**
     * @returns {RoutePage|undefined}
     */

  }, {
    key: "pop",
    value: function pop() {
      return this.navStack.pop();
    }
    /**
     * @returns {RoutePage|undefined}
     */

  }, {
    key: "top",
    value: function top() {
      return this.navStack.length > 0 ? this.navStack[this.navStack.length - 1] : undefined;
    }
    /**
     * @param {Navigation} newNav
     * @returns {boolean}
     */

  }, {
    key: "isBackwardNavigation",
    value: function isBackwardNavigation(newNav) {
      var lastNav = this.lastNavigation();
      return lastNav && newNav.from === lastNav.to && newNav.to === lastNav.from;
    }
    /**
     * @param {RoutePage} routeFrom
     * @param {RoutePage} routeTo
     * @returns {RoutePage|undefined}
     */

  }, {
    key: "update",
    value: function update(routeFrom, routeTo) {
      var nav = this.createNavigation(routeFrom, routeTo);

      if (this.isBackwardNavigation(nav)) {
        while (this.isSkipNavigation(this._reverseNavigation(this.lastNavigation()))) {
          this.pop();
        }

        this.pop();
      } else {
        this.push(routeTo);
      }

      return this.top();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.navStack = [];
    }
    /**
     * @param {RoutePage} route
     */

  }, {
    key: "replaceRoute",
    value: function replaceRoute(route) {
      if (this.navStack.length > 0) {
        this.navStack[this.navStack.length - 1] = route;
      } else {
        this.push(route);
      }
    }
    /**
     * Clear the router stack until given page is found on router stack.
     * @param {string} targetPage
     */

  }, {
    key: "clearUntil",
    value: function clearUntil(targetPage) {
      if (this.navStack.find(function (route) {
        return route.page === targetPage;
      })) {
        var currentRoute = null;

        do {
          currentRoute = this.navStack.pop();
        } while (currentRoute && currentRoute.page != targetPage);
      }
    }
  }]);

  return NavigationStack;
}();


// CONCATENATED MODULE: ./src/core/router.js
function router_typeof(obj) { "@babel/helpers - typeof"; return router_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, router_typeof(obj); }

function router_extends() { router_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return router_extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { router_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function router_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function router_slicedToArray(arr, i) { return router_arrayWithHoles(arr) || router_iterableToArrayLimit(arr, i) || router_unsupportedIterableToArray(arr, i) || router_nonIterableRest(); }

function router_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function router_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return router_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return router_arrayLikeToArray(o, minLen); }

function router_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function router_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function router_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function router_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function router_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function router_createClass(Constructor, protoProps, staticProps) { if (protoProps) router_defineProperties(Constructor.prototype, protoProps); if (staticProps) router_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = router_getPrototypeOf(object); if (object === null) break; } return object; }

function router_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) router_setPrototypeOf(subClass, superClass); }

function router_setPrototypeOf(o, p) { router_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return router_setPrototypeOf(o, p); }

function router_createSuper(Derived) { var hasNativeReflectConstruct = router_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = router_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = router_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return router_possibleConstructorReturn(this, result); }; }

function router_possibleConstructorReturn(self, call) { if (call && (router_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return router_assertThisInitialized(self); }

function router_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function router_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function router_getPrototypeOf(o) { router_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return router_getPrototypeOf(o); }







/**
 * @typedef {import('./channel-manager').ChannelManager} ChannelManager
 */

/**
 * @typedef {import('rxjs/Observable')} Observable
 */

/**
 * @constant
 * @type {Subscription}
 */

var router_EMPTY = Subscription_Subscription.EMPTY;
/**
 * @constant
 * @type {object}
 */

var router_externalEventsCodes = constants.externalEventsCodes;
/**
 * @type {Router?}
 */

var instance = null;
/**
 * @type {boolean}
 */

var _useHistory = false;
/**
 * @type {{}| {[key: string]: Route}}
 */

var _routes = {};
/**
 * @type {Subscription}
 */

var _disposables;
/**
 * @type {Route}
 */


var _currentRoute;
/**
 * @type {Route}
 */


var _404Route;
/**
 * @type {ChannelManager}
 */


var _channelManager;
/**
 * @class SerialSubscription
 * Mimics behavior of SerialDisposable in RxJS v4,
 * allows to add only single subscription. If new subscription's added,
 * existing subscription will be unsubscribed.
 *
 * By design of RxJS v5 it is no longer recommended to manage subscription
 * imperatively vis various kind of subscription, reason it only have single
 * kind of composite subscription. This implementation is for interop between
 * existing codebase.
 * @extends {Subscription}
 */


var router_SerialSubscription = /*#__PURE__*/function (_Subscription) {
  router_inherits(SerialSubscription, _Subscription);

  var _super = router_createSuper(SerialSubscription);

  function SerialSubscription() {
    var _this;

    router_classCallCheck(this, SerialSubscription);

    _this = _super.call(this);
    _this._currentSubscription = router_EMPTY;
    return _this;
  }
  /**
   * Adds a tear down to be called during the unsubscribe() of this
   * Subscription.
   *
   * If there's existing subscription, it'll be unsubscribed and
   * removed.
   *
   * @param {()=>void} teardown The additional logic to execute on
   * teardown.
   * @return {Subscription} Returns the Subscription used or created to be
   * added to the inner subscriptions list. This Subscription can be used with
   * `remove()` to remove the passed teardown logic from the inner subscriptions
   * list.
   */


  router_createClass(SerialSubscription, [{
    key: "add",
    value: function add(teardown) {
      if (this.closed) return;
      if (typeof teardown === 'function') teardown = new Subscription_Subscription(teardown);

      if (this._currentSubscription) {
        this.remove(this._currentSubscription);

        this._currentSubscription.unsubscribe();

        this._currentSubscription = null;
      }

      _get(router_getPrototypeOf(SerialSubscription.prototype), "add", this).call(this, this._currentSubscription = teardown);
    }
  }]);

  return SerialSubscription;
}(Subscription_Subscription);
/**
 * @class Router
 */


var router_Router = /*#__PURE__*/function () {
  /**
   * @constant
   * @type {boolean}
   */

  /**
   * @constant
   * @type {RegExp}
   */

  /**
   * @constant
   * @type {RegExp}
   */

  /**
   * @constant
   * @type {RegExp}
   */

  /**
   * @constant
   * @type {RegExp}
   */

  /**
   * @constant
   * @type {RegExp}
   */

  /**
   * @constant
   * @type {boolean}
   */

  /**
   * @constant
   * @type {string}
   */

  /**
   * @constant
   * @type {boolean}
   */

  /**
   * @constant
   * @type {NavigationStack}
   */

  /**
   * @type {object}
   */
  function Router() {
    var _this2 = this;

    router_classCallCheck(this, Router);

    this.interceptorContext = {};
    var TEMPLATE_TRANSITION_END = router_externalEventsCodes.TEMPLATE_TRANSITION_END;

    if (!instance) {
      instance = this;
    }

    this.navigationStack = this._createNavigationStack();
    manager_events.on(TEMPLATE_TRANSITION_END, function () {
      _this2.isNavigationInProgress = false;
    });
    return instance;
  }
  /**
   * @private
   * @return {NavigationStack}
   */


  router_createClass(Router, [{
    key: "_createNavigationStack",
    value: function _createNavigationStack() {
      return new NavigationStack();
    }
    /**
     * @param {boolean} value
     */

  }, {
    key: "useHistory",
    get:
    /**
     * @returns {boolean}
     */
    function get() {
      return _useHistory;
    }
    /**
     * @param {{[key: string]: Route}} routes
     */
    ,
    set: function set(value) {
      /* istanbul ignore else */
      if (Router.SUPPORTS_HISTORY_API) {
        _useHistory = value;
      }
    }
  }, {
    key: "routes",
    get:
    /**
    * @returns {{[key: string]: Route}}
    */
    function get() {
      return _routes;
    }
    /**
     * @returns {Route}
     */
    ,
    set: function set(routes) {
      _routes = routes;
    }
  }, {
    key: "currentRoute",
    get: function get() {
      return _currentRoute;
    }
    /**
     * @param {Route} route
     */
    ,
    set: function set(route) {
      _currentRoute = route;
    }
    /**
     * @returns {ChannelManager}
     */

  }, {
    key: "channelManager",
    get: function get() {
      return _channelManager;
    }
    /**
     * @param {ChannelManager} channelManager
     */
    ,
    set: function set(channelManager) {
      _channelManager = channelManager;
    }
    /**
     * @param {Route} route
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: "handler",
    value: function handler(route) {// Overwrite to make something after all matched routes
    }
    /**
     *
     * @param {string} name
     * @param {string|string[]} patterns
     * @returns {Route}
     */

  }, {
    key: "addRoute",
    value: function addRoute(name, patterns) {
      this.routes[name] = new Route(name, patterns);
      return this.routes[name];
    }
    /**
     * @param {{[key: string]: string|string[]}} routes
     * @returns {{}|{[key: string]: Route}}
     */

  }, {
    key: "addRoutes",
    value: function addRoutes(routes) {
      var __routes = {};

      for (var routeName in routes) {
        if (routes.hasOwnProperty(routeName)) {
          __routes[routeName] = this.addRoute(routeName, routes[routeName]);
        }
      }

      return __routes;
    }
    /**
     * @param {{
     *    from: string,
     *    to: string,
     *    skipHistory: boolean
     * }[]} skipNavs
     */

  }, {
    key: "addSkipNavigations",
    value: function addSkipNavigations(skipNavs) {
      for (var i = 0; i < skipNavs.length; i++) {
        this.navigationStack.addSkipNavigation(skipNavs[i]);
      }
    }
    /**
     * @private
     * @returns {string}
     */

  }, {
    key: "_getHashPath",
    value: function _getHashPath() {
      return location.hash.replace(Router.HASH_PREFIX, '/').replace(Router.EMPTY, '/');
    }
    /**
     * @private
     * @returns {Observable}
     */

  }, {
    key: "_observeHashChange",
    value: function _observeHashChange() {
      return fromEvent(window, 'hashchange').pipe(map(this._getHashPath), startWith(this._getHashPath()));
    }
    /**
     * @private
     * @returns {string}
     */

  }, {
    key: "_getURLPath",
    value: function _getURLPath() {
      return location.pathname.replace(Router.PATH_PREFIX, '/');
    }
    /**
     * @private
     * @returns {Observable}
     */

  }, {
    key: "_observeStateChange",
    value: function _observeStateChange() {
      return merge(fromEvent(window, 'popstate'), fromEvent(window, 'pushstate')).pipe(map(this._getURLPath), startWith(this._getURLPath()));
    }
    /**
     * @param {string} fullPath
     * @returns {Route}
     */

  }, {
    key: "matchRoute",
    value: function matchRoute(fullPath) {
      var route;

      var _fullPath$split = fullPath.split('?'),
          _fullPath$split2 = router_slicedToArray(_fullPath$split, 2),
          path = _fullPath$split2[0],
          query = _fullPath$split2[1];

      query = this._parseQuery(query);

      for (var routeName in this.routes) {
        if (this.routes.hasOwnProperty(routeName)) {
          route = this.routes[routeName];

          if ((!route.is404() || route.isAccessible) && route.matchPath(path)) {
            route.parsePath(path);
            route.parseQuery(query);
            return route;
          }
        }
      }
    }
    /**
     * @private
     * @param {string} queryStr
     * @returns {object}
     */

  }, {
    key: "_parseQuery",
    value: function _parseQuery(queryStr) {
      var params = {};

      if (queryStr) {
        // Split into key/value pairs
        var queries = queryStr.split('&');

        if (queries) {
          // Convert the array of strings into an object
          var key,
              value,
              i,
              len = queries.length;

          for (i = 0; i < len; i++) {
            var _queries$i$split = queries[i].split('=');

            var _queries$i$split2 = router_slicedToArray(_queries$i$split, 2);

            key = _queries$i$split2[0];
            value = _queries$i$split2[1];
            params[key] = decodeURIComponent(value);
          }
        }
      }

      return params;
    }
    /**
     * @private
     * @returns {Route}
     */

  }, {
    key: "_setup404",
    value: function _setup404() {
      var route404 = this.routes[Route._404_PAGE_NAME]; // We check if 404 route have a pattern...

      if (route404 && route404.patterns.length === 1) {
        var routeWithSamePattern = this.getRouteWithPattern(route404.patterns[0]); // We set redirect page based on, if it's a repeated URL pattern or a unique one.
        // If it's unique, we set it accessible from the router.
        // Otherwise, it's going to NOT be accessible from the router (multiple router with same pattern)

        route404.redirectPage = routeWithSamePattern ? routeWithSamePattern.name : route404.name;
        route404.isAccessible = !routeWithSamePattern;
      }

      return route404;
    }
    /**
     * @param {string} patternToMath
     * @returns {Route}
     */

  }, {
    key: "getRouteWithPattern",
    value: function getRouteWithPattern(patternToMath) {
      for (var routeName in this.routes) {
        if (this.routes.hasOwnProperty(routeName)) {
          var route = this.routes[routeName]; // we only take care about routes with same patterns that aren't the same

          if (!route.is404() && route.patterns.includes(patternToMath)) {
            return route;
          }
        }
      }

      return null;
    }
    /**
     * @param {{from: {
     *      page: string,
     *      params: object
     *  },
     *  to: {
     *      page: string,
     *      params: object
     * }}} navigation
     * @param {object} context
     * @returns {{intercept: boolean}}
     */

  }, {
    key: "interceptor",
    value: function interceptor(navigation, context) {
      return {
        intercept: false
      };
    }
    /**
     * @param {{
     *    page: string,
     *    params: object
     * }} routeFrom
     * @param {Route} routeTo
     * @returns {{
     *  from: {
     *      page: string,
     *      params: object
     *  },
     *  to: {
     *      page: string,
     *      params: object
     * },
     * [redirect: string]
     * intercept: boolean}}
     */

  }, {
    key: "intercept",
    value: function intercept(routeFrom, routeTo) {
      var navigation = {
        from: {
          page: routeFrom.page,
          params: routeFrom.params
        },
        to: {
          page: routeTo.name,
          path: routeTo.patterns[0],
          params: routeTo.params
        }
      };
      return _objectSpread(_objectSpread({}, this.interceptor(navigation, this.interceptorContext)), navigation);
    }
    /**
     * @param {object} ctx
     */

  }, {
    key: "updateInterceptorContext",
    value: function updateInterceptorContext(ctx) {
      this.interceptorContext = router_extends({}, this.interceptorContext, ctx);
    }
    /**
     * @param {object} ctx
     */

  }, {
    key: "setInterceptorContext",
    value: function setInterceptorContext(ctx) {
      this.interceptorContext = router_extends({}, ctx);
    }
    /**
     * @returns {object} ctx
     */

  }, {
    key: "getInterceptorContext",
    value: function getInterceptorContext() {
      return router_extends({}, this.interceptorContext);
    }
    /**
     *
     * @returns {Subscription}
     */

  }, {
    key: "start",
    value: function start() {
      var _this3 = this;

      /* istanbul ignore else */
      if (!_disposables) {
        var active = new router_SerialSubscription();
        _404Route = this._setup404();
        var source = this.useHistory ? this._observeStateChange() : this._observeHashChange();
        var subscription = source.pipe(distinctUntilChanged(), map(this.matchRoute.bind(this)), filter(function (r) {
          if (r && r.name === _this3.cancelledNavigation) {
            _this3.cancelledNavigation = undefined;
            _this3.isNavigationInProgress = false;

            if (_this3.currentRoute.name !== _this3.navigationStack.top().page) {
              _this3.navigationStack.push({
                page: _this3.currentRoute.name,
                params: _this3.currentRoute.params
              });
            }

            return false;
          } else return true;
        }));
        subscription.forEach(function (route) {
          if (!_this3.hashIsDirty) {
            if (route) {
              var currentRouteName = _this3.currentRoute ? _this3.currentRoute.name : undefined;
              var currentRouteParams = _this3.currentRoute ? _this3.currentRoute.params : undefined;

              var routeFrom = _this3.navigationStack.createRoute(currentRouteName, currentRouteParams);

              var routeTo = _this3.navigationStack.createRoute(route.name, route.params);

              var interceptorResult = _this3.intercept(routeFrom, route);

              if (interceptorResult.intercept) {
                _this3.isNavigationInProgress = false;

                if (interceptorResult.redirect) {
                  _this3.goReplacing(interceptorResult.redirect.page, interceptorResult.redirect.params);
                } else {
                  _this3.go(currentRouteName, currentRouteParams, false);

                  _this3.cancelledNavigation = currentRouteName;
                }

                if (_this3.channelManager) {
                  setTimeout(function () {
                    return _this3.channelManager.publishInterceptedNavigation(interceptorResult);
                  }, 0);
                }

                return;
              } else {
                // NavigationStack computes the effective new current based on the skip navigation list
                // so it can be that the newRoute is different to the route from window.location
                var newRouteName = _this3.navigationStack.update(routeFrom, routeTo).page;

                if (newRouteName !== routeTo.page) {
                  _this3.go(newRouteName, undefined, false);

                  return;
                }
              }

              _currentRoute = route;
              var disposable = new Subscription_Subscription(function () {
                return _this3.currentRoute;
              });
              active.add(disposable);

              _this3.currentRoute.handler();

              _this3.handler(_this3.currentRoute);
            } else if (_404Route && _404Route.redirectPage) {
              _this3.goReplacing(_404Route.redirectPage);
            }
          } else {
            _this3.hashIsDirty = false;
          }
        });
        _disposables = new Subscription_Subscription(subscription, active);
      }

      return _disposables;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (_disposables) {
        _disposables.unsubscribe();

        _disposables = null;
      }

      this.isNavigationInProgress = false;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.stop();
      this.routes = {};
    }
    /**
     * @param {string} routeName
     * @param {object} params
     * @returns {string}
     */

  }, {
    key: "getPath",
    value: function getPath(routeName, params) {
      var route = this.routes[routeName];

      if (route) {
        return route.path(params);
      } else {
        console.error('Wrong route name: %s, valid route names: %s', routeName, Object.keys(this.routes).join(', '));
      }
    }
    /**
     * @param {string} name
     * @returns {{from: string, to: string, [skipHistory: boolean]}}
     */

  }, {
    key: "newNavigation",
    value: function newNavigation(name) {
      return {
        'from': this.currentRoute ? this.currentRoute.name : undefined,
        'to': name
      };
    }
    /**
     * @param {{from: string, to: string}} nav
     * @returns {{from: string, to: string, skipHistory?: boolean}}
     */

  }, {
    key: "reverseNavigation",
    value: function reverseNavigation(nav) {
      return {
        from: nav.to,
        to: nav.from
      };
    }
    /**
     * @param {string} name
     * @param {object} params
     * @param {boolean} [replace]
     * @param {boolean} [skipHistory]
     */

  }, {
    key: "go",
    value: function go(name, params, replace, skipHistory) {
      if (this.isNavigationInProgress) {
        return;
      }

      if (skipHistory !== undefined) {
        var newNav = this.newNavigation(name);
        var reverseNav = this.reverseNavigation(newNav);
        reverseNav.skipHistory = skipHistory;
        this.navigationStack.addSkipNavigation(reverseNav);
      }

      var sanitizedName = name.replace(Router.LTRIM_SLASH, '');
      var path = this.getPath(sanitizedName, params);

      if (path !== this._getHashPath()) {
        this.isNavigationInProgress = true;
        this.updatePathInBrowser(path, replace);
      }
    }
    /**
     * @returns {Navigation}
     */

  }, {
    key: "back",
    value: function back() {
      var navigation = {};

      if (this.navigationStack.length > 1) {
        var fromRoute = this.navigationStack.pop();
        var auxFromRoute = fromRoute;
        var backRoute = this.getLastRoute();

        while (this.navigationStack.isSkipNavigation({
          from: auxFromRoute.page,
          to: backRoute.page
        }) && this.navigationStack.length > 1) {
          auxFromRoute = this.navigationStack.pop();

          if (this.navigationStack.length > 0) {
            backRoute = this.getLastRoute();
          }
        }

        var page = backRoute.page;
        var params = backRoute.params;
        navigation.from = fromRoute;
        navigation.to = backRoute;
        this.go(page, params);
      } else {
        navigation.from = this.getLastRoute();
        navigation.to = this.getLastRoute();
      }

      return navigation;
    }
    /**
     * @param {string} path
     * @param {boolean} replace
     */

  }, {
    key: "updatePathInBrowser",
    value: function updatePathInBrowser(path, replace) {
      if (this.useHistory) {
        if (replace) {
          this.historyReplaceState(path);
        } else {
          this.historyPushState(path);
        }
      } else {
        if (replace) {
          this.locationReplace(path);
        } else {
          this.locationHash(path);
        }
      }
    }
    /**
     * @param {string} name
     * @param {object} params?
     */

  }, {
    key: "goReplacing",
    value: function goReplacing(name, params) {
      this.go(name, params, true);
    }
    /**
     * @param {string} path
     */

  }, {
    key: "historyReplaceState",
    value: function historyReplaceState(path) {
      history.replaceState(null, null, path);
    }
    /**
     * @param {string} path
     */

  }, {
    key: "historyPushState",
    value: function historyPushState(path) {
      history.pushState(null, null, path);
    }
    /**
     * @param {string} path
     */

  }, {
    key: "locationReplace",
    value: function locationReplace(path) {
      location.replace('#!' + path);
    }
    /**
     * @param {string} path
     */

  }, {
    key: "locationHash",
    value: function locationHash(path) {
      location.hash = '#!' + path;
    }
    /**
     * Get last route from stack.
     *
     * @returns {RoutePage} Last route from stack.
     */

  }, {
    key: "getLastRoute",
    value: function getLastRoute() {
      return this.navigationStack.top();
    }
    /**
     * Initialize router stack.
     */

  }, {
    key: "init",
    value: function init() {
      this._clearStack();
    }
    /**
     * Clear the router stack.
     */

  }, {
    key: "_clearStack",
    value: function _clearStack() {
      this.navigationStack.clear();
    }
    /**
     * Clear the router stack until given page is found on router stack.
     * @param {string} targetPage
     */

  }, {
    key: "clearStackUntil",
    value: function clearStackUntil(targetPage) {
      this.navigationStack.clearUntil(targetPage);
    }
  }]);

  return Router;
}();

router_Router.SUPPORTS_HISTORY_API = window.history && 'pushState' in window.history;
router_Router.PARAM = /(?::([^/]+))/g;
router_Router.LTRIM_SLASH = /^\/(\b)/;
router_Router.EMPTY = /^$/;
router_Router.HASH_PREFIX = /^#!?\/*/;
router_Router.PATH_PREFIX = /^\/*/;
router_Router.isNavigationInProgress = false;
router_Router.hashIsDirty = false;

// CONCATENATED MODULE: ./src/core/manager/import.js
function import_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function import_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function import_createClass(Constructor, protoProps, staticProps) { if (protoProps) import_defineProperties(Constructor.prototype, protoProps); if (staticProps) import_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var import_externalEventsCodes = constants.externalEventsCodes;

var _after = function _after(times, func) {
  return function () {
    if (--times < 1) {
      return func();
    }
  };
};

var import_CellsManagerImport = /*#__PURE__*/function () {
  function CellsManagerImport() {
    import_classCallCheck(this, CellsManagerImport);
  }

  import_createClass(CellsManagerImport, [{
    key: "_importElement",
    value: function _importElement(endPoint, componentPath, callback) {
      var node = document.createElement('link');
      node.rel = 'import';
      node.href = endPoint + componentPath;
      node.onload = callback;
      node.onerror = callback;
      node.setAttribute('async', '');
      document.head.appendChild(node);
    }
  }, {
    key: "_importElementPromise",
    value: function _importElementPromise(endPoint, componentPath) {
      var _this = this;

      return new Promise(function (resolve) {
        _this._importElement(endPoint, componentPath, resolve);
      });
    }
  }, {
    key: "loadBundleForTemplate",
    value: function loadBundleForTemplate(baseUri, pageName, callback) {
      var _this2 = this;

      return new Promise(function (resolve) {
        var finishComponentLoading = function finishComponentLoading() {
          if (callback) {
            callback.call(_this2);
          }

          resolve();
        };

        _this2._importElement(baseUri, pageName + '.html', finishComponentLoading);
      });
    }
  }, {
    key: "loadComponent",
    value: function loadComponent(component, baseUri, callback) {
      var _this3 = this;

      var BEFORE_IMPORT = import_externalEventsCodes.BEFORE_IMPORT,
          AFTER_IMPORT = import_externalEventsCodes.AFTER_IMPORT;
      return new Promise(function (resolve) {
        var finishComponentLoading = function finishComponentLoading() {
          if (callback) {
            callback.call(_this3);
          }

          resolve();
        };

        var list = component;

        if (!Array.isArray(list)) {
          list = [component];
        }

        if (list.length === 0) {
          finishComponentLoading();
          return;
        }

        manager_events.emit(BEFORE_IMPORT);

        var iCb = _after(list.length, function () {
          manager_events.emit(AFTER_IMPORT);
          finishComponentLoading();
        });

        for (var index = 0; index < list.length; index++) {
          var item = list[index];

          _this3._importElement(baseUri, item.spec.path, iCb);
        }
      });
    }
  }, {
    key: "loadComponentByPriority",
    value: function loadComponentByPriority(component, baseUri, callback) {
      var _this4 = this;

      var BEFORE_IMPORT = import_externalEventsCodes.BEFORE_IMPORT,
          AFTER_IMPORT = import_externalEventsCodes.AFTER_IMPORT;
      var list = component;

      if (!Array.isArray(list)) {
        list = [component];
      }

      if (list.length === 0) {
        if (callback) {
          callback.call(this);
        }

        return;
      }

      var priorityLists = this._createPriorityLists(list);

      manager_events.emit(BEFORE_IMPORT);

      this._chainElementLoading(baseUri, priorityLists, 0).then(function () {
        manager_events.emit(AFTER_IMPORT);

        if (callback) {
          callback.call(_this4);
        }
      });
    }
  }, {
    key: "_createSortedArratByPriorityAndUniqueElements",
    value: function _createSortedArratByPriorityAndUniqueElements(list) {
      list.sort(function (a, b) {
        var priorityA = a.priority || 1000;
        var priorityB = b.priority || 1000;

        if (priorityA === priorityB) {
          return a.spec.path <= b.spec.path ? -1 : 1;
        } else {
          return priorityA - priorityB;
        }
      });
      return list.filter(function (elem, pos, arr) {
        return pos === 0 || elem.spec.path !== arr[pos - 1].spec.path;
      });
    }
  }, {
    key: "_createPriorityLists",
    value: function _createPriorityLists(list) {
      var sortedList = this._createSortedArratByPriorityAndUniqueElements(list);

      var currentPriority = sortedList[0].priority;
      var priorityLists = [[]];
      var pivote = 0;

      for (var index = 0; index < sortedList.length; index++) {
        var item = sortedList[index];

        if (item.priority === currentPriority) {
          priorityLists[pivote].push(item);
        } else {
          currentPriority = item.priority;
          priorityLists.push([]);
          pivote = priorityLists.length - 1;
          priorityLists[pivote].push(item);
        }
      }

      return priorityLists;
    }
  }, {
    key: "_chainElementLoading",
    value: function _chainElementLoading(baseUri, elementPriorityLists, index) {
      var _this5 = this;

      var currentPromises = [];

      if (elementPriorityLists.length === index) {
        return Promise.resolve();
      }

      for (var j = 0; j < elementPriorityLists[index].length; j++) {
        currentPromises.push(this._importElementPromise(baseUri, elementPriorityLists[index][j].spec.path));
      }

      var count = index + 1; // OJO!!! Si no creamos variable intermedia / scoped, y hacemos count++, siempre cogerá el valor inicial.

      return Promise.all(currentPromises).then(function () {
        return _this5._chainElementLoading(baseUri, elementPriorityLists, count);
      });
    }
  }]);

  return CellsManagerImport;
}();

/* harmony default export */ var manager_import = (import_CellsManagerImport);
// CONCATENATED MODULE: ./src/core/component.js
function component_typeof(obj) { "@babel/helpers - typeof"; return component_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, component_typeof(obj); }

function component_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function component_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function component_createClass(Constructor, protoProps, staticProps) { if (protoProps) component_defineProperties(Constructor.prototype, protoProps); if (staticProps) component_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function component_get() { if (typeof Reflect !== "undefined" && Reflect.get) { component_get = Reflect.get.bind(); } else { component_get = function _get(target, property, receiver) { var base = component_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return component_get.apply(this, arguments); }

function component_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = component_getPrototypeOf(object); if (object === null) break; } return object; }

function component_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) component_setPrototypeOf(subClass, superClass); }

function component_setPrototypeOf(o, p) { component_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return component_setPrototypeOf(o, p); }

function component_createSuper(Derived) { var hasNativeReflectConstruct = component_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = component_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = component_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return component_possibleConstructorReturn(this, result); }; }

function component_possibleConstructorReturn(self, call) { if (call && (component_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return component_assertThisInitialized(self); }

function component_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function component_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function component_getPrototypeOf(o) { component_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return component_getPrototypeOf(o); }



var CellsBridgeComponent = /*#__PURE__*/function (_CellsBridgeManagerDo) {
  component_inherits(CellsBridgeComponent, _CellsBridgeManagerDo);

  var _super = component_createSuper(CellsBridgeComponent);

  function CellsBridgeComponent(spec) {
    var _this;

    component_classCallCheck(this, CellsBridgeComponent);

    _this = _super.call(this);
    _this.spec = spec;
    _this.spec.node = _this.spec.node ? _this.spec.node : _this.createElement(_this.spec.tagName);
    return _this;
  }

  component_createClass(CellsBridgeComponent, [{
    key: "setProps",
    value: function setProps() {
      var spec = this.spec;

      if (spec.connections && spec.connections.ignoreAttr) {
        for (var index = 0; index < spec.connections.ignoreAttr.length; index++) {
          var key = spec.connections.ignoreAttr[index];
          delete spec.properties[key];
        }
      }

      component_get(component_getPrototypeOf(CellsBridgeComponent.prototype), "setProps", this).call(this, this.node, spec.properties, spec.render);

      this.setAttrs();
    }
  }, {
    key: "setAttrs",
    value: function setAttrs() {
      component_get(component_getPrototypeOf(CellsBridgeComponent.prototype), "setAttrs", this).call(this, this.node, this.spec.attributes);
    }
  }, {
    key: "type",
    get: function get() {
      return this.spec.type;
    },
    set: function set(type) {
      this.spec.type = type;
    }
  }, {
    key: "zone",
    get: function get() {
      return this.spec.zone;
    },
    set: function set(zone) {
      this.spec.zone = zone;
    }
  }, {
    key: "fixed",
    get: function get() {
      return this.spec.fixed;
    },
    set: function set(fixed) {
      this.spec.fixed = fixed;
    }
  }, {
    key: "container",
    get: function get() {
      return this.spec.container;
    },
    set: function set(container) {
      this.spec.container = container;
    }
  }, {
    key: "priority",
    get: function get() {
      return this.spec.priority;
    },
    set: function set(priority) {
      this.spec.priority = priority;
    }
  }, {
    key: "node",
    get: function get() {
      return this.spec.node;
    },
    set: function set(node) {
      this.spec.node = node;
    }
  }, {
    key: "connections",
    get: function get() {
      return this.spec.connections;
    },
    set: function set(connections) {
      this.spec.connections = connections;
    }
  }]);

  return CellsBridgeComponent;
}(dom);


// CONCATENATED MODULE: ./src/core/template.js
function template_typeof(obj) { "@babel/helpers - typeof"; return template_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, template_typeof(obj); }

function template_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function template_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function template_createClass(Constructor, protoProps, staticProps) { if (protoProps) template_defineProperties(Constructor.prototype, protoProps); if (staticProps) template_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function template_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) template_setPrototypeOf(subClass, superClass); }

function template_setPrototypeOf(o, p) { template_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return template_setPrototypeOf(o, p); }

function template_createSuper(Derived) { var hasNativeReflectConstruct = template_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = template_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = template_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return template_possibleConstructorReturn(this, result); }; }

function template_possibleConstructorReturn(self, call) { if (call && (template_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return template_assertThisInitialized(self); }

function template_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function template_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function template_getPrototypeOf(o) { template_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return template_getPrototypeOf(o); }


/**
 * Class for managing templates
 *
 * A template is a component used in Cells apps for managing the components distribution
 *
 * A template has defined zones like app__header or app__main
 * where you can place your components.
 * The property zoneId (in the json page definition file) indicates the zone in wHich the
 * the component is appended.
 *
 * The components added to the template are the template's children. There are two kind of children:
 * the fixed children and the normal children. The normal ones are appended
 * to the asigned zone, the fixed ones are just stored in the fixedChildren property
 * and appended to an especial zone that is fixed.
 *
 * As the class extends from Component it has properties like node which refers to
 * the node the template is attached.
 *
 * The 'state' atributte in the node is used to know the actual state of the template
 * it can be active, cached or inactive.
 *  @class CellsBridgeTemplate
 */

var CellsBridgeTemplate = /*#__PURE__*/function (_CellsComponent) {
  template_inherits(CellsBridgeTemplate, _CellsComponent);

  var _super = template_createSuper(CellsBridgeTemplate);

  function CellsBridgeTemplate() {
    var _this;

    template_classCallCheck(this, CellsBridgeTemplate);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return template_possibleConstructorReturn(_this, (_this = _super.call.apply(_super, [this].concat(args)), _this.children = [], _this.fixedChildren = [], _this.type = 'TEMPLATE', template_assertThisInitialized(_this)));
  }

  template_createClass(CellsBridgeTemplate, [{
    key: "getZone",
    value:
    /**
     * returns the zone node in the template identified by the id.
     *
     * @param {String} zoneId
     *
     * @return {HTMLElement}
     */
    function getZone(zoneId) {
      var curTemplate = this.node;
      var node;

      if (!zoneId) {
        node = curTemplate;
      } else if (curTemplate.$ && curTemplate.$[zoneId]) {
        node = curTemplate.$[zoneId];
      } else {
        node = curTemplate.querySelector('#' + zoneId);
      }

      return node || curTemplate;
    }
    /**
     * sets the attribute cache in the template node to 'cached'
     * for not loading the template again the next time the template is used
     */

  }, {
    key: "cache",
    value: function cache() {
      this._setAttribute('state', 'cached');
    }
    /**
     * sets the attribute cache in the template node to 'active'
     * so you can know which of the templates in html is the actual one
     */

  }, {
    key: "activate",
    value: function activate() {
      this._setAttribute('state', 'active');
    }
    /**
     * sets the attribute cache in the template node to 'inactive'
     * so you can know which of the templates in html are not the actual one
     */

  }, {
    key: "deactivate",
    value: function deactivate() {
      this._setAttribute('state', 'inactive');
    }
  }, {
    key: "native",
    value: function native() {
      this._setAttribute('state', 'native');
    }
  }, {
    key: "resetNextNavigation",
    value: function resetNextNavigation() {
      this._getTemplate(this.node)._nextNavigation = undefined;
    }
    /**
     * Set given value to corresponding attribute name of current template.
     *
     * @private
     * @method _setAttribute
     * @param {String} name  Attribute name.
     * @param {String} value Attribute value.
     */

  }, {
    key: "_setAttribute",
    value: function _setAttribute(name, value) {
      var template = this._getTemplate(this.node);

      try {
        template.setAttribute(name, value);
      } catch (err) {
        throw new Error("".concat(this.node.tagName.toLowerCase(), " has no valid template. Template was ").concat(template));
      }
    }
    /**
     * Get given attribute value from the current template.
     *
     * @private
     * @method _setAttribute
     * @param {String} name  Attribute name.
     * @return {String} Attribute value.
     */

  }, {
    key: "_getAttribute",
    value: function _getAttribute(name) {
      var template = this._getTemplate(this.node);

      var attribute = '';

      try {
        attribute = template.getAttribute(name);
      } catch (err) {
        throw new Error("".concat(this.node.tagName.toLowerCase(), " has no valid template. Template was ").concat(template));
      }

      return attribute;
    }
    /**
     * Returns current template based on node type.
     * If it's a routable component (page), we retrieve the first child element that matches with cells-template.
     * Otherwise, we return directly the node (cells-template).
     *
     * @private
     * @method _getTemplate
     * @param  {HTMLElement} node Node for template retrieval.
     * @return {HTMLElement}      Associate template from given node.
     */

  }, {
    key: "_getTemplate",
    value: function _getTemplate(node) {
      var tagName = node.tagName;
      var isPage = tagName.toLowerCase().endsWith('-page');
      return isPage ? this._getCellsTemplateFromPage(node) : node;
    }
    /**
     * Returns first element from shadowRoot child nodes that matchs 'cells-template'.
     *
     * @private
     * @method _getCellsTemplateFromShadowRootChildNodes
     * @param  {HTMLElement} node First level component that contains cells-template inside shadowRoot childNodes.
     * @return {HTMLElement}      Cells template.
     */

  }, {
    key: "_getCellsTemplateFromPage",
    value: function _getCellsTemplateFromPage(node) {
      var list = node.shadowRoot && node.shadowRoot.childNodes ? node.shadowRoot.childNodes : node.children;
      return Array.from(list).find(function (el) {
        return el && el.tagName && (el.tagName.toLowerCase().indexOf('cells-template') !== -1 || el.getAttribute('data-cells-type') === 'template');
      });
    }
  }, {
    key: "_getContainerAndSlot",
    value: function _getContainerAndSlot(zone) {
      var container = zone;
      var slot = zone;

      if (zone) {
        var parts = zone.split('.');

        if (parts.length === 2) {
          container = parts[0];
          slot = parts[1];
        }
      }

      return {
        container: container,
        slot: slot
      };
    }
    /**
     * recieves one component or a list of them, gets the new ones and append
     * them as child in the selected zone of the template
     *
     * @param {Array}/{Object} components
     *
     * @return {Boolean}
     */

  }, {
    key: "append",
    value: function append(components) {
      /* istanbul ignore else */
      if (!components) {
        return;
      }
      /* istanbul ignore else */


      if (components.length === undefined) {
        components = [components];
      }

      var newContentComponents = components.filter(function (component) {
        return component.fixed !== true;
      });
      var newFixedChildren = components.filter(function (component) {
        return component.fixed === true;
      });
      this.fixedChildren = this.fixedChildren.concat(newFixedChildren);
      this.children = this.children.concat(components);
      var zoneCache = [];

      for (var index = 0; index < newContentComponents.length; index++) {
        var component = newContentComponents[index];

        var _this$_getContainerAn = this._getContainerAndSlot(component.zone),
            container = _this$_getContainerAn.container,
            slot = _this$_getContainerAn.slot;

        component.node.setAttribute('data-select', slot); // for the use of slots required by Polymer 2

        component.node.setAttribute('slot', slot);

        if (template_typeof(zoneCache[container]) !== 'object') {
          zoneCache[container] = this.getZone(container);
        }

        zoneCache[container].appendChild(component.node);
      }
    }
    /**
     * @param {Object} cellsTemplateConfig
     */

  }, {
    key: "config",
    value: function config(cellsTemplateConfig) {
      var name = cellsTemplateConfig.name,
          _cellsTemplateConfig$ = cellsTemplateConfig.template,
          templateId = _cellsTemplateConfig$.id,
          templateName = _cellsTemplateConfig$.name;
      this.name = name;
      this.node.id = templateId;
      this.node.name = templateName;
      this.setProps();
      this.setAttrs();
    }
  }]);

  return CellsBridgeTemplate;
}(CellsBridgeComponent);


// CONCATENATED MODULE: ./src/core/manager/template.js
function manager_template_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function manager_template_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function manager_template_createClass(Constructor, protoProps, staticProps) { if (protoProps) manager_template_defineProperties(Constructor.prototype, protoProps); if (staticProps) manager_template_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }




/**
 * @typedef Spec
 * @type {object}
 * @property {string} tagName  a name of a tag
 * @property {HTMLElement} node element of html
 */

var template_bindingCodes = constants.bindingCodes,
    template_externalEventsCodes = constants.externalEventsCodes;
/**
 * 
 *  @class CellsManagerTemplate
 */

var template_CellsManagerTemplate = /*#__PURE__*/function () {
  /**
   * @param  {Object} config
   */
  function CellsManagerTemplate() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    manager_template_classCallCheck(this, CellsManagerTemplate);

    this.cache = {};
    this.templates = {};
    this.selected = '';
    this.locations = [];
    this.size = 0;
    this.fixedTemplates = ['__cross'];
    var persistentPages = config.persistentPages || [];
    this.viewLimit = config.viewLimit && config.viewLimit >= 1 ? config.viewLimit : 3;
    this.fixedTemplates = this.fixedTemplates.concat(persistentPages);
    this.maxSize = this.viewLimit + this.fixedTemplates.length;
  }
  /**
   * @param  {String} name template name
   * @param  {Spec} spec
   * @param  {Boolean} isPrerendering indicate if the page is being pre-rendering
   * @return {CellsTemplate}
   */


  manager_template_createClass(CellsManagerTemplate, [{
    key: "createTemplate",
    value: function createTemplate(name, spec) {
      var isPrerendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var template = this.get(name);

      if (!template) {
        template = this._createCellsTemplate(name, spec);

        this._storeTemplate(name, template, isPrerendering);
      }

      return template;
    }
    /**
     * @param  {String} name template name
     * @param  {Spec} spec
     * @returns {CellsTemplate} 
     */

  }, {
    key: "_createCellsTemplate",
    value: function _createCellsTemplate(name, spec) {
      var cellsTemplate = new CellsBridgeTemplate(spec);

      var cellsTemplateConfig = this._createCellsTemplateConfig(name);

      cellsTemplate.config(cellsTemplateConfig);
      return cellsTemplate;
    }
    /**
     * @param  {String} name template name
     */

  }, {
    key: "_createCellsTemplateConfig",
    value: function _createCellsTemplateConfig(name) {
      return {
        name: name,
        template: {
          id: this.computeTemplateId(name),
          name: name
        }
      };
    }
    /**
     * Store given template on memory.
     *
     * @param  {String}               name     template name
     * @param  {CellsBridgeTemplate}  template cells bridge template object
     * @param  {Boolean}              isPrerendering indicate if the page is being pre-rendering
     */

  }, {
    key: "_storeTemplate",
    value: function _storeTemplate(name, template, isPrerendering) {
      var node = template.node;

      if (isPrerendering) {
        var templateIsNotInFixedTemplates = this.fixedTemplates.indexOf(name) === -1;

        if (templateIsNotInFixedTemplates) {
          this.fixedTemplates.push(name);
          this.maxSize++;
          var cacheRanOutOfSpaceForNotFixedTemplates = this.maxSize === this.fixedTemplates.length;

          if (cacheRanOutOfSpaceForNotFixedTemplates) {
            this.maxSize += this.viewLimit;
          }
        }
      }

      if (this.size >= this.maxSize) {
        var olderTemplateToDeallocate = this._getOlderRemovableTemplate();

        if (olderTemplateToDeallocate) {
          this.removeTemplate(olderTemplateToDeallocate);
        } else {
          console.warn('No space left in template cache for template ', name);
        }
      }

      this.locations.push(name);
      this.cache[name] = template;
      this.templates[name] = node;
      this.size++;
    }
    /**
     * @returns  {String} 
     */

  }, {
    key: "_getOlderRemovableTemplate",
    value: function _getOlderRemovableTemplate() {
      var found = false;
      var olderRemovableTemplate;

      for (var i = 0; !found && i < this.locations.length; i++) {
        var isNotPersistantPage = this.fixedTemplates.indexOf(this.locations[i]) == -1;

        if (isNotPersistantPage) {
          olderRemovableTemplate = this.locations[i];
          found = true;
        }
      }

      return olderRemovableTemplate;
    }
    /**
     * @param  {String} name template name
     * @returns {CellsTemplate} 
     */

  }, {
    key: "get",
    value: function get(name) {
      return this.cache[name];
    }
    /**
     * @param  {String} name template name
     * @returns {HTMLElement} 
     */

  }, {
    key: "getNode",
    value: function getNode(name) {
      return this.templates[name];
    }
    /**
     * @param  {String} name template name
     * @returns {String} 
     */

  }, {
    key: "parseTemplateName",
    value: function parseTemplateName(name) {
      return name;
    }
    /**
     * @param  {String} name template name
     * @returns {String} 
     */

  }, {
    key: "computeTemplateId",
    value: function computeTemplateId(name) {
      return 'cells-template-' + name.replace(/\./g, '-');
    }
    /**
     * @param  {String} name template name
     * @param  {bridgeChannelManager} bridgeChannelManager=undefined manager of templates
     * @param  {String} binding='always' type of binding
     * @param  {Object} ctx={}
     * @fires  template-transition-end
     */

  }, {
    key: "select",
    value: function select(name) {
      var bridgeChannelManager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var binding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'always';
      var ctx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var TEMPLATE_TRANSITION_END = template_externalEventsCodes.TEMPLATE_TRANSITION_END;
      var CURRENTVIEW = template_bindingCodes.CURRENTVIEW,
          UI = template_bindingCodes.UI;
      var template = this.get(name);
      var cache = this.cache;
      var oldPageName;

      for (var tplName in cache) {
        if (cache.hasOwnProperty(tplName)) {
          if (tplName === this.selected) {
            oldPageName = tplName;
            cache[tplName].deactivate();
          } else if (name !== tplName) {
            cache[tplName].cache();
          }
        }
      }

      this.selected = name;
      template.activate();

      if (bridgeChannelManager && binding !== CURRENTVIEW && binding !== UI) {
        bridgeChannelManager.updateBridgeChannels(oldPageName, name, ctx);
      }

      manager_events.emit(TEMPLATE_TRANSITION_END, template);
    }
    /**
     *
     * remove one template by name.
     * it remove the template from html and from the templates and cache nodes
     *
     * @param {String} templateName the name of the  template to remove
     */

  }, {
    key: "removeTemplate",
    value: function removeTemplate(templateName) {
      if (this.templates[templateName]) {
        var node = document.querySelector('#' + this.templates[templateName].id);
        var pos = this.locations.indexOf(templateName);
        this.locations.splice(pos, 1);
        node.parentNode.removeChild(node);
        delete this.templates[templateName];
        delete this.cache[templateName];
        this.size--;
      }
    }
    /**
     *
     * remove all templates except initial one and cross component one.
     *
     * @param {String} initialTemplate the name of the initial template
     * @param {String} crossContainerId the name of the cross component template
     */

  }, {
    key: "removeTemplates",
    value: function removeTemplates(initialTemplate, crossContainerId) {
      for (var templateName in this.templates) {
        if (this.templates.hasOwnProperty(templateName)) {
          if (templateName !== initialTemplate && templateName !== crossContainerId) {
            this.removeTemplate(templateName);
          }
        }
      }
    }
    /**
     *
     * remove all children of a template,
     * it is used, for example, for clear cross component template.
     *
     * @param {String} templateName the name of the  template
     */

  }, {
    key: "removeTemplateChildrens",
    value: function removeTemplateChildrens(templateName) {
      var template = this.templates[templateName];

      if (template) {
        while (template.firstChild) {
          template.removeChild(template.firstChild);
        }
      }
    }
  }]);

  return CellsManagerTemplate;
}();


// CONCATENATED MODULE: ./src/core/manager/bridge-channels.js
function bridge_channels_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function bridge_channels_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function bridge_channels_createClass(Constructor, protoProps, staticProps) { if (protoProps) bridge_channels_defineProperties(Constructor.prototype, protoProps); if (staticProps) bridge_channels_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



/**
 * BridgeChannelManager definition
 */

var bridge_channels_BridgeChannelManager = /*#__PURE__*/function () {
  function BridgeChannelManager(bridge) {
    bridge_channels_classCallCheck(this, BridgeChannelManager);

    this.componentConnector = bridge.ComponentConnector;
    this.privateChannels = new Set();
  }
  /**
   * Returns the name of the application context channel.
   */


  bridge_channels_createClass(BridgeChannelManager, [{
    key: "getAppContextChannelName",
    value: function getAppContextChannelName() {
      return '__bridge_app';
    }
    /**
     * Returns the name of the channels that has cancellations of back navigations.
     */

  }, {
    key: "getCancelledBackNavigationChannelName",
    value: function getCancelledBackNavigationChannelName() {
      return '__bridge_cancelled_back_navigation';
    }
    /**
      * Returns the name of the channels that has intercepted navigations.
      */

  }, {
    key: "getInterceptedNavigationChannelName",
    value: function getInterceptedNavigationChannelName() {
      return '__bridge_intercepted_navigation';
    }
    /**
     * Returns the prefix for private channels.
     */

  }, {
    key: "getPrivateChannelPrefix",
    value: function getPrivateChannelPrefix() {
      return '__bridge_page_';
    }
    /**
     * Returns the prefix for event channels.
     */

  }, {
    key: "getEventChannelPrefix",
    value: function getEventChannelPrefix() {
      return '__bridge_evt_';
    }
    /**
     * Returns the prefix for generic channels.
     */

  }, {
    key: "getBridgeChannelPrefix",
    value: function getBridgeChannelPrefix() {
      return '__bridge_ch_';
    }
    /**
     * Returns the prefix for generic channels.
     */

  }, {
    key: "getPostMessageChannelPrefix",
    value: function getPostMessageChannelPrefix() {
      return '__bridge_post_message_';
    }
    /**
     * Gets a channel that is for exclusive use of the bridge.
     * If the channel doesn't exist, it creates one channel with.
     *
     * @param name of the channel to retrieve/create
     *
     * @return {Channel}
     *
     */

  }, {
    key: "getBridgeChannel",
    value: function getBridgeChannel(channelName) {
      return this.componentConnector.manager.get(this.getBridgeChannelPrefix() + channelName);
    }
  }, {
    key: "getIdleCallbackChannel",
    value: function getIdleCallbackChannel() {
      var iddleChannel$ = Observable_Observable.create(function (observer) {
        return observer.next(true);
      });
      return iddleChannel$.pipe(first_first());
    }
    /**
     * Gets the application context channel.
     *
     * @return {Channel}
     */

  }, {
    key: "getAppContextChannel",
    value: function getAppContextChannel() {
      return this.componentConnector.manager.get(this.getAppContextChannelName());
    }
    /**
     * Gets the cancelled back navigations channel.
     *
     * @return {Channel}
     */

  }, {
    key: "getCancelledBackNavigationChannel",
    value: function getCancelledBackNavigationChannel() {
      return this.componentConnector.manager.get(this.getCancelledBackNavigationChannelName());
    }
    /**
     * Gets the intercepted navigations channel.
     *
     * @return {Channel}
     */

  }, {
    key: "getInterceptedNavigationChannel",
    value: function getInterceptedNavigationChannel() {
      return this.componentConnector.manager.get(this.getInterceptedNavigationChannelName());
    }
    /**
     * Gets the private channel that corresponds to a page.
     *
     * @param  {String} pageName
     *
     * @return {Channel}
     */

  }, {
    key: "getPrivate",
    value: function getPrivate(pageName) {
      var newName = this.getPrivateChannelPrefix() + pageName;
      var channel = this.componentConnector.manager.get(newName);
      this.privateChannels.add(newName);
      return channel;
    }
  }, {
    key: "getPostMessageChannel",
    value: function getPostMessageChannel(eventName) {
      var newName = this.getPostMessageChannelPrefix() + eventName;
      return this.componentConnector.manager.get(newName);
    }
    /**
     * Creates and initializes the application context channel.
     *
     */

  }, {
    key: "initAppContextChannel",
    value: function initAppContextChannel() {
      this.getAppContextChannel();
    }
    /**
     * Creates and initializes the cancelled back navigation channel.
     *
     */

  }, {
    key: "initCancelledBackNavigationChannel",
    value: function initCancelledBackNavigationChannel() {
      this.getCancelledBackNavigationChannel();
    }
    /**
     * Initializes the private chanel for the given page.
     *
     * @param {String} pageName
     *
     */

  }, {
    key: "initPrivateChannel",
    value: function initPrivateChannel(oldPageName, newPageName) {
      this.publishPrivatePageStatus(newPageName, true);

      if (oldPageName) {
        this.publishPrivatePageStatus(oldPageName, false);
      }
    }
    /**
     * Publish the status of a page in its private channel
     *
     * @param {String} pageName
     * @param {Boolean} status is true if the page is active, and false if it is inactive
     */

  }, {
    key: "publishPrivatePageStatus",
    value: function publishPrivatePageStatus(pageName, status) {
      var channel = this.getPrivate(pageName);
      var evt = this.componentConnector.createEvent('page-load', status);
      channel.next(evt);
    }
    /**
     * Updates the application context.
     * Puts in context the information of the current page and previous active page.
     *
     * @param {String} oldPage was the previous current page
     * @param {String} newPage is the page that becomes the current page
     *
     */

  }, {
    key: "updateAppContext",
    value: function updateAppContext(oldPage, newPage, appContext) {
      var evt = this.componentConnector.createEvent('app-context', {
        currentPage: newPage,
        fromPage: oldPage,
        interceptorContext: appContext
      });
      this.getAppContextChannel().next(evt);
    }
  }, {
    key: "updateBridgeChannels",
    value: function updateBridgeChannels(oldPage, newPage, appContext) {
      this.updateAppContext(oldPage, newPage, appContext);
      this.initPrivateChannel(oldPage, newPage);
    }
  }, {
    key: "publishCancelledBackNavigation",
    value: function publishCancelledBackNavigation(navigation) {
      var evt = this.componentConnector.createEvent('back-nav-cancelled', navigation);
      this.getCancelledBackNavigationChannel().next(evt);
    }
  }, {
    key: "publishInterceptedNavigation",
    value: function publishInterceptedNavigation(navigation) {
      var evt = this.componentConnector.createEvent('intercepted-navigation', navigation);
      this.getInterceptedNavigationChannel().next(evt);
    }
    /**
     * returns true if the given name matches a private channel's name
     *
     * @param {String} name
     *
     * @return {Boolean}
     */

  }, {
    key: "isPrivateChannel",
    value: function isPrivateChannel(name) {
      return name.indexOf(this.getPrivateChannelPrefix()) === 0;
    }
    /**
     * returns true if there's a private channel with the given name
     *
     * @param {String} name
     *
     * @return {Boolean}
     */

  }, {
    key: "isActivePrivateChannel",
    value: function isActivePrivateChannel(name) {
      return this.privateChannels.has(name);
    }
    /**
     * resets all channels, including the private channels.
     * It removes all observers and publications.
     *
     */

  }, {
    key: "resetBridgeChannels",
    value: function resetBridgeChannels(mainNode, cleanPrivateChannels) {
      var _this = this;

      var bridgeChannels = Object.keys(this.componentConnector.manager.channels);
      bridgeChannels.forEach(function (chnlName) {
        var chnl = _this.componentConnector.manager.get(chnlName);

        chnl.clean();
        chnl.unsubscribeAll();
      });
      this.componentConnector.unregisterComponent(mainNode, cleanPrivateChannels);
      this.componentConnector.unregisterAllSubscriptors(cleanPrivateChannels);
      this.componentConnector.manager.cleanAllChannels();
    }
  }, {
    key: "getCCSubscriptions",
    value: function getCCSubscriptions(crossContainerId) {
      var crossComponents = Array.from(this.componentConnector.subscriptors.values()).filter(function (c) {
        var _c$node$parentNode;

        return ((_c$node$parentNode = c.node.parentNode) === null || _c$node$parentNode === void 0 ? void 0 : _c$node$parentNode.id) === crossContainerId;
      });
      var outConnections = crossComponents.map(function (c) {
        var _c$publications$_subs;

        return (_c$publications$_subs = c.publications._subscriptions) === null || _c$publications$_subs === void 0 ? void 0 : _c$publications$_subs.map(function (s) {
          return {
            channel: s.channelName,
            bind: s.eventName,
            component: c.node,
            options: s.options
          };
        });
      }).filter(function (c) {
        return c !== undefined;
      }).reduce(function (acc, cnxs) {
        return acc.concat(cnxs);
      }, []);
      var inConnections = crossComponents.map(function (c) {
        var _c$subscriptions;

        return (_c$subscriptions = c.subscriptions) === null || _c$subscriptions === void 0 ? void 0 : _c$subscriptions.map(function (s) {
          return {
            channel: s.channel.name,
            bind: s.bind,
            component: c.node
          };
        });
      }).filter(function (c) {
        return c !== undefined;
      }).reduce(function (acc, cnxs) {
        return acc.concat(cnxs);
      }, []);
      return {
        inConnections: inConnections,
        outConnections: outConnections
      };
    }
  }, {
    key: "initEventChannels",
    value: function initEventChannels(node, externalEvents) {
      var _this2 = this;

      externalEvents.forEach(function (eventName) {
        var prefix = _this2.getEventChannelPrefix();

        var channelName = prefix + eventName;

        var channel = _this2.componentConnector.manager.get(channelName);

        var source = fromEvent(node, eventName);
        source.subscribe(function (event) {
          return channel.next(event);
        });
      });
    }
  }, {
    key: "subscribeToEvent",
    value: function subscribeToEvent(node, eventName, callback) {
      var prefix = this.getEventChannelPrefix();
      var channelName = prefix + eventName;
      var subscriptor = this.componentConnector.getSubscriptor(node);
      var channel = this.componentConnector.manager.get(channelName);
      callback.node = node;
      subscriptor.subscribe(channel, callback);
    }
  }]);

  return BridgeChannelManager;
}();


// CONCATENATED MODULE: ./src/core/manager/action-channels.js
function action_channels_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function action_channels_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function action_channels_createClass(Constructor, protoProps, staticProps) { if (protoProps) action_channels_defineProperties(Constructor.prototype, protoProps); if (staticProps) action_channels_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var action_channels_externalEventsCodes = constants.externalEventsCodes;
/**
 * Class to define core private channels behavior
 * @class ActionChannelManager
 */

var action_channels_ActionChannelManager = /*#__PURE__*/function () {
  function ActionChannelManager(bridge) {
    action_channels_classCallCheck(this, ActionChannelManager);

    this.bridge = bridge;
    this.PageManager = bridge.PageManager;
    this.ChannelManager = bridge.BridgeChannelManager;
    this.TemplateManager = bridge.TemplateManager;
  }

  action_channels_createClass(ActionChannelManager, [{
    key: "subscribeAll",
    value: function subscribeAll() {
      var _this = this;

      this.ChannelManager.getBridgeChannel('config').subscribe(function (evt) {
        return _this._configSubscriptor(evt);
      });
      this.ChannelManager.getBridgeChannel('locales').subscribe(function (evt) {
        return _this._localesSubscriptor(evt);
      });
      this.ChannelManager.getBridgeChannel('logout').subscribe(function (evt) {
        return _this._logoutSubscriptor(evt);
      });
      this.ChannelManager.getBridgeChannel('interceptor_context').subscribe(function (evt) {
        return _this._appContextSubscriptor(evt);
      });
    }
  }, {
    key: "updateProperty",
    value: function updateProperty(prop, value) {
      if (this.isAllowedProperty(prop)) {
        this.bridge[prop] = value;
        window.AppConfig && (window.AppConfig[prop] = value);
      }
    }
  }, {
    key: "isAllowedProperty",
    value: function isAllowedProperty(prop) {
      return typeof this.bridge[prop] !== 'function';
    }
  }, {
    key: "_configSubscriptor",
    value: function _configSubscriptor(evt) {
      var _this2 = this;

      var TEMPLATE_REGISTERED = action_channels_externalEventsCodes.TEMPLATE_REGISTERED;
      var selected = this.TemplateManager.selected;

      if (evt.detail) {
        for (var prop in evt.detail) {
          if (evt.detail.hasOwnProperty(prop)) {
            this.updateProperty(prop, evt.detail[prop]);
          }
        }

        if (evt.detail.app || evt.detail.pagesPath) {
          this.PageManager.clear();
          this.TemplateManager.removeTemplates(selected, this.bridge.crossContainerId);
          manager_events.once(TEMPLATE_REGISTERED, function () {
            return _this2.TemplateManager.removeTemplate(selected);
          });
        }
      }
    }
  }, {
    key: "_localesSubscriptor",
    value: function _localesSubscriptor(evt) {
      if (window.I18nMsg && evt.detail && evt.detail.lang) {
        window.I18nMsg.lang = evt.detail.lang;
      }
    }
  }, {
    key: "_logoutSubscriptor",
    value: function _logoutSubscriptor() {
      this.bridge.logout();
    }
  }, {
    key: "_appContextSubscriptor",
    value: function _appContextSubscriptor(evt) {
      var appContext = evt.detail;
      this.bridge.setInterceptorContext(appContext);
    }
  }]);

  return ActionChannelManager;
}();


;
// CONCATENATED MODULE: ./src/core/composer/composer-engine-proxy.js
function composer_engine_proxy_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function composer_engine_proxy_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function composer_engine_proxy_createClass(Constructor, protoProps, staticProps) { if (protoProps) composer_engine_proxy_defineProperties(Constructor.prototype, protoProps); if (staticProps) composer_engine_proxy_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ComposerEngineProxy = /*#__PURE__*/function () {
  /**
   * Creates an instance of ComposerPageBuilder.
    * @param {ComponentConnector} componentConnector
   */
  function ComposerEngineProxy(componentConnector, composerEngine) {
    composer_engine_proxy_classCallCheck(this, ComposerEngineProxy);

    this.componentConnector = componentConnector;
    this.composerEngine = composerEngine;
    this.segments = [];
    this.customGroups = [];
    this.normalizedCustomGroups = [];
  }
  /**
   * Initializes the composerEngine setting the initial parameters
   * and subscribing to the channel that will receive the parameters.
   *
   * @param {Object} initialParams has this structure:
   *  {
   *    segments: [ segmentId1, segmentId2, ..., segmentIdN],
   *    customGroups: [ {name: n1, value: v1}, ..., {name: n2, value: v2}]
   *  }
   *
   */


  composer_engine_proxy_createClass(ComposerEngineProxy, [{
    key: "init",
    value: function init() {
      var _this = this;

      var initialParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.initialParams = initialParams;
      this.addParams(this.initialParams);
      this.componentConnector.get(this.getComposerEngineChannelName()).subscribe(function (evt) {
        return _this.handleFeatureFlags(evt);
      });
    }
    /**
     * @returns {String} the name of the channel used to pass the parameters to the composerEngine
     */

  }, {
    key: "getComposerEngineChannelName",
    value: function getComposerEngineChannelName() {
      return '__composer_engine';
    }
    /**
     * It processes the new parameters that are placed in the composerEngine's channel
     *
     * @param {Event} evt
     */

  }, {
    key: "handleFeatureFlags",
    value: function handleFeatureFlags(evt) {
      var params = evt.detail;
      this.addParams(params);
    }
    /**
     * Adds parameters to use with composerEngine
     *
     * @param {Object} params has this structure:
     * {
     *  segments: [ segmentId1, segmentId2, ..., segmentIdN],
     *  customGroups: [ {name: n1, value: v1}, ..., {name: n2, value: v2}]
     * }
     */

  }, {
    key: "addParams",
    value: function addParams(params) {
      this.addSegments(params.segments);
      this.addCustomGroups(params.customGroups);
    }
    /**
     * Adds the segment ids passed in segmentList.
     * It only adds the new segments.
     *
     * @param {Array<String>} segmentList
     */

  }, {
    key: "addSegments",
    value: function addSegments() {
      var _this2 = this;

      var segmentList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      segmentList.filter(function (segmentId) {
        return !_this2.segments.includes(segmentId);
      }).forEach(function (segmentId) {
        return _this2.segments.push(segmentId);
      });
    }
    /**
     * Adds the custom groups passed in customGroupList
     * It only adds the new groups.
     *
     * @param {Array<{name, value}>} customGroupList
     */

  }, {
    key: "addCustomGroups",
    value: function addCustomGroups() {
      var _this3 = this;

      var customGroupList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      customGroupList.forEach(function (aCustomGroup) {
        var existingGroup = _this3.customGroups.find(function (element) {
          return element.name === aCustomGroup.name;
        });

        if (!existingGroup) {
          _this3.customGroups.push(aCustomGroup);
        } else if (!existingGroup.isConstant) {
          existingGroup.value = aCustomGroup.value;
        }
      });
      this.normalizedCustomGroups = this.normalizeCustomGroups(this.customGroups);
    }
    /**
     * It converts the key/value pair of a customGroup into a String with the format
     * used by Composer Engine
     *
     * @param {Array<{name, value}>} customGroups
     * @returns
     */

  }, {
    key: "normalizeCustomGroups",
    value: function normalizeCustomGroups(customGroups) {
      var _this4 = this;

      return customGroups.map(function (group) {
        return _this4.composerEngine.customGroup(group.name, JSON.stringify(group.value));
      });
    }
    /**
     * It gets the page using the feature flag parameters
     *
     * @param {String} pageName
     */

  }, {
    key: "getPage",
    value: function getPage(pageName) {
      return this.composerEngine.getPageForAll(pageName, this.segments, this.normalizedCustomGroups);
    }
    /**
     * Clears all parameters and sets the initial ones.
     *
     */

  }, {
    key: "reset",
    value: function reset() {
      this.segments = [];
      this.customGroups = [];
      this.init(this.initialParams);
    }
  }]);

  return ComposerEngineProxy;
}();


// EXTERNAL MODULE: ./node_modules/cells-semaas-adapter/dist/cells-semaas-adapter.js
var cells_semaas_adapter = __webpack_require__("./node_modules/cells-semaas-adapter/dist/cells-semaas-adapter.js");
var cells_semaas_adapter_default = /*#__PURE__*/__webpack_require__.n(cells_semaas_adapter);

// EXTERNAL MODULE: ./node_modules/es5-dot-prop/index.js
var es5_dot_prop = __webpack_require__("./node_modules/es5-dot-prop/index.js");
var es5_dot_prop_default = /*#__PURE__*/__webpack_require__.n(es5_dot_prop);

// CONCATENATED MODULE: ./src/core/monitoring.js
function monitoring_typeof(obj) { "@babel/helpers - typeof"; return monitoring_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, monitoring_typeof(obj); }

function monitoring_extends() { monitoring_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return monitoring_extends.apply(this, arguments); }

function monitoring_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ monitoring_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == monitoring_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function monitoring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function monitoring_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { monitoring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { monitoring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function monitoring_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function monitoring_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function monitoring_createClass(Constructor, protoProps, staticProps) { if (protoProps) monitoring_defineProperties(Constructor.prototype, protoProps); if (staticProps) monitoring_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }




var get = es5_dot_prop_default.a.get,
    set = es5_dot_prop_default.a.set;
var _Constants$monitoring = constants.monitoring.SEMAAS,
    monitoring_mrId = _Constants$monitoring.mrId,
    monitoring_nameSpace = _Constants$monitoring.nameSpace,
    identifier = _Constants$monitoring.identifier,
    consumerId = _Constants$monitoring.consumerId,
    policy = _Constants$monitoring.policy,
    tsecStorageKey = _Constants$monitoring.tsecStorageKey,
    monitoring_externalEventsCodes = constants.externalEventsCodes; // const flattenObject = (object, separator = '=', join = ', ') => Object.keys(object).map(key => `${key}${separator}${object[key]}`).join(join);

var monitoring_PAGE_READY = monitoring_externalEventsCodes.PAGE_READY,
    monitoring_PARSE_ROUTE = monitoring_externalEventsCodes.PARSE_ROUTE,
    monitoring_AFTER_PUBLISH = monitoring_externalEventsCodes.AFTER_PUBLISH,
    monitoring_NAV_REQUEST = monitoring_externalEventsCodes.NAV_REQUEST,
    monitoring_BEFORE_SET_ATTR_TO_NODE = monitoring_externalEventsCodes.BEFORE_SET_ATTR_TO_NODE,
    monitoring_AFTER_SET_ATTR_TO_NODE = monitoring_externalEventsCodes.AFTER_SET_ATTR_TO_NODE,
    monitoring_BEFORE_CREATE_NODE = monitoring_externalEventsCodes.BEFORE_CREATE_NODE,
    monitoring_AFTER_CREATE_NODE = monitoring_externalEventsCodes.AFTER_CREATE_NODE,
    monitoring_BEFORE_IMPORT = monitoring_externalEventsCodes.BEFORE_IMPORT,
    monitoring_AFTER_IMPORT = monitoring_externalEventsCodes.AFTER_IMPORT,
    monitoring_PAGE_REQUEST = monitoring_externalEventsCodes.PAGE_REQUEST,
    monitoring_PAGE_RESPONSE = monitoring_externalEventsCodes.PAGE_RESPONSE,
    monitoring_DATA_LOAD = monitoring_externalEventsCodes.DATA_LOAD,
    monitoring_TEMPLATE_TRANSITION_END = monitoring_externalEventsCodes.TEMPLATE_TRANSITION_END,
    monitoring_TRACK_EVENT = monitoring_externalEventsCodes.TRACK_EVENT,
    monitoring_TEMPLATE_REGISTERED = monitoring_externalEventsCodes.TEMPLATE_REGISTERED,
    monitoring_ROUTER_BACKSTEP = monitoring_externalEventsCodes.ROUTER_BACKSTEP,
    monitoring_LOG_EVENT = monitoring_externalEventsCodes.LOG_EVENT;

var monitoring_Monitoring = /*#__PURE__*/function () {
  function Monitoring(bridge) {
    monitoring_classCallCheck(this, Monitoring);

    this.bridge = null;
    this.application = null;
    var _bridge$semaas = bridge.semaas,
        semaas = _bridge$semaas === void 0 ? {} : _bridge$semaas,
        logs = bridge.logs;

    if (logs) {
      var monitorArchitecture = false; // Boolean(semaas && semaas.architecture);

      var applicationSemaasConfiguration = this.getApplicationConfiguration(semaas);
      this.application = this.initilizeSEMaaSAdapter(applicationSemaasConfiguration);

      if (monitorArchitecture) {
        var bridgeSemaasConfiguration = this.getBridgeConfiguration(semaas);
        this.bridge = this.initilizeSEMaaSAdapter(bridgeSemaasConfiguration);
      }
    }
  }

  monitoring_createClass(Monitoring, [{
    key: "flush",
    value: function () {
      var _flush = monitoring_asyncToGenerator( /*#__PURE__*/monitoring_regeneratorRuntime().mark(function _callee() {
        return monitoring_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.application.flushAll());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function flush() {
        return _flush.apply(this, arguments);
      }

      return flush;
    }()
  }, {
    key: "getBridgeConfiguration",
    value: function getBridgeConfiguration(semaasConfiguration) {
      var tsec2JWTEndpoint = semaasConfiguration.tsec2JWTEndpoint,
          region = semaasConfiguration.region,
          dnsTld = semaasConfiguration.dnsTld,
          version = semaasConfiguration.version;
      return {
        policy: policy,
        // bridge constant
        mrId: monitoring_mrId,
        // bridge constant
        nameSpace: monitoring_nameSpace,
        // bridge constant
        identifier: identifier,
        // bridge constant
        consumerId: consumerId,
        // bridge constant
        tsec2JWTEndpoint: tsec2JWTEndpoint,
        // configuration object,
        region: region,
        // configuration object
        dnsTld: dnsTld,
        // configuration object
        version: version // configuration object

      };
    }
  }, {
    key: "getApplicationConfiguration",
    value: function getApplicationConfiguration(semaasConfiguration) {
      var tsec2JWTEndpoint = semaasConfiguration.tsec2JWTEndpoint,
          policy = semaasConfiguration.policy,
          mrId = semaasConfiguration.mrId,
          nameSpace = semaasConfiguration.nameSpace,
          consumerId = semaasConfiguration.consumerId,
          region = semaasConfiguration.region,
          dnsTld = semaasConfiguration.dnsTld,
          version = semaasConfiguration.version,
          logLevel = semaasConfiguration.logLevel,
          _semaasConfiguration$ = semaasConfiguration.tsecStorageKey,
          tsecStorageKey = _semaasConfiguration$ === void 0 ? 'tsec' : _semaasConfiguration$;
      return {
        policy: policy,
        // configuration object
        mrId: mrId,
        // configuration object
        nameSpace: nameSpace,
        // configuration object
        identifier: 'application',
        // application constant
        consumerId: consumerId,
        // configuration object
        tsec2JWTEndpoint: tsec2JWTEndpoint,
        // configuration object
        region: region,
        // configuration object
        dnsTld: dnsTld,
        // configuration object
        version: version,
        // configuration object
        logLevel: logLevel,
        // configuration object
        tsecStorageKey: tsecStorageKey // configuration object

      };
    }
  }, {
    key: "initilizeSEMaaSAdapter",
    value: function initilizeSEMaaSAdapter(configuration) {
      return new cells_semaas_adapter_default.a(configuration);
    }
  }, {
    key: "logBridge",
    value: function logBridge(log) {
      this.bridge.log(log);
    }
  }, {
    key: "logApplication",
    value: function logApplication(log) {
      this.application.log(log);
    }
  }, {
    key: "ingest",
    value: function ingest(spans) {
      this.application.ingest(spans);
    }
  }, {
    key: "createSpan",
    value: function createSpan(data) {
      return this.application && this.application.createSpan(data);
    }
  }, {
    key: "createUUID",
    value: function createUUID() {
      return this.application && this.application.createUUID();
    }
  }, {
    key: "hasBridgeLoggingEnabled",
    value: function hasBridgeLoggingEnabled() {
      return !!this.bridge;
    }
  }, {
    key: "hasApplicationLoggingEnabled",
    value: function hasApplicationLoggingEnabled() {
      return !!this.application;
    }
  }, {
    key: "buildLog",
    value: function buildLog(eventName, data) {
      var detail = data.detail;
      var DEFAULT_LOG = {
        message: "cells-bridge::".concat(eventName),
        properties: {}
      };

      var log = monitoring_extends({}, detail, DEFAULT_LOG);

      switch (eventName) {
        case monitoring_PAGE_READY:
          {
            var page = data.page,
                components = data.components;
            log.properties = {
              page: page,
              components: components
            };
            break;
          }

        case monitoring_PARSE_ROUTE:
          {
            var name = data.name,
                params = data.params,
                pattern = data.pattern; //const normalizedParams = flattenObject(params);

            log.properties = {
              route: name,
              //params: normalizedParams,
              params: params,
              pattern: pattern
            };
            break;
          }

        case monitoring_NAV_REQUEST:
          {
            var event = data.event,
                _detail = data.detail;
            var _page = _detail.page;
            var _params = event.detail; //const normalizedParams = flattenObject(params);
            //trace.description = `Page: ${page}, params: ${normalizedParams}`;

            log.properties = {
              page: _page,
              params: _params
            };
            break;
          }

        case monitoring_PAGE_REQUEST:
          {
            var _params2 = data.params,
                url = data.url;
            log.properties = {
              params: _params2,
              url: url
            };
            break;
          }

        case monitoring_PAGE_RESPONSE:
          {
            log.properties = monitoring_extends({}, data);
            break;
          }
        // Special case.
        // We canalize the log message through the rest of bridge events - as we need to deflate data from channels

        case monitoring_LOG_EVENT:
          {
            var _detail2 = data.detail,
                _event = data.event;
            var message = _detail2.message,
                properties = _detail2.properties;
            var eventDetail = _event.detail;
            log.message = message;
            log.properties = this.unflattenData(properties, eventDetail); // unflatten(properties, event)

            break;
          }

        case monitoring_AFTER_PUBLISH:
        case monitoring_BEFORE_SET_ATTR_TO_NODE:
        case monitoring_AFTER_SET_ATTR_TO_NODE:
        case monitoring_BEFORE_CREATE_NODE:
        case monitoring_AFTER_CREATE_NODE:
        case monitoring_BEFORE_IMPORT:
        case monitoring_AFTER_IMPORT:
        case monitoring_DATA_LOAD:
        case monitoring_TEMPLATE_TRANSITION_END:
        case monitoring_TRACK_EVENT:
        case monitoring_TEMPLATE_REGISTERED:
        case monitoring_ROUTER_BACKSTEP:
          break;
      }

      return log;
    }
  }, {
    key: "isBridgeLoggableEvent",
    value: function isBridgeLoggableEvent(eventName) {
      var LOGGABLE_EVENTS = [monitoring_PAGE_READY, monitoring_PARSE_ROUTE, monitoring_NAV_REQUEST, monitoring_PAGE_REQUEST, monitoring_PAGE_RESPONSE];
      return LOGGABLE_EVENTS.includes(eventName);
    }
  }, {
    key: "unflattenData",
    value: function unflattenData(properties, values) {
      var result = {};
      Object.keys(properties).forEach(function (key) {
        var property = properties[key];
        var value = null;

        if (property instanceof Object) {
          var valuePath = property.bind;
          value = get(values, valuePath);
        } else {
          value = property;
        }

        set(result, key, value);
      });
      return result;
    }
  }]);

  return Monitoring;
}();


// CONCATENATED MODULE: ./src/core/featureflag/feature-flag-component.js
function feature_flag_component_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function feature_flag_component_extends() { feature_flag_component_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return feature_flag_component_extends.apply(this, arguments); }


function defaultChangedCallback(fn) {
  if (typeof fn === 'function') {
    _defaultCallbackElement = fn;
  }
}
function extend(cellsComponent, bridge) {
  var extraConnections = _defaultConnections();

  var spec = cellsComponent.spec;
  var nodeFFCallback = cellsComponent.node[BRIDGE_BIND_KEY] || _defaultCallbackElement;
  Object.defineProperty(cellsComponent.node, BRIDGE_BIND_KEY, {
    value: function value() {
      return _nodeFFCallbackWrap(cellsComponent, bridge, nodeFFCallback);
    }
  }); // update connections with new connection of FeatureFlag

  if (spec.connections && spec.connections["in"]) {
    feature_flag_component_extends(spec.connections["in"], extraConnections["in"]);
  } else if (spec.connections) {
    feature_flag_component_extends(spec.connections, extraConnections);
  } else {
    spec.connections = extraConnections;
  } // set last value in collection. These is used in "ComponentConnector" when publish in output channel from events


  lastValue.set(cellsComponent.node, cellsComponent.node[BRIDGE_BIND_KEY]());
  return cellsComponent;
}
/* harmony default export */ var feature_flag_component = ({
  extend: extend,
  defaultChangedCallback: defaultChangedCallback,
  BRIDGE_CHANNEL_KEY: BRIDGE_CHANNEL_KEY
}); // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// . . . . .. . . . . .. . . . .Private. . . . .. . . . .  . . . . . . .
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

var _defaultCallbackElement = _nodeFFCalback_toggleVisibility;

function _defaultConnections() {
  return {
    "in": feature_flag_component_defineProperty({}, BRIDGE_CHANNEL_KEY, {
      bind: BRIDGE_BIND_KEY
    })
  };
}

;

function _nodeFFCalback_toggleVisibility(fFValue, cellsComponent) {
  cellsComponent.node.style.visibility = fFValue ? 'initial' : 'hidden';
  return !!fFValue;
}

function _nodeFFCallbackWrap(cellsComponent, _ref, fFCallback) {
  var featureFlagCollection = _ref.featureFlagCollection,
      ComponentConnector = _ref.ComponentConnector;

  var _ffValue = featureFlagCollection.value(cellsComponent.spec.featureFlag);

  var _ffValueResult = fFCallback.call(cellsComponent.node, _ffValue, cellsComponent) === false ? false : true;

  var _connections = cellsComponent.spec.connections;

  if (_ffValueResult) {
    ComponentConnector._updateInConnections(cellsComponent.node, _connections["in"]);
  } else if (ComponentConnector.subscriptors.has(cellsComponent.node)) {
    var inConnections = Object.keys(_connections["in"]).filter(function (k) {
      return k !== BRIDGE_CHANNEL_KEY;
    });
    ComponentConnector.unsubscribe(inConnections, cellsComponent.node);
  } // set last value in collection. These is used in "ComponentConnector" when publish in output channel from events


  lastValue.set(cellsComponent.node, _ffValueResult);
  return _ffValueResult;
}
// CONCATENATED MODULE: ./src/core/manager/post-message.js
function post_message_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function post_message_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function post_message_createClass(Constructor, protoProps, staticProps) { if (protoProps) post_message_defineProperties(Constructor.prototype, protoProps); if (staticProps) post_message_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @typedef {import('../bridge')} CellsBridge
 */

/**
 * 
 *  @class PostMessageManager
 */
var PostMessageManager = /*#__PURE__*/function () {
  /**
   * @param {CellsBridge} bridge
   */
  function PostMessageManager(bridge) {
    post_message_classCallCheck(this, PostMessageManager);

    if (!bridge.postMessageTargetOrigin) {
      this.enabled = false;
    } else {
      if (bridge.postMessageTargetOrigin === '*') {
        this.enabled = false;
        console.warn("For security reasons postMessageTargetOrigin can't be the wildcard '*'. See docs for more info. ");
      } else {
        this.enabled = true;
        this.postMessageTargetOrigin = bridge.postMessageTargetOrigin;
      }
    }

    this.componentConnector = bridge.ComponentConnector;
    this.bridgeChannelManager = bridge.BridgeChannelManager;
  }
  /**
   * Handles the postMessage events sent to this window from its parent.
   * It transforms them into channels __bridge_post_message_{your-event-name} including the payload, to do so the postMessage must be:
   * {
   *  "event" : "your-event-name",
   *  "detail" : <any>
   * }
   * Creates and listens to the private channel __bridge_ch_send_post_message to send postMessages to parent window.
   */


  post_message_createClass(PostMessageManager, [{
    key: "setupPostMessages",
    value: function setupPostMessages() {
      var _this = this;

      if (this.enabled) {
        window.addEventListener('message', function (_ref) {
          var data = _ref.data;

          if (data.event) {
            var channel = _this.bridgeChannelManager.getPostMessageChannel(data.event);

            var evt = _this.componentConnector.createEvent(data.event, data.detail);

            channel.next(evt);
          }
        });

        this._sendPostMessage({
          event: '__bridge-ready'
        });

        this.bridgeChannelManager.getBridgeChannel('send_post_message').subscribe(function (evt) {
          return _this._sendPostMessage(evt.detail);
        });
      }
    }
    /**
     * @param {Event} evt
     */

  }, {
    key: "_sendPostMessage",
    value: function _sendPostMessage(evt) {
      window.parent && window.parent.postMessage({
        eventName: evt.event,
        eventDetail: evt.detail
      }, this.postMessageTargetOrigin);
    }
  }]);

  return PostMessageManager;
}();

/* harmony default export */ var post_message = (PostMessageManager);
// CONCATENATED MODULE: ./src/core/manager/application-config.js
function application_config_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function application_config_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function application_config_createClass(Constructor, protoProps, staticProps) { if (protoProps) application_config_defineProperties(Constructor.prototype, protoProps); if (staticProps) application_config_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var CONFIG_STORAGE_PREFIX = '__app_';
var CONFIG_STORAGE_KEY = 'config';

var application_config_ApplicationConfigManager = /*#__PURE__*/function () {
  function ApplicationConfigManager(_ref) {
    var ActionChannelManager = _ref.ActionChannelManager;

    application_config_classCallCheck(this, ApplicationConfigManager);

    this.ActionChannelManager = ActionChannelManager;
    this.storage = this._getAppConfigStorage();
  }

  application_config_createClass(ApplicationConfigManager, [{
    key: "_getAppConfigStorage",
    value: function _getAppConfigStorage() {
      return new CellsStorage({
        prefix: CONFIG_STORAGE_PREFIX,
        persistent: false
      });
    }
  }, {
    key: "saveAppConfig",
    value: function saveAppConfig(config) {
      var store = {};

      for (var prop in config) {
        if (config.hasOwnProperty(prop) && this.ActionChannelManager.isAllowedProperty(prop)) {
          store[prop] = config[prop];
        }
      }

      if (Object.keys(store).length > 0) {
        this.storage.setItem(CONFIG_STORAGE_KEY, store);
      }
    }
  }, {
    key: "loadAppConfig",
    value: function loadAppConfig() {
      var config = this.storage.getItem(CONFIG_STORAGE_KEY);

      for (var prop in config) {
        config.hasOwnProperty(prop) && this.ActionChannelManager.updateProperty(prop, config[prop]);
      }
    }
  }]);

  return ApplicationConfigManager;
}();

/* harmony default export */ var application_config = (application_config_ApplicationConfigManager);
// CONCATENATED MODULE: ./src/core/manager/application-state.js
function application_state_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function application_state_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function application_state_createClass(Constructor, protoProps, staticProps) { if (protoProps) application_state_defineProperties(Constructor.prototype, protoProps); if (staticProps) application_state_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var application_state_CONFIG_STORAGE_PREFIX = '__app_';
var application_state_CONFIG_STORAGE_KEY = 'state';

var application_state_ApplicationStateManager = /*#__PURE__*/function () {
  function ApplicationStateManager(_ref) {
    var ComponentConnector = _ref.ComponentConnector;

    application_state_classCallCheck(this, ApplicationStateManager);

    this.ComponentConnector = ComponentConnector;
    this.storage = this._getAppStateStorage();
  }

  application_state_createClass(ApplicationStateManager, [{
    key: "_getAppStateStorage",
    value: function _getAppStateStorage() {
      return new CellsStorage({
        prefix: application_state_CONFIG_STORAGE_PREFIX,
        persistent: false
      });
    }
  }, {
    key: "saveAppState",
    value: function saveAppState(channelName, value) {
      var state = this.storage.getItem(application_state_CONFIG_STORAGE_KEY) || {};
      state[channelName] = value;
      this.storage.setItem(application_state_CONFIG_STORAGE_KEY, state);
    }
  }, {
    key: "loadAppState",
    value: function loadAppState() {
      var state = this.storage.getItem(application_state_CONFIG_STORAGE_KEY);

      for (var channel in state) {
        this.ComponentConnector.publish(channel, state[channel]);
      }
    }
  }]);

  return ApplicationStateManager;
}();

/* harmony default export */ var application_state = (application_state_ApplicationStateManager);
// CONCATENATED MODULE: ./src/core/bridge.js
function bridge_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ bridge_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == bridge_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function bridge_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function bridge_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { bridge_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { bridge_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function bridge_extends() { bridge_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return bridge_extends.apply(this, arguments); }

function bridge_typeof(obj) { "@babel/helpers - typeof"; return bridge_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, bridge_typeof(obj); }

function bridge_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function bridge_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function bridge_createClass(Constructor, protoProps, staticProps) { if (protoProps) bridge_defineProperties(Constructor.prototype, protoProps); if (staticProps) bridge_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// eslint-disable-next-line no-unused-vars




















var bridge_dasherize = utils.dasherize,
    bridge_camelize = utils.camelize,
    bridge_findProperty = utils.findProperty;
var bridge_bindingCodes = constants.bindingCodes,
    bridge_binding = constants.binding,
    bridge_componentsPath = constants.componentsPath,
    bridge_composerEndpoint = constants.composerEndpoint,
    bridge_externalEvents = constants.externalEvents,
    bridge_externalEventsCodes = constants.externalEventsCodes,
    DEFAULT_INITIAL_TEMPLATE = constants.initialTemplate,
    DEFAULT_PAGES_PATH = constants.pagesPath,
    bridge_prplCodes = constants.prplCodes,
    bridge_prpl = constants.prpl,
    bridge_preRenderState = constants.preRenderState,
    bridge_renderEngines = constants.renderEngines,
    bridge_pageTypes = constants.pageTypes;
var ALWAYS = bridge_binding.DEFAULT;
var DEFER = bridge_prpl.DEFAULT;
var coreInstances = 0;
var globalChannel = {}; // @TODO: Agregar los imports y eliminar los `new this.*`
// @TODO: Revisar los métodos que manipulan templates. Quizás deban ser responsabilidad del TemplateManager

var bridge_CellsBridge = /*#__PURE__*/function () {
  /**
  * Binding Type
  *
  * 'always'      => Register all components of all views. Never unregister them.
  * 'delayed'     => Like 'always' but waits for idle to start the animation.
  * 'ui'          => Register only ui and cross components of all views. Never
  *                  unregister them. Datamanagers are only connected when the
  *                  animation of the current view finishes.
  * 'currentview' => Register all components of the current view when the
  *                  animation finishes.
  *
  * @type {String}
  */

  /**
   *
   * @type {String}
   *
   *  none => Don't use bundled pages
   *  defer => Use bundled pages. It renders the page once every component has been loaded.
   *  progressive => Use bundled pages. It renders the page immediately while its component are loading.
   *  hero => Use bundled pages. It renders the page immediately while its component are loading using priorities.
   */

  /**
  * Pages Cache
  *
  * Saves page definitions into localstorage.
  *
  * @type {Boolean}
  */

  /**
  * PubSub Context
  *
  * 'global'   => Notifies all components of all bridge instances.
  * 'local'    => Notifies components created by the current bridge instance.
  *
  * @type {String}
  */

  /**
   * URL Components Path
   *
   * URL path to load components.
   *
   * @type {String}
   */

  /**
  * URL templates Path
  *
  * URL path to load templates.
  *
  * @type {String}
  */

  /**
  * Cross container node Id
  *
  * @type {String}
  */

  /**
  * Prints debug info
  *
  * @type {Boolean}
  */

  /**
  * Proactive Cache.
  * Loads future pages definition.
  *
  * @type {Boolean}
  */

  /**
  * Proactive Render
  * Render future pages.
  *
  * @type {Boolean}
  */

  /**
  * Prefix for LocalStorage keys
  *
  * @type {String}
  */

  /**
  * Lib version.
  *
  * @type {string}
  */

  /**
  * Max number of views
  *
  * Keeps this number of template alive.
  *
  * @type {Number}
  */

  /**
   * The name of the initial template that gets rendered
   *
   * @type {String}
   */

  /**
   *  The node where the template will be rendered
   */

  /**
  * Events to expose
  *
  *
  * @type {Array}
  */

  /**
   * The lists of routes that are rendered through a WebComponent.
   *
   * @type {Array}
   */

  /**
   * The path to the folder that contains the components that renders a route.
   *
   * @type {String}
   */

  /**
   * The list of templates that are remote and need to be fetched from a remote server
   * @type {Array}
   */

  /**
   * If it is true, the Bridge will use the Composer Engine to get the json
   * pages (composer mocks)
   * @type {Boolean}
   */

  /**
   * Json that contains the App definition.
   * This is required by Composer Engine.
   *
   * @type {JSON}
   */
  function CellsBridge(config) {
    var _this = this;

    bridge_classCallCheck(this, CellsBridge);

    this.ComponentConnector = null;
    this.DomManager = null;
    this.ImportManager = null;
    this.PageManager = null;
    this.Router = null;
    this.TemplateManager = null;
    this.Sanitizer = null;
    this.BridgeChannelManager = null;
    this.binding = ALWAYS;
    this.prplLevel = DEFER;
    this.cache = true;
    this.channel = 'global';
    this.componentsPath = bridge_componentsPath;
    this.templatesPath = '';
    this.crossContainerId = '__cross';
    this.debug = true;
    this.preCache = false;
    this.preRender = false;
    this.storagePrefix = '__bridge-';
    this.version = '3.18.0';
    this.viewLimit = 1000;
    this.initialTemplate = DEFAULT_INITIAL_TEMPLATE;
    this.__mainNodeElement = null;
    this.externalEvents = bridge_externalEvents;
    this.pages = [];
    this.pagesPath = DEFAULT_PAGES_PATH;
    this.remoteTemplates = [];
    this.useComposerEngine = false;
    this.appJson = '';
    this.appId = '';
    this.composerEndpoint = bridge_composerEndpoint;
    this.templatesPath = '';
    this.monitoring = null;
    this.logs = false;
    this.navRequestListener = null;
    var NAV_REQUEST = bridge_externalEventsCodes.NAV_REQUEST,
        ROUTER_BACKSTEP = bridge_externalEventsCodes.ROUTER_BACKSTEP;

    if (!config || bridge_typeof(config) !== 'object') {
      config = {};
    }

    config.prplLevel = this._normalizePrplLevel(config.prplLevel);
    this.preRenderingPages = {};
    var dependencies = config.dependencies;
    delete config.dependencies;

    bridge_extends(this, config);

    this._initDependencies(dependencies);

    if (this.channel === 'global') {
      this.ComponentConnector.manager.channels = globalChannel;
    }

    if (this.useComposerEngine) {
      this._initComposerEngine();
    }

    if (!this.mainNode) {
      console.warn('You should indicate the main node of your app');
    } else {
      this._plugExternalEvents();
    }

    if (config.featureFlag) {
      if (config.featureFlag.subscribe) {
        this.featureFlagCollection.subscribe(config.featureFlag.subscribe);
      }

      if (config.featureFlag.defaultChangedCallback) {
        feature_flag_component.defaultChangedCallback(config.featureFlag.defaultChangedCallback);
      }

      if (config.featureFlag.defaultFeatures) {
        this.featureFlagCollection.update({
          features: config.featureFlag.defaultFeatures
        });
      }

      if (config.featureFlag.src) {
        fetch(config.featureFlag.src).then(function (response) {
          return response.json();
        }).then(function (response) {
          return _this.featureFlagCollection.update(response);
        });
      }
    }

    this.id = coreInstances++;

    this._initCrossComponents();

    if (this.cache) {
      this.PageManager.persistent = true;
    }

    if (this.generateRequestUrl) {
      console.assert(typeof this.generateRequestUrl === 'function', 'generateRequestUrl has to be a function');
      this.PageManager.generateRequestUrl = this.generateRequestUrl;
    }

    if (this.onPageDefinitionNotFound) {
      console.assert(typeof this.onPageDefinitionNotFound === 'function', 'onPageDefinitionNotFound has to be a function');
      this.PageManager.onPageDefinitionNotFound = this.onPageDefinitionNotFound;
    }

    this._sanitizePages();

    if (this.interceptor && typeof this.interceptor === 'function') {
      this.Router.channelManager = this.BridgeChannelManager;
      this.Router.interceptor = this.interceptor;
    }

    window.$core = window.$core || [];
    /* istanbul ignore else */

    if (this.debug) {
      window.$core.push(this);
      this.printDebugInfo();
    } else {
      window.$core.push({
        // monitoring
        log: function log(_log2) {
          return _this.log(_log2);
        },
        ingest: function ingest(spans) {
          return _this.ingest(spans);
        },
        createSpan: function createSpan(data) {
          return _this.createSpan(data);
        },
        createUUID: function createUUID() {
          return _this.createUUID();
        },
        flush: function flush() {
          return _this.flush();
        },
        // bridge
        logout: function logout() {
          return _this.logout();
        },
        subscribeToEvent: function subscribeToEvent(eventName, callback) {
          return _this.subscribeToEvent(eventName, callback);
        },
        registerInConnection: function registerInConnection(channel, node, callback) {
          return _this.registerInConnection(channel, node, callback);
        },
        unsubscribe: function unsubscribe(channels, node) {
          return _this.unsubscribe(channels, node);
        },
        registerOutConnection: function registerOutConnection(channelName, node, bindName, options) {
          return _this.registerOutConnection(channelName, node, bindName, options);
        },
        publish: function publish(channelName, value, options) {
          return _this.publish(channelName, value, options);
        },
        navigate: function navigate(page, params) {
          return _this.navigate(page, params);
        },
        updateApplicationConfig: function updateApplicationConfig(config, options) {
          return _this.updateApplicationConfig(config, options);
        },
        // feature flag
        updateFeatureFlagCollection: function updateFeatureFlagCollection(featureResponse) {
          return _this.updateFeatureFlagCollection(featureResponse);
        },
        getFeatureFlagCollection: function getFeatureFlagCollection() {
          return _this.getFeatureFlagCollection();
        },
        // analytics
        trackEvent: function trackEvent(data) {
          return _this.trackEvent(data);
        },
        // native
        navigateToNative: function navigateToNative(page, params) {
          return _this.navigateToNative(page, params);
        },
        backStep: function backStep() {
          return _this.backStep();
        },
        // router interceptor
        updateInterceptorContext: function updateInterceptorContext(ctx) {
          return _this.updateInterceptorContext(ctx);
        },
        resetInterceptorContext: function resetInterceptorContext() {
          return _this.resetInterceptorContext();
        },
        getInterceptorContext: function getInterceptorContext() {
          return _this.getInterceptorContext();
        },
        setInterceptorContext: function setInterceptorContext(ctx) {
          return _this.setInterceptorContext(ctx);
        }
      });
    }

    window.cells = window.$core[0];
    this.BridgeChannelManager.initAppContextChannel();
    this.BridgeChannelManager.getCancelledBackNavigationChannel();
    this.BridgeChannelManager.getInterceptedNavigationChannel();
    this.ActionChannelManager.subscribeAll(); // Bridge is ready - execute queued bridge commands & load app config & state.

    this._executePendingBridgeQueue();

    this.ApplicationConfigManager.loadAppConfig();
    this.ApplicationStateManager.loadAppState();

    if (this.logs) {
      this._logBridgeReady();
    } // 1. Listen for route changes
    // @TODO: Revisar este binding de un método de otro objeto a otro objeto


    this.Router.handler = function () {
      return _this.routeHandler();
    };

    this.Router.addRoutes(this.routes);

    this._initSkipNavigations();

    this.Router.start();

    this.navRequestListener = function (info) {
      if (_this.Router.hashIsDirty) {
        window.location.hash = "#!";
      }

      var event = info.event;
      var navigationDetail = info.detail;
      var page = navigationDetail.page;
      var params = navigationDetail.params;
      var skipHistory = navigationDetail.skipHistory;
      var cleanUntil = navigationDetail.cleanUntil;
      var replace = navigationDetail.replace || false;
      var p = {};

      if (!page && navigationDetail.paramPage && event.detail) {
        page = event.detail[navigationDetail.paramPage];
      }

      if (event.detail && params) {
        for (var param in params) {
          if (event.detail.hasOwnProperty(param)) {
            p[params[param]] = event.detail[param];
          }
        }
      }

      if (cleanUntil) {
        _this.Router.clearStackUntil(cleanUntil);
      }

      _this.Router.go(page, p, replace, skipHistory);

      bridge_extends(_this, config);
    };

    manager_events.on(NAV_REQUEST, this.navRequestListener);
    manager_events.on(ROUTER_BACKSTEP, function (evt) {
      return _this.handleBack(evt);
    });
    this.PostMessageManager.setupPostMessages();
  }

  bridge_createClass(CellsBridge, [{
    key: "_sanitizePages",
    value: function _sanitizePages() {
      var _this2 = this;

      if (this.pages && !this.pageDefinitions) {
        for (var i = 0; i < this.pages.length; i++) {
          this.pages[i] = {
            name: this.pages[i],
            type: bridge_pageTypes.STATIC,
            adapter: this.onlyLitElements ? bridge_renderEngines.LIT_ELEMENT : undefined,
            hasModules: false
          };
        }

        this.pageDefinitions = this.pages;
      } else if (this.pages && this.pageDefinitions) {
        var _loop = function _loop(_i) {
          var j = _this2.pageDefinitions.findIndex(function (p) {
            return p.name === _this2.pages[_i];
          });

          if (j > -1) {
            _this2.pageDefinitions[j].type = _this2.pageDefinitions[j].type || bridge_pageTypes.STATIC;
            _this2.pages[_i] = _this2.pageDefinitions[j];
          } else {
            _this2.pages[_i] = {
              name: _this2.pages[_i],
              type: bridge_pageTypes.STATIC,
              adapter: _this2.onlyLitElements ? bridge_renderEngines.LIT_ELEMENT : undefined,
              hasModules: false
            };

            _this2.pageDefinitions.push(_this2.pages[_i]);
          }
        };

        for (var _i = 0; _i < this.pages.length; _i++) {
          _loop(_i);
        }
      }
    }
  }, {
    key: "updateInterceptorContext",
    value: function updateInterceptorContext(ctx) {
      this.Router.updateInterceptorContext(ctx);
    }
  }, {
    key: "resetInterceptorContext",
    value: function resetInterceptorContext() {
      this.Router.setInterceptorContext({});
    }
  }, {
    key: "getInterceptorContext",
    value: function getInterceptorContext() {
      return this.Router.getInterceptorContext();
    }
  }, {
    key: "setInterceptorContext",
    value: function setInterceptorContext(ctx) {
      return this.Router.setInterceptorContext(ctx);
    }
  }, {
    key: "updateFeatureFlagCollection",
    value: function updateFeatureFlagCollection(featureResponse) {
      this.featureFlagCollection.update(featureResponse);
    }
  }, {
    key: "getFeatureFlagCollection",
    value: function getFeatureFlagCollection() {
      return this.featureFlagCollection.collection;
    }
  }, {
    key: "loadCellsPage",
    get: function get() {
      return window.loadCellsPage;
    }
    /**
     * Performs the go back action. This method is overriden by the CellsNativeBridge
     *
     * @return {Object} the executed navigation, an object with properties:
     *  - from
     *  - to
     */

  }, {
    key: "goBack",
    value: function goBack() {
      return this.Router.back();
    }
    /**
     * This method is executed when the event router-backstep is fired.
     * It calls the hook method for handling backward navigations and if that method
     * allows the continuation, it does the navegation. Otherwise it will cancel the navigation
     * and publish the response in the channel __bridge_cancelled_back_navigation.
     */

  }, {
    key: "handleBack",
    value: function handleBack() {
      this.goBack();
    }
    /**
     * Execute queued bridge commands due to delayed instance of bridge and
     * premature execution of commands.
     *
     * @method
     * @private
     */

  }, {
    key: "_executePendingBridgeQueue",
    value: function _executePendingBridgeQueue() {
      var _this3 = this;

      if (Array.isArray(window.cellsBridgeQueue)) {
        window.cellsBridgeQueue.forEach(function (_ref) {
          var command = _ref.command,
              parameters = _ref.parameters;
          var queuedCommand = _this3[command];

          if (!queuedCommand) {
            console.log("WARNING: Invalid cells bridge command execution: ".concat(command, " (QUEUE)."));
            return;
          }

          console.log("Executing queued command ".concat(command, "."));
          queuedCommand.apply(_this3, parameters);
        });
        delete window.cellsBridgeQueue;
      }
    }
  }, {
    key: "_logBridgeReady",
    value: function _logBridgeReady() {
      var appId = this.appId,
          version = this.version,
          binding = this.binding,
          prplLevel = this.prplLevel,
          cache = this.cache,
          preCache = this.preCache,
          preRender = this.preRender;
      var message = "cells-bridge::ready";
      var properties = {
        appId: appId,
        version: version,
        binding: binding,
        href: window.location.href,
        prplLevel: prplLevel,
        cache: cache,
        preCache: preCache,
        preRender: preRender
      };
      var log = {
        message: message,
        properties: properties
      };
      this.logBridge(log);
    }
  }, {
    key: "_initSkipNavigations",
    value: function _initSkipNavigations() {
      if (this.skipNavigations && this.skipNavigations.length > 0) {
        for (var i = 0; i < this.skipNavigations.length; i++) {
          this.skipNavigations[i].skipHistory = true;
        }

        this.Router.addSkipNavigations(this.skipNavigations);
      }
    }
  }, {
    key: "_normalizePrplLevel",
    value: function _normalizePrplLevel(prplLevelCode) {
      var prplList = bridge_prpl.VALUES;
      var normalizedCode;

      if (prplList.indexOf(prplLevelCode) > -1) {
        normalizedCode = prplLevelCode;
      } else {
        normalizedCode = prplList[prplLevelCode] || DEFER;
      }

      return normalizedCode;
    }
  }, {
    key: "_dispatchEvent",
    value: function _dispatchEvent(name, payload) {
      var mainNode = this.getMainNode();
      var event = payload ? new CustomEvent(name, {
        detail: payload
      }) : new CustomEvent(name);
      mainNode.dispatchEvent(event);
    }
  }, {
    key: "_plugExternalEvents",
    value: function _plugExternalEvents() {
      var _this4 = this;

      var len = this.externalEvents.length;
      var mainNode = this.getMainNode();

      if (mainNode) {
        var _loop2 = function _loop2(i) {
          var eventName = _this4.externalEvents[i];
          manager_events.on(eventName, function (data) {
            _this4._dispatchEvent(eventName, data);

            if (_this4.logs) {
              _this4.monitor(eventName, data);
            }
          });
        };

        for (var i = 0; i < len; i++) {
          _loop2(i);
        }

        this._initEventChannels();
      } else {
        console.warn('The defined main node does not exist');
      }
    }
    /**
     * Send analytics data event to main node.
     * Cells Analytics Collector (Adobe / Target) are listening for main node event's and interept & process them.
     *
     * @param {Object} data Analytics info.
     */

  }, {
    key: "trackEvent",
    value: function trackEvent(data) {
      var TRACK_EVENT = bridge_externalEventsCodes.TRACK_EVENT; // We just emit a TRACK_EVENT event, modeled as an out connection (we respect normal analytics flow)

      manager_events.emit(TRACK_EVENT, {
        detail: data
      });
    }
  }, {
    key: "monitor",
    value: function monitor(eventName, data) {
      var LOG_EVENT = bridge_externalEventsCodes.LOG_EVENT;
      var isApplicationLogEvent = eventName === LOG_EVENT;
      var isLoggable = isApplicationLogEvent || this.isBridgeLoggableEvent(eventName);

      if (isLoggable) {
        var log = this.monitoring.buildLog(eventName, data);
        var method = isApplicationLogEvent ? 'log' : 'logBridge';
        this[method](log);
      }
    }
  }, {
    key: "isBridgeLoggableEvent",
    value: function isBridgeLoggableEvent(eventName) {
      return this.monitoring.isBridgeLoggableEvent(eventName);
    }
  }, {
    key: "flush",
    value: function () {
      var _flush = bridge_asyncToGenerator( /*#__PURE__*/bridge_regeneratorRuntime().mark(function _callee() {
        return bridge_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", this.monitoring.flush());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function flush() {
        return _flush.apply(this, arguments);
      }

      return flush;
    }()
  }, {
    key: "log",
    value: function log(_log) {
      this.hasApplicationLoggingEnabled() && this.monitoring.logApplication(_log);
    }
  }, {
    key: "logBridge",
    value: function logBridge(log) {
      this.hasBridgeLoggingEnabled() && this.monitoring.logBridge(log);
    }
  }, {
    key: "ingest",
    value: function ingest(spans) {
      this.hasApplicationLoggingEnabled() && this.monitoring.ingest(spans);
    }
  }, {
    key: "createSpan",
    value: function createSpan(data) {
      if (!this.hasApplicationLoggingEnabled()) {
        return {
          start: function start() {},
          finish: function finish() {}
        };
      }

      return this.monitoring.createSpan(data);
    }
  }, {
    key: "createUUID",
    value: function createUUID() {
      return this.monitoring.createUUID();
    }
  }, {
    key: "hasBridgeLoggingEnabled",
    value: function hasBridgeLoggingEnabled() {
      return this.monitoring.hasBridgeLoggingEnabled();
    }
  }, {
    key: "hasApplicationLoggingEnabled",
    value: function hasApplicationLoggingEnabled() {
      return this.monitoring.hasApplicationLoggingEnabled();
    }
  }, {
    key: "_initEventChannels",
    value: function _initEventChannels() {
      var mainNode = this.getMainNode();
      this.BridgeChannelManager.initEventChannels(mainNode, this.externalEvents);

      this._addInitialSubscribersToEvents();
    }
  }, {
    key: "_addInitialSubscribersToEvents",
    value: function _addInitialSubscribersToEvents() {
      if (this.eventSubscriptions && this.eventSubscriptions.length > 0) {
        this._subscribeToEvents(this.eventSubscriptions);
      }
    }
  }, {
    key: "_subscribeToEvents",
    value: function _subscribeToEvents(eventSubscriptions) {
      var _this5 = this;

      eventSubscriptions.forEach(function (subscription) {
        var event = subscription.event,
            callback = subscription.callback;

        _this5.subscribeToEvent(event, callback);
      });
    }
    /**
     * Initialization of cross components container.
     * Check if cross component container exists. Otherwise, it will be created.
     *
     * @private
     */

  }, {
    key: "_initCrossComponents",
    value: function _initCrossComponents() {
      var crossContainerTemplateId = this.TemplateManager.computeTemplateId(this.crossContainerId);
      var crossContainer = this.TemplateManager.get(crossContainerTemplateId);
      var crossContainerElement = document.getElementById(crossContainerTemplateId); // no cross container registered on memory

      if (!crossContainer) {
        if (!crossContainerElement) {
          // no html element for cross container, we build it from scratch
          crossContainer = this.TemplateManager.createTemplate(this.crossContainerId, {
            tagName: 'div'
          });
          document.body.appendChild(crossContainer.node);
        } else {
          // html element found. we register it
          this.usingDeclarativeCrossContainer = true;
          this.TemplateManager.createTemplate(this.crossContainerId, {
            node: crossContainerElement
          });
        }
      }
    }
  }, {
    key: "_initDependencies",
    value: function _initDependencies(dependencies) {
      dependencies = bridge_extends({
        ComponentConnector: component_connector_ComponentConnector,
        DomManager: dom,
        ImportManager: manager_import,
        TemplateManager: template_CellsManagerTemplate,
        PageManager: page_CellsManagerPage,
        Router: router_Router,
        Sanitizer: sanitizer_CellsBridgeComposerSanitizer,
        BridgeChannelManager: bridge_channels_BridgeChannelManager,
        ActionChannelManager: action_channels_ActionChannelManager,
        monitoring: monitoring_Monitoring,
        featureFlagCollection: FeatureFlagCollection,
        PostMessageManager: post_message,
        ApplicationConfigManager: application_config,
        ApplicationStateManager: application_state
      }, dependencies);

      for (var dependence in dependencies) {
        if (dependencies.hasOwnProperty(dependence)) {
          this[dependence] = new dependencies[dependence](this);
        }
      }
    }
  }, {
    key: "_initComposerEngine",
    value: function _initComposerEngine() {
      /* global composerEngine */
      this.composerEngine = new ComposerEngineProxy(this.ComponentConnector.manager, composerEngine);
      this.composerEngine.init();
      this.PageManager.composerEngine = this.composerEngine;
    }
  }, {
    key: "_createCellsComponent",
    value: function _createCellsComponent(spec, context) {
      var cmp = new CellsBridgeComponent(spec, context);

      if (spec.featureFlag) {
        feature_flag_component.extend(cmp, this);
      }

      return cmp;
    }
  }, {
    key: "createCCComponent",
    value: function createCCComponent(spec) {
      var container = this.TemplateManager.get(this.crossContainerId);
      var id = spec.properties.id;
      var selector = id ? "#".concat(id) : spec.tagName;
      var node = container.node.querySelector(selector);

      if (!node) {
        var cmp = this._createCellsComponent(spec, this);

        cmp.__parentTemplate = container;
        this.ComponentConnector.registerComponent(cmp);
        return cmp;
      } else {
        this.ComponentConnector.progressiveRegisterConnections(node, spec.connections);
      }
    }
  }, {
    key: "createUIComponent",
    value: function createUIComponent(spec) {
      var ALWAYS = bridge_bindingCodes.ALWAYS,
          DELAYED = bridge_bindingCodes.DELAYED,
          UI = bridge_bindingCodes.UI;
      var bindingType = this.binding;

      var cmp = this._createCellsComponent(spec, this);

      if (bindingType === ALWAYS || bindingType === DELAYED || bindingType === UI) {
        this.ComponentConnector.registerComponent(cmp);
      }

      return cmp;
    }
  }, {
    key: "createDMComponent",
    value: function createDMComponent(spec) {
      var ALWAYS = bridge_bindingCodes.ALWAYS,
          DELAYED = bridge_bindingCodes.DELAYED;
      var bindingType = this.binding;

      var cmp = this._createCellsComponent(spec, this);

      if (bindingType === ALWAYS || bindingType === DELAYED) {
        this.ComponentConnector.registerComponent(cmp);
      }

      return cmp;
    }
  }, {
    key: "createComponentsByType",
    value: function createComponentsByType(collection, template) {
      var _this6 = this;

      return [].concat(collection['CC'].map(function (item) {
        return _this6.createCCComponent(item);
      })).concat(collection['UI'].map(function (item) {
        return _this6.createUIComponent(item);
      })).concat(collection['DM'].map(function (item) {
        return _this6.createDMComponent(item);
      })).filter(function (cmp) {
        return cmp != undefined;
      }).map(function (cmp) {
        cmp.__parentTemplate = cmp.__parentTemplate || template;
        return cmp;
      });
    }
  }, {
    key: "_insideLayout",
    value: function _insideLayout(zone) {
      return zone != undefined && zone.split('.').length === 2;
    }
  }, {
    key: "_createComponents",
    value: function _createComponents(response, template) {
      var _this7 = this;

      var isPreRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var PAGE_READY = bridge_externalEventsCodes.PAGE_READY;
      var page = response.page;
      var options = this;
      var collection = this.Sanitizer.split(response.components);
      var components = this.createComponentsByType(collection, template);
      var unresolvedComponents = [];
      var templateParents = [];
      var findFeatureFlagProperties = bridge_findProperty('featureFlag');
      components.map(function (cmp) {
        return findFeatureFlagProperties(cmp.spec.connections);
      }).forEach(this.featureFlagCollection.add, this.featureFlagCollection);
      var containedComponents = components.filter(function (component) {
        return _this7._insideLayout(component.zone);
      });
      components = components.filter(function (component) {
        return !_this7._insideLayout(component.zone);
      });
      components = components.concat(containedComponents);

      for (var i = 0, l = components.length; i < l; i++) {
        // 9. Sets default attributes
        components[i].setProps();
        components[i].setAttrs();
        var component = components[i];
        var parentName = component.__parentTemplate.name;

        if (!templateParents[parentName]) {
          templateParents[parentName] = this.TemplateManager.get(parentName);
        } // 9.1 Append components to template


        templateParents[parentName].append(component);
        var adapter = this.ComponentConnector.adapterResolver.getComponentAdapter(component);

        if (adapter.isUnresolved(component.node)) {
          unresolvedComponents.push(component);
        }
      }

      manager_events.emit(PAGE_READY, {
        page: page,
        components: response.components.map(function (c) {
          return c.tagName;
        }).join(', ')
      });

      switch (this.prplLevel) {
        case bridge_prplCodes.NONE:
        case bridge_prplCodes.DEFER:
          this.ImportManager.loadComponent(unresolvedComponents, options.componentsPath).then(function () {
            _this7.selectTemplate(page, isPreRendering);
          });
          break;

        case bridge_prplCodes.PROGRESSIVE:
          this.ImportManager.loadComponent(unresolvedComponents, options.componentsPath);
          break;

        case bridge_prplCodes.HERO:
          this.selectTemplate(page, isPreRendering);
          this.ImportManager.loadComponentByPriority(unresolvedComponents, options.componentsPath);
          break;
      }
    }
  }, {
    key: "createPageFromWebComponent",
    value: function createPageFromWebComponent(pageDefinition) {
      var name = pageDefinition.name,
          hasModules = pageDefinition.hasModules;
      var componentName = "".concat(name, "-page");
      var component = this.TemplateManager.getNode(name);
      this.BridgeChannelManager.getPrivate(name);

      if (!component) {
        component = this.TemplateManager.createTemplate(name, {
          tagName: componentName
        });
        var adapter = this.ComponentConnector.adapterResolver.getAdapterByName(pageDefinition.adapter);

        if (adapter.isUnresolved(component.node)) {
          if (pageDefinition.adapter === bridge_renderEngines.POLYMER) {
            return this.loadPolymerWebComponent(name, hasModules);
          } else {
            if (this.loadCellsPage) {
              // (loadCellsPage) Guard for compatibilty with Cells CLI<3.2
              return this.loadCellsPage(name);
            }
          }
        }
      }

      return Promise.resolve();
    }
  }, {
    key: "_isLocalTemplate",
    value: function _isLocalTemplate(templateName) {
      var isLocal = true;

      if (this.composerEndpoint && this.remoteTemplates) {
        isLocal = this.remoteTemplates.indexOf(templateName) === -1;
      }

      return isLocal;
    }
  }, {
    key: "createTemplate",
    value: function createTemplate(response) {
      var _this8 = this;

      var isPreRendering = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var spec = response;
      var name = response.page;
      var node = this.TemplateManager.getNode(name);
      var useComposerEngineForThisPage = this.composerEngine && !this.PageManager._isLocalComposer(name);
      this.BridgeChannelManager.getPrivate(name);
      var pageDefinition = this.getPageDefinition(name);
      var pageType = pageDefinition.adapter;

      if (!pageType) {
        var components = [].concat(spec.components || []);
        components.push(spec.template || {});
        var hasLitElements = components.filter(function (comp) {
          return comp.render === 'litElement';
        }).length > 0;
        var hasPolymerElements = components.filter(function (comp) {
          return comp.render === 'polymer' || comp.render === undefined;
        }).length > 0;

        if (hasPolymerElements && !hasLitElements) {
          pageType = bridge_renderEngines.POLYMER;
        } else {
          if (!hasPolymerElements && hasLitElements) {
            pageType = bridge_renderEngines.LIT_ELEMENT;
          }
        }
      }

      var normalizedInitialBundle = this.initialBundle.map(function (r) {
        return r.replace(/(\.js$|\.json$|-page(\.json|\.html)*)/, '');
      });
      var isPageInInitialBundle = normalizedInitialBundle.indexOf(name) > -1;

      if (!isPreRendering && this.preRenderingPages[name]) {
        this.preRenderingPages[name] = bridge_preRenderState.REQUESTED;
        return;
      } // Template is cached


      if (node && !useComposerEngineForThisPage) {
        this.selectTemplate(name, isPreRendering);
      } else {
        // Template not cached and has definition
        if (spec && spec.template) {
          if (this.prplLevel === bridge_prplCodes.DEFER && this._isLocalTemplate(name) && !isPageInInitialBundle) {
            if (pageType === bridge_renderEngines.POLYMER) {
              //pure polymer page
              this.ImportManager.loadBundleForTemplate(this.componentsPath, name).then(function () {
                _this8._createTemplateFromSpec(name, spec, isPreRendering);
              });
            } else {
              //pure litElement page
              if (pageType === bridge_renderEngines.LIT_ELEMENT) {
                if (this.loadCellsPage) {
                  // (loadCellsPage) Guard for compatibilty with Cells CLI<3.2
                  this.loadCellsPage(name).then(function () {
                    return _this8._createTemplateFromSpec(name, spec, isPreRendering);
                  });
                } else {
                  this._createTemplateFromSpec(name, spec, isPreRendering);
                }
              } else {
                // mixed page and litElement bundles
                if (this.loadCellsPage) {
                  // (loadCellsPage) Guard for compatibilty with Cells CLI<3.2
                  this.loadCellsPage("".concat(name, "-modules")).then(function () {
                    _this8.ImportManager.loadBundleForTemplate(_this8.componentsPath, name).then(function () {
                      _this8._createTemplateFromSpec(name, spec, isPreRendering);
                    });
                  });
                } else {
                  this.ImportManager.loadBundleForTemplate(this.componentsPath, name).then(function () {
                    _this8._createTemplateFromSpec(name, spec, isPreRendering);
                  });
                }
              }
            }
          } else {
            this._createTemplateFromSpec(name, spec, isPreRendering);
          }
        }
      }

      this._preRender(response, isPreRendering);
    }
  }, {
    key: "_preRender",
    value: function _preRender(response, isPreRendering) {
      var _this9 = this;

      if ((this.preCache === true || this.preRender === true) && response.pages) {
        for (var page in response.pages) {
          if (response.pages.hasOwnProperty(page)) {
            var pageAlreadyLoaded = page === name || this.TemplateManager.cache[page];

            if (pageAlreadyLoaded) {
              continue;
            }

            if (this.preRender && isPreRendering === false) {
              this.preRenderingPages[page] = bridge_preRenderState.WORKING;
            }

            this.loadTemplate(page).then(function (templateResponse) {
              if (_this9.preRender && isPreRendering === false) {
                var doPreRender = true;

                if (templateResponse.page) {
                  _this9._idleCallback(function () {
                    return _this9.createTemplate(templateResponse, doPreRender);
                  });
                } else {
                  console.warn('Missing page. ', templateResponse);
                }
              }
            });
          }
        }
      }
    }
  }, {
    key: "_createTemplateFromSpec",
    value: function _createTemplateFromSpec(name, spec) {
      var _this10 = this;

      var isPreRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // 4. Creates the new template
      var template = this.TemplateManager.createTemplate(name, spec.template, isPreRendering);

      if (this.prplLevel === bridge_prplCodes.PROGRESSIVE) {
        this.selectTemplate(name, isPreRendering);
      }

      this.ComponentConnector.registerComponent(template); // Add new routes in router

      if (spec.pages) {
        this.Router.addRoutes(spec.pages);
      } // 5. Import it when doesn't exists


      var adapter = this.ComponentConnector.adapterResolver.getComponentAdapter(template);

      if (adapter.isUnresolved(template.node)) {
        switch (this.prplLevel) {
          case bridge_prplCodes.NONE:
          case bridge_prplCodes.DEFER:
            this.ImportManager.loadComponent(template, this.componentsPath).then(function () {
              _this10._createComponents(spec, template, isPreRendering);
            });
            break;

          case bridge_prplCodes.PROGRESSIVE:
          case bridge_prplCodes.HERO:
            this._createComponents(spec, template, isPreRendering);

            break;
        }
      } else {
        this._createComponents(spec, template, isPreRendering);
      }
    }
    /**
    * Id for template node
    *
    * @param  {String} name Template name
    *
    * @return {String}
    */

  }, {
    key: "computeTemplateId",
    value: function computeTemplateId(name) {
      return 'cells-template-' + name.replace(/\./g, '-');
    }
  }, {
    key: "parse",
    value: function parse(name, value) {
      name = bridge_camelize('parse-' + name);
      return typeof this[name] === 'function' ? this[name](value) : value;
    }
  }, {
    key: "printDebugInfo",
    value: function printDebugInfo() {
      var getColor = function getColor(option, color) {
        var hexColor = option ? color : '#b0bec5';
        return "background:".concat(hexColor, "; color:#fff; padding:2px 4px; margin-right: 5px;");
      };

      console.log("%cbridge version: ".concat(this.version, " %cbinding: ").concat(this.binding, " %cprplLevel: ").concat(this.prplLevel, " %ccache: ").concat(this.cache, " %cpreCache: ").concat(this.preCache, " %cpreRender: ").concat(this.preRender, " %clogs: ").concat(this.logs), getColor(this.version, '#003f8d'), getColor(this.binding, '#0065ba'), getColor(this.prplLevel, '#008ff2'), getColor(this.cache, '#0093e2'), getColor(this.preCache, '#00aeeb'), getColor(this.preRender, '#41cef8'), //#00aeeb
      getColor(this.logs, '#0025ad') //#00aeeb
      );

      if (this.id > 0) {
        console.log("%cWARNING: There are ".concat(this.id + 1, " simultaneous instances of the Bridge running."), getColor(this.id, '#FF0000'));
      }
    }
  }, {
    key: "routeHandler",
    value: function routeHandler() {
      var PARSE_ROUTE = bridge_externalEventsCodes.PARSE_ROUTE;
      var route = this.Router.currentRoute;
      manager_events.emit(PARSE_ROUTE, route); // 2. Load a new page when route changes

      this._handleRouteLoading(route); // 3. Publish URL params to global params.


      for (var param in route.params) {
        var eventData = {
          detail: {
            value: route.params[param]
          },
          type: bridge_dasherize(param) + '-changed'
        };
        this.ComponentConnector.manager.get(param).next(eventData);
      }
    }
    /**
     * Determines if given route maps to a component.
     *
     * @param  {Object}  name is the page's name.
     * @return {Object}  pageDefinition:
     *                    {
     *                      name: page's name,
     *                      adapter: name of the adapter (polymer|litElement|vanilla)
     *                      type: static or dinamic,
     *                      hasModules: if it has components in an ES module
     *                    }
     */

  }, {
    key: "getPageDefinition",
    value: function getPageDefinition(name) {
      var defaultPageDefinition = {
        name: name,
        type: bridge_pageTypes.DYNAMIC,
        adapter: bridge_renderEngines.POLYMER
      };
      var pageDefinition = defaultPageDefinition;
      var definitions = this.pageDefinitions.filter(Boolean).filter(function (p) {
        return p.name === name;
      });

      if (definitions.length === 0) {
        this.pageDefinitions.push(defaultPageDefinition);
      } else {
        pageDefinition = definitions[0];
      }

      return pageDefinition;
    }
  }, {
    key: "loadTemplate",
    value: function loadTemplate(name, params) {
      var cache = this.cache,
          method = this.method,
          body = this.body,
          headers = this.headers,
          app = this.app,
          templates = this.templatesPath;
      var options = {
        cache: cache,
        params: params,
        method: method,
        body: body,
        headers: headers
      };
      var config = {
        app: app,
        templates: templates
      };
      return this.PageManager.get(name, options, config);
    } // @TODO DRY -> sanitizer lo usa también

  }, {
    key: "loadPolymerWebComponent",
    value: function () {
      var _loadPolymerWebComponent = bridge_asyncToGenerator( /*#__PURE__*/bridge_regeneratorRuntime().mark(function _callee2(name, hasModules) {
        var path, component, pageModules;
        return bridge_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                path = Array(2).fill("".concat(name, "-page")).join('/');
                component = {
                  spec: {
                    path: "".concat(path, ".html")
                  }
                };

                if (!hasModules) {
                  _context2.next = 6;
                  break;
                }

                pageModules = "".concat(name, "-modules");
                _context2.next = 6;
                return this.loadCellsPage(pageModules);

              case 6:
                return _context2.abrupt("return", this.ImportManager.loadComponent(component, this.pagesPath));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadPolymerWebComponent(_x, _x2) {
        return _loadPolymerWebComponent.apply(this, arguments);
      }

      return loadPolymerWebComponent;
    }()
  }, {
    key: "_handleRouteLoading",
    value: function _handleRouteLoading(route) {
      var _this11 = this;

      var pageDefinition = this.getPageDefinition(route.name);

      if (pageDefinition.type === bridge_pageTypes.STATIC) {
        this.createPageFromWebComponent(pageDefinition).then(function () {
          return _this11.selectPage(route.name, route.params);
        });
      } else {
        this.loadTemplate(route.name, route.params).then(function (response) {
          return _this11.createTemplate(response);
        });
      }
    }
  }, {
    key: "registerCurrentTemplate",
    value: function registerCurrentTemplate(currentTemplate, previousTemplate) {
      var TEMPLATE_REGISTERED = bridge_externalEventsCodes.TEMPLATE_REGISTERED;
      var UI = bridge_bindingCodes.UI;
      var options = this;

      if (previousTemplate && previousTemplate !== currentTemplate) {
        this.unregisterChildren(previousTemplate, options.binding === UI ? 'DM' : null);
      }

      this.registerChildren(currentTemplate, options.binding === UI ? 'DM' : null);

      this._updateChannels(previousTemplate, currentTemplate);

      manager_events.emit(TEMPLATE_REGISTERED, {
        template: currentTemplate.name
      });
    } // this function MAY BE OVERRIDDEN by native bridge - not required due to internal router updating the context

  }, {
    key: "_updateChannels",
    value: function _updateChannels(previousTemplate, currentTemplate) {
      if (this.BridgeChannelManager) {
        var oldName = previousTemplate ? previousTemplate.name : undefined;
        var ctx = this.getInterceptorContext();
        this.BridgeChannelManager.updateBridgeChannels(oldName, currentTemplate.name, ctx);
      }
    }
  }, {
    key: "registerChildren",
    value: function registerChildren(template, type) {
      for (var index = 0; index < template.children.length; index++) {
        var component = template.children[index];

        if (type && type === component.type || !type) {
          this.ComponentConnector.registerComponent(component);
        }
      }
    }
  }, {
    key: "unregisterChildren",
    value: function unregisterChildren(template, type) {
      for (var index = 0; index < template.children.length; index++) {
        var component = template.children[index];

        if (type && type === component.type || !type) {
          this.ComponentConnector.unregisterComponent(component.node);
        }
      }
    }
  }, {
    key: "registerInConnection",
    value: function registerInConnection(channelName, node, callback) {
      this.ComponentConnector.addSubscription(channelName, node, callback);
    }
  }, {
    key: "registerOutConnection",
    value: function registerOutConnection(channelName, htmlElement, bindName, extraParameters) {
      this.ComponentConnector.addPublication(channelName, htmlElement, bindName, extraParameters);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(channels, node) {
      this.ComponentConnector.unsubscribe(channels, node);
    }
  }, {
    key: "publish",
    value: function publish(channelName, value) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          sessionStorage = _ref2.sessionStorage;

      this.ComponentConnector.publish(channelName, value);

      if (sessionStorage === true) {
        this.ApplicationStateManager.saveAppState(channelName, value);
      }
    }
  }, {
    key: "updateApplicationConfig",
    value: function updateApplicationConfig(config) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          sessionStorage = _ref3.sessionStorage;

      var CONFIG_CHANNEL_NAME = '__bridge_ch_config';
      this.publish(CONFIG_CHANNEL_NAME, config);

      if (sessionStorage === true) {
        this.ApplicationConfigManager.saveAppConfig(config);
      }
    }
  }, {
    key: "navigate",
    value: function navigate(page, params) {
      this.Router.go(page, params);
    } // dummy methods only for native override

  }, {
    key: "navigateToNative",
    value: function navigateToNative(page, params) {}
  }, {
    key: "backStep",
    value: function backStep() {
      var ROUTER_BACKSTEP = bridge_externalEventsCodes.ROUTER_BACKSTEP;
      manager_events.emit(ROUTER_BACKSTEP, {
        event: {},
        detail: {}
      });
    }
  }, {
    key: "_waitRenderComplete",
    value: function _waitRenderComplete(template) {
      return template.node.updateComplete || Promise.resolve();
    }
  }, {
    key: "selectPage",
    value: function selectPage(name, params) {
      var _this12 = this;

      var TEMPLATE_REGISTERED = bridge_externalEventsCodes.TEMPLATE_REGISTERED;
      var template = this.TemplateManager.get(name);
      var currentTemplate = this.TemplateManager.get(this.TemplateManager.selected);
      var oldTemplateName = currentTemplate ? currentTemplate.name : null;

      if (this.onRender) {
        this.onRender(template.node);
      }

      bridge_asyncToGenerator( /*#__PURE__*/bridge_regeneratorRuntime().mark(function _callee3() {
        var ctx;
        return bridge_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this12._waitRenderComplete(template);

              case 2:
                _this12._handleParams(template.node, params);

                ctx = _this12.getInterceptorContext();

                _this12.TemplateManager.select(name, _this12.BridgeChannelManager, _this12.binding, ctx);

                if (_this12.BridgeChannelManager) {
                  _this12.BridgeChannelManager.updateBridgeChannels(oldTemplateName, name, ctx);
                }

                manager_events.emit(TEMPLATE_REGISTERED, {
                  template: name
                });

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "_handleParams",
    value: function _handleParams(node, params) {
      var shouldBindParams = node.params && Object.keys(params).length > 0;

      if (shouldBindParams) {
        node.params = params;
      }
    }
  }, {
    key: "selectTemplate",
    value: function selectTemplate(name) {
      var _this13 = this;

      var isPreRendering = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var TEMPLATE_TRANSITION_END = bridge_externalEventsCodes.TEMPLATE_TRANSITION_END;
      var CURRENTVIEW = bridge_bindingCodes.CURRENTVIEW,
          UI = bridge_bindingCodes.UI,
          DELAYED = bridge_bindingCodes.DELAYED;
      var options = this;
      var template = this.TemplateManager.get(name);
      var shouldRender = isPreRendering !== true || this.preRenderingPages[name] === bridge_preRenderState.REQUESTED;

      if ((options.binding === CURRENTVIEW || options.binding === UI) && shouldRender) {
        // COMPROBAR 5 VECES
        var currentTemplate = this.TemplateManager.get(this.TemplateManager.selected);

        var onTemplateAnimationFinishes = function onTemplateAnimationFinishes() {
          return _this13.registerCurrentTemplate(template, currentTemplate);
        };

        if (template.node.animationCompleteEvent) {
          manager_events.listenToOnce(template.node, template.node.animationCompleteEvent, onTemplateAnimationFinishes);
        } else {
          manager_events.once(TEMPLATE_TRANSITION_END, onTemplateAnimationFinishes);
        }
      }

      if (options.onRender) {
        if (template.fixedChildren.length > 0) {
          options.onRender(template.node, template.fixedChildren);
        } else {
          options.onRender(template.node);
        }
      } // 10. Shows the template created if it is not pre rendering or
      // if it's a pre-rendered page that has been requested


      if (isPreRendering) {
        delete this.preRenderingPages[name];
      }

      if (shouldRender) {
        var ctx = this.getInterceptorContext();

        var animateTemplate = function animateTemplate() {
          return _this13.TemplateManager.select(name, _this13.BridgeChannelManager, options.binding, ctx);
        };

        if (options.binding === DELAYED) {
          this._idleCallback(animateTemplate);
        } else {
          animateTemplate();
        }
      }
    }
  }, {
    key: "_idleCallback",
    value: function _idleCallback(fn) {
      this.BridgeChannelManager.getIdleCallbackChannel().subscribe(fn);
    }
    /**
     *
     * It subscribe the main node to an event channel.
     *
     * @param {*} eventName is the name of the event to subscribe
     * @param {*} callback is the function to call when the event channel is activated with a new value
     */

  }, {
    key: "subscribeToEvent",
    value: function subscribeToEvent(eventName, callback) {
      if (this.externalEvents.indexOf(eventName) < 0) {
        console.warn('Trying to subscribe to a non existing event: ', eventName);
        return;
      }

      if (typeof callback !== 'function') {
        console.warn('You must provide a function callback to subscribe to the event: ', eventName);
        return;
      }

      var mainNode = this.getMainNode();
      this.BridgeChannelManager.subscribeToEvent(mainNode, eventName, callback);
    }
  }, {
    key: "getMainNode",
    value: function getMainNode() {
      if (!this.__mainNodeElement) {
        this.__mainNodeElement = document.querySelector('#' + this.mainNode);
      }

      return this.__mainNodeElement;
    }
  }, {
    key: "_disconnectCrossComponents",
    value: function _disconnectCrossComponents(_ref5, cleanPrivateChannels) {
      var _this14 = this;

      var inConnections = _ref5.inConnections,
          outConnections = _ref5.outConnections;
      inConnections === null || inConnections === void 0 ? void 0 : inConnections.forEach(function (cnx) {
        _this14.ComponentConnector.unregisterComponent(cnx.component, cleanPrivateChannels);
      });
      outConnections === null || outConnections === void 0 ? void 0 : outConnections.forEach(function (cnx) {
        _this14.ComponentConnector.unregisterComponent(cnx.component, cleanPrivateChannels);
      });
    }
  }, {
    key: "_reconnectCrossComponents",
    value: function _reconnectCrossComponents(_ref6) {
      var _this15 = this;

      var inConnections = _ref6.inConnections,
          outConnections = _ref6.outConnections;
      inConnections === null || inConnections === void 0 ? void 0 : inConnections.forEach(function (cnx) {
        _this15.registerInConnection(cnx.channel, cnx.component, cnx.bind);
      });
      outConnections === null || outConnections === void 0 ? void 0 : outConnections.forEach(function (cnx) {
        _this15.registerOutConnection(cnx.channel, cnx.component, cnx.bind, cnx.options);
      });
    }
  }, {
    key: "_resetBridgeChannels",
    value: function _resetBridgeChannels() {
      var cleanPrivateChannels = true;
      var crossContainerTemplateId = this.TemplateManager.computeTemplateId(this.crossContainerId);
      var crossComponentsConnections = this.usingDeclarativeCrossContainer ? this.BridgeChannelManager.getCCSubscriptions(crossContainerTemplateId) : {};

      this._disconnectCrossComponents(crossComponentsConnections, cleanPrivateChannels);

      this.BridgeChannelManager.resetBridgeChannels(this.getMainNode(), cleanPrivateChannels);

      this._reconnectCrossComponents(crossComponentsConnections);
    }
    /**
     *
     * Performs a logout action. It resets all channels, removes templates from DOM
     * and redirects to the initial page
     *
     */

  }, {
    key: "logout",
    value: function logout() {
      if (this.TemplateManager.selected === this.initialTemplate) {
        return;
      } // clean up current page


      this.BridgeChannelManager.publishPrivatePageStatus(this.TemplateManager.selected, false);

      this._resetBridgeChannels();

      if (!this.usingDeclarativeCrossContainer) {
        this.TemplateManager.removeTemplateChildrens(this.crossContainerId);
      }

      ;
      this.TemplateManager.removeTemplates(undefined, this.crossContainerId);
      this.ActionChannelManager.subscribeAll();

      this._initEventChannels();

      if (this.composerEngine) {
        this.composerEngine.reset();
      }

      this.resetInterceptorContext();
      this.Router.init();
      this.Router.go(this.initialTemplate);
    }
  }]);

  return CellsBridge;
}();


// CONCATENATED MODULE: ./src/index.js
// BUILD_TARGET import statement is replaced by NormalModuleReplacementPlugin at build time with desireed target.
// Possible values: core, native, polymer.


 // TARGETS and BUILD_TARGET are injected through Webpack DefinePlugin,

var TARGET_NAMESPACE = {"native":{"windowExport":"CellsNativeBridge","library":"cellsNative","file":"cells-native-bridge","version":"0.11.0"},"core":{"windowExport":"CellsPolymerBridge","library":"cells","file":"cells-polymer-bridge"}}["core"] || {"native":{"windowExport":"CellsNativeBridge","library":"cellsNative","file":"cells-native-bridge","version":"0.11.0"},"core":{"windowExport":"CellsPolymerBridge","library":"cells","file":"cells-polymer-bridge"}}['core'];
var windowExport = TARGET_NAMESPACE.windowExport; // We expose Bridge to Browsers

window[windowExport] = bridge_CellsBridge;

/***/ }),

/***/ "./src/polyfills.js":
/*!**************************!*\
  !*** ./src/polyfills.js ***!
  \**************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

if (!Object.values) {
  Object.values = function values(obj) {
    return Object.keys(obj).map(function (key) {
      return obj[key];
    });
  };
}

if (!Object.entries) {
  Object.entries = function (obj) {
    var ownProps = Object.keys(obj),
        i = ownProps.length,
        resArray = new Array(i); // preallocate the Array

    while (i--) {
      resArray[i] = [ownProps[i], obj[ownProps[i]]];
    }

    return resArray;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (searchString, position) {
    var subjectString = this.toString();

    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }

    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

if (!Array.prototype.flat) {
  Array.prototype.flat = function (depth) {
    var flattend = [];

    (function flat(array, depth) {
      var _iterator = _createForOfIteratorHelper(array),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var el = _step.value;

          if (Array.isArray(el) && depth > 0) {
            flat(el, depth - 1);
          } else {
            flattend.push(el);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    })(this, Math.floor(depth) || 1);

    return flattend;
  };
}

/***/ })

/******/ });
});
//# sourceMappingURL=cells-polymer-bridge.js.map